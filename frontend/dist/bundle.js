/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";var e={12:(e,t,n)=>{n.d(t,{A:()=>i});var r=n(354),a=n.n(r),o=n(314),l=n.n(o)()(a());l.push([e.id,"/* Dashboard Container */\n.dashboard-container {\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n  background-color: #f5f6fa;\n  min-height: 100vh;\n}\n\n\n/* Main Dashboard */\n.dashboard-main {\n  padding: 2rem;\n}\n\n.dashboard-main h1 {\n  font-size: 2rem;\n  margin-bottom: 0.5rem;\n}\n\n.dashboard-main p {\n  margin-bottom: 1.5rem;\n  color: #7f8c8d;\n}\n\n/* Controls Cards */\n.cards-container {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 1rem;\n  margin-bottom: 1.5rem;\n}\n\n.cards-container .card {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  background-color: #fff;\n  padding: 0.7rem 1rem;\n  border-radius: 8px;\n  box-shadow: 0 3px 6px rgba(0,0,0,0.1);\n}\n\n.cards-container input[type=\"text\"] {\n  border: none;\n  outline: none;\n  padding: 0.5rem;\n  font-size: 1rem;\n  border-radius: 6px;\n  flex: 1;\n}\n\n.cards-container select {\n  border: none;\n  outline: none;\n  padding: 0.5rem;\n  font-size: 1rem;\n  border-radius: 6px;\n  cursor: pointer;\n  background-color: #ecf0f1;\n}\n\n.cards-container button {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  background-color: #27ae60;\n  color: #fff;\n  border: none;\n  padding: 0.5rem 1rem;\n  border-radius: 6px;\n  cursor: pointer;\n  font-weight: bold;\n  transition: background-color 0.3s, transform 0.2s;\n}\n\n.cards-container button:hover {\n  background-color: #2ecc71;\n  transform: translateY(-2px);\n}\n\n/* Threat Table */\n.threat-table {\n  width: 100%;\n  border-collapse: collapse;\n  background-color: #fff;\n  border-radius: 8px;\n  overflow: hidden;\n  box-shadow: 0 3px 6px rgba(0,0,0,0.1);\n}\n\n.threat-table th, .threat-table td {\n  padding: 0.8rem 1rem;\n  text-align: left;\n}\n\n.threat-table th {\n  background-color: #34495e;\n  color: #ecf0f1;\n  font-weight: bold;\n}\n\n.threat-table tbody tr {\n  border-bottom: 1px solid #ecf0f1;\n}\n\n.threat-table tbody tr:nth-child(even) {\n  background-color: #f7f9fa;\n}\n\n.threat-table tbody tr:hover {\n  background-color: #dcdde1;\n  transition: background-color 0.3s;\n}\n","",{version:3,sources:["webpack://./src/styles/Dashboard.css"],names:[],mappings:"AAAA,wBAAwB;AACxB;EACE,4DAA4D;EAC5D,yBAAyB;EACzB,iBAAiB;AACnB;;;AAGA,mBAAmB;AACnB;EACE,aAAa;AACf;;AAEA;EACE,eAAe;EACf,qBAAqB;AACvB;;AAEA;EACE,qBAAqB;EACrB,cAAc;AAChB;;AAEA,mBAAmB;AACnB;EACE,aAAa;EACb,eAAe;EACf,SAAS;EACT,qBAAqB;AACvB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,WAAW;EACX,sBAAsB;EACtB,oBAAoB;EACpB,kBAAkB;EAClB,qCAAqC;AACvC;;AAEA;EACE,YAAY;EACZ,aAAa;EACb,eAAe;EACf,eAAe;EACf,kBAAkB;EAClB,OAAO;AACT;;AAEA;EACE,YAAY;EACZ,aAAa;EACb,eAAe;EACf,eAAe;EACf,kBAAkB;EAClB,eAAe;EACf,yBAAyB;AAC3B;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,WAAW;EACX,yBAAyB;EACzB,WAAW;EACX,YAAY;EACZ,oBAAoB;EACpB,kBAAkB;EAClB,eAAe;EACf,iBAAiB;EACjB,iDAAiD;AACnD;;AAEA;EACE,yBAAyB;EACzB,2BAA2B;AAC7B;;AAEA,iBAAiB;AACjB;EACE,WAAW;EACX,yBAAyB;EACzB,sBAAsB;EACtB,kBAAkB;EAClB,gBAAgB;EAChB,qCAAqC;AACvC;;AAEA;EACE,oBAAoB;EACpB,gBAAgB;AAClB;;AAEA;EACE,yBAAyB;EACzB,cAAc;EACd,iBAAiB;AACnB;;AAEA;EACE,gCAAgC;AAClC;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,yBAAyB;EACzB,iCAAiC;AACnC",sourcesContent:["/* Dashboard Container */\n.dashboard-container {\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n  background-color: #f5f6fa;\n  min-height: 100vh;\n}\n\n\n/* Main Dashboard */\n.dashboard-main {\n  padding: 2rem;\n}\n\n.dashboard-main h1 {\n  font-size: 2rem;\n  margin-bottom: 0.5rem;\n}\n\n.dashboard-main p {\n  margin-bottom: 1.5rem;\n  color: #7f8c8d;\n}\n\n/* Controls Cards */\n.cards-container {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 1rem;\n  margin-bottom: 1.5rem;\n}\n\n.cards-container .card {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  background-color: #fff;\n  padding: 0.7rem 1rem;\n  border-radius: 8px;\n  box-shadow: 0 3px 6px rgba(0,0,0,0.1);\n}\n\n.cards-container input[type=\"text\"] {\n  border: none;\n  outline: none;\n  padding: 0.5rem;\n  font-size: 1rem;\n  border-radius: 6px;\n  flex: 1;\n}\n\n.cards-container select {\n  border: none;\n  outline: none;\n  padding: 0.5rem;\n  font-size: 1rem;\n  border-radius: 6px;\n  cursor: pointer;\n  background-color: #ecf0f1;\n}\n\n.cards-container button {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  background-color: #27ae60;\n  color: #fff;\n  border: none;\n  padding: 0.5rem 1rem;\n  border-radius: 6px;\n  cursor: pointer;\n  font-weight: bold;\n  transition: background-color 0.3s, transform 0.2s;\n}\n\n.cards-container button:hover {\n  background-color: #2ecc71;\n  transform: translateY(-2px);\n}\n\n/* Threat Table */\n.threat-table {\n  width: 100%;\n  border-collapse: collapse;\n  background-color: #fff;\n  border-radius: 8px;\n  overflow: hidden;\n  box-shadow: 0 3px 6px rgba(0,0,0,0.1);\n}\n\n.threat-table th, .threat-table td {\n  padding: 0.8rem 1rem;\n  text-align: left;\n}\n\n.threat-table th {\n  background-color: #34495e;\n  color: #ecf0f1;\n  font-weight: bold;\n}\n\n.threat-table tbody tr {\n  border-bottom: 1px solid #ecf0f1;\n}\n\n.threat-table tbody tr:nth-child(even) {\n  background-color: #f7f9fa;\n}\n\n.threat-table tbody tr:hover {\n  background-color: #dcdde1;\n  transition: background-color 0.3s;\n}\n"],sourceRoot:""}]);const i=l},56:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},72:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var o={},l=[],i=0;i<e.length;i++){var u=e[i],s=r.base?u[0]+r.base:u[0],c=o[s]||0,f="".concat(s," ").concat(c);o[s]=c+1;var d=n(f),p={css:u[1],media:u[2],sourceMap:u[3],supports:u[4],layer:u[5]};if(-1!==d)t[d].references++,t[d].updater(p);else{var m=a(p,r);r.byIndex=i,t.splice(i,0,{identifier:f,updater:m,references:1})}l.push(f)}return l}function a(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,a){var o=r(e=e||[],a=a||{});return function(e){e=e||[];for(var l=0;l<o.length;l++){var i=n(o[l]);t[i].references--}for(var u=r(e,a),s=0;s<o.length;s++){var c=n(o[s]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}o=u}}},113:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},159:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},171:(e,t,n)=>{n.d(t,{A:()=>i});var r=n(354),a=n.n(r),o=n(314),l=n.n(o)()(a());l.push([e.id,"","",{version:3,sources:[],names:[],mappings:"",sourceRoot:""}]);const i=l},208:(e,t,n)=>{n.d(t,{A:()=>i});var r=n(354),a=n.n(r),o=n(314),l=n.n(o)()(a());l.push([e.id,"* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nhtml, body, #root {\n  height: 100%;\n  width: 100%;\n  font-family: Arial, sans-serif;\n}\n","",{version:3,sources:["webpack://./src/styles/index.css"],names:[],mappings:"AAAA;EACE,SAAS;EACT,UAAU;EACV,sBAAsB;AACxB;;AAEA;EACE,YAAY;EACZ,WAAW;EACX,8BAA8B;AAChC",sourcesContent:["* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nhtml, body, #root {\n  height: 100%;\n  width: 100%;\n  font-family: Arial, sans-serif;\n}\n"],sourceRoot:""}]);const i=l},221:(e,t,n)=>{var r=n(540);function a(e){var t="https://react.dev/errors/"+e;if(1<arguments.length){t+="?args[]="+encodeURIComponent(arguments[1]);for(var n=2;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n])}return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}function o(){}var l={d:{f:o,r:function(){throw Error(a(522))},D:o,C:o,L:o,m:o,X:o,S:o,M:o},p:0,findDOMNode:null},i=Symbol.for("react.portal"),u=r.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;function s(e,t){return"font"===e?"":"string"==typeof t?"use-credentials"===t?t:"":void 0}t.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=l,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!t||1!==t.nodeType&&9!==t.nodeType&&11!==t.nodeType)throw Error(a(299));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:i,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.flushSync=function(e){var t=u.T,n=l.p;try{if(u.T=null,l.p=2,e)return e()}finally{u.T=t,l.p=n,l.d.f()}},t.preconnect=function(e,t){"string"==typeof e&&(t=t?"string"==typeof(t=t.crossOrigin)?"use-credentials"===t?t:"":void 0:null,l.d.C(e,t))},t.prefetchDNS=function(e){"string"==typeof e&&l.d.D(e)},t.preinit=function(e,t){if("string"==typeof e&&t&&"string"==typeof t.as){var n=t.as,r=s(n,t.crossOrigin),a="string"==typeof t.integrity?t.integrity:void 0,o="string"==typeof t.fetchPriority?t.fetchPriority:void 0;"style"===n?l.d.S(e,"string"==typeof t.precedence?t.precedence:void 0,{crossOrigin:r,integrity:a,fetchPriority:o}):"script"===n&&l.d.X(e,{crossOrigin:r,integrity:a,fetchPriority:o,nonce:"string"==typeof t.nonce?t.nonce:void 0})}},t.preinitModule=function(e,t){if("string"==typeof e)if("object"==typeof t&&null!==t){if(null==t.as||"script"===t.as){var n=s(t.as,t.crossOrigin);l.d.M(e,{crossOrigin:n,integrity:"string"==typeof t.integrity?t.integrity:void 0,nonce:"string"==typeof t.nonce?t.nonce:void 0})}}else null==t&&l.d.M(e)},t.preload=function(e,t){if("string"==typeof e&&"object"==typeof t&&null!==t&&"string"==typeof t.as){var n=t.as,r=s(n,t.crossOrigin);l.d.L(e,n,{crossOrigin:r,integrity:"string"==typeof t.integrity?t.integrity:void 0,nonce:"string"==typeof t.nonce?t.nonce:void 0,type:"string"==typeof t.type?t.type:void 0,fetchPriority:"string"==typeof t.fetchPriority?t.fetchPriority:void 0,referrerPolicy:"string"==typeof t.referrerPolicy?t.referrerPolicy:void 0,imageSrcSet:"string"==typeof t.imageSrcSet?t.imageSrcSet:void 0,imageSizes:"string"==typeof t.imageSizes?t.imageSizes:void 0,media:"string"==typeof t.media?t.media:void 0})}},t.preloadModule=function(e,t){if("string"==typeof e)if(t){var n=s(t.as,t.crossOrigin);l.d.m(e,{as:"string"==typeof t.as&&"script"!==t.as?t.as:void 0,crossOrigin:n,integrity:"string"==typeof t.integrity?t.integrity:void 0})}else l.d.m(e)},t.requestFormReset=function(e){l.d.r(e)},t.unstable_batchedUpdates=function(e,t){return e(t)},t.useFormState=function(e,t,n){return u.H.useFormState(e,t,n)},t.useFormStatus=function(){return u.H.useHostTransitionStatus()},t.version="19.1.1"},243:(e,t,n)=>{n.d(t,{A:()=>i});var r=n(354),a=n.n(r),o=n(314),l=n.n(o)()(a());l.push([e.id,"/* Full page background */\n.login-page {\n  min-height: 100vh; /* Take full viewport height */\n  background: linear-gradient(to right, #667eea, #764ba2);\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n/* App title at the top */\n.app-title {\n  font-size: 2.5rem;\n  color: white;\n  margin: 40px 0 20px 0;\n  text-align: center;\n}\n\n/* Wrapper to center login container */\n.login-wrapper {\n  flex: 1; /* Take remaining height */\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n}\n\n/* Login container */\n.login-container {\n  background-color: #f8f9fa;\n  padding: 40px;\n  border-radius: 10px;\n  width: 100%;\n  max-width: 400px;\n  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n/* Form fields */\n.login-container input {\n  width: 100%;\n  padding: 12px;\n  margin: 10px 0;\n  border-radius: 5px;\n  border: 1px solid #ccc;\n  font-size: 1rem;\n}\n\n/* Login button */\n.login-container button {\n  width: 100%;\n  padding: 12px;\n  margin-top: 10px;\n  background-color: #667eea;\n  border: none;\n  border-radius: 5px;\n  color: white;\n  font-size: 1rem;\n  cursor: pointer;\n}\n\n/* Register button */\n.register-btn {\n  margin-top: 15px;\n  background-color: #764ba2;\n}\n\n/* Error message */\n.error {\n  color: red;\n  margin-top: 10px;\n  font-size: 0.9rem;\n}\n","",{version:3,sources:["webpack://./src/styles/Login.css"],names:[],mappings:"AAAA,yBAAyB;AACzB;EACE,iBAAiB,EAAE,8BAA8B;EACjD,uDAAuD;EACvD,4DAA4D;EAC5D,aAAa;EACb,sBAAsB;EACtB,mBAAmB;AACrB;;AAEA,yBAAyB;AACzB;EACE,iBAAiB;EACjB,YAAY;EACZ,qBAAqB;EACrB,kBAAkB;AACpB;;AAEA,sCAAsC;AACtC;EACE,OAAO,EAAE,0BAA0B;EACnC,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,WAAW;AACb;;AAEA,oBAAoB;AACpB;EACE,yBAAyB;EACzB,aAAa;EACb,mBAAmB;EACnB,WAAW;EACX,gBAAgB;EAChB,yCAAyC;EACzC,aAAa;EACb,sBAAsB;EACtB,mBAAmB;AACrB;;AAEA,gBAAgB;AAChB;EACE,WAAW;EACX,aAAa;EACb,cAAc;EACd,kBAAkB;EAClB,sBAAsB;EACtB,eAAe;AACjB;;AAEA,iBAAiB;AACjB;EACE,WAAW;EACX,aAAa;EACb,gBAAgB;EAChB,yBAAyB;EACzB,YAAY;EACZ,kBAAkB;EAClB,YAAY;EACZ,eAAe;EACf,eAAe;AACjB;;AAEA,oBAAoB;AACpB;EACE,gBAAgB;EAChB,yBAAyB;AAC3B;;AAEA,kBAAkB;AAClB;EACE,UAAU;EACV,gBAAgB;EAChB,iBAAiB;AACnB",sourcesContent:["/* Full page background */\r\n.login-page {\r\n  min-height: 100vh; /* Take full viewport height */\r\n  background: linear-gradient(to right, #667eea, #764ba2);\r\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n}\r\n\r\n/* App title at the top */\r\n.app-title {\r\n  font-size: 2.5rem;\r\n  color: white;\r\n  margin: 40px 0 20px 0;\r\n  text-align: center;\r\n}\r\n\r\n/* Wrapper to center login container */\r\n.login-wrapper {\r\n  flex: 1; /* Take remaining height */\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 100%;\r\n}\r\n\r\n/* Login container */\r\n.login-container {\r\n  background-color: #f8f9fa;\r\n  padding: 40px;\r\n  border-radius: 10px;\r\n  width: 100%;\r\n  max-width: 400px;\r\n  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n}\r\n\r\n/* Form fields */\r\n.login-container input {\r\n  width: 100%;\r\n  padding: 12px;\r\n  margin: 10px 0;\r\n  border-radius: 5px;\r\n  border: 1px solid #ccc;\r\n  font-size: 1rem;\r\n}\r\n\r\n/* Login button */\r\n.login-container button {\r\n  width: 100%;\r\n  padding: 12px;\r\n  margin-top: 10px;\r\n  background-color: #667eea;\r\n  border: none;\r\n  border-radius: 5px;\r\n  color: white;\r\n  font-size: 1rem;\r\n  cursor: pointer;\r\n}\r\n\r\n/* Register button */\r\n.register-btn {\r\n  margin-top: 15px;\r\n  background-color: #764ba2;\r\n}\r\n\r\n/* Error message */\r\n.error {\r\n  color: red;\r\n  margin-top: 10px;\r\n  font-size: 0.9rem;\r\n}\r\n"],sourceRoot:""}]);const i=l},247:(e,t,n)=>{var r=n(982),a=n(540),o=n(961);function l(e){var t="https://react.dev/errors/"+e;if(1<arguments.length){t+="?args[]="+encodeURIComponent(arguments[1]);for(var n=2;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n])}return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}function i(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function u(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{!!(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function s(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function c(e){if(u(e)!==e)throw Error(l(188))}function f(e){var t=e.tag;if(5===t||26===t||27===t||6===t)return e;for(e=e.child;null!==e;){if(null!==(t=f(e)))return t;e=e.sibling}return null}var d=Object.assign,p=Symbol.for("react.element"),m=Symbol.for("react.transitional.element"),h=Symbol.for("react.portal"),g=Symbol.for("react.fragment"),y=Symbol.for("react.strict_mode"),b=Symbol.for("react.profiler"),v=Symbol.for("react.provider"),A=Symbol.for("react.consumer"),E=Symbol.for("react.context"),w=Symbol.for("react.forward_ref"),k=Symbol.for("react.suspense"),C=Symbol.for("react.suspense_list"),S=Symbol.for("react.memo"),x=Symbol.for("react.lazy");Symbol.for("react.scope");var B=Symbol.for("react.activity");Symbol.for("react.legacy_hidden"),Symbol.for("react.tracing_marker");var T=Symbol.for("react.memo_cache_sentinel");Symbol.for("react.view_transition");var P=Symbol.iterator;function O(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=P&&e[P]||e["@@iterator"])?e:null}var R=Symbol.for("react.client.reference");function N(e){if(null==e)return null;if("function"==typeof e)return e.$$typeof===R?null:e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case g:return"Fragment";case b:return"Profiler";case y:return"StrictMode";case k:return"Suspense";case C:return"SuspenseList";case B:return"Activity"}if("object"==typeof e)switch(e.$$typeof){case h:return"Portal";case E:return(e.displayName||"Context")+".Provider";case A:return(e._context.displayName||"Context")+".Consumer";case w:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case S:return null!==(t=e.displayName||null)?t:N(e.type)||"Memo";case x:t=e._payload,e=e._init;try{return N(e(t))}catch(e){}}return null}var _=Array.isArray,z=a.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,L=o.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,D={pending:!1,data:null,method:null,action:null},j=[],F=-1;function I(e){return{current:e}}function M(e){0>F||(e.current=j[F],j[F]=null,F--)}function U(e,t){F++,j[F]=e.current,e.current=t}var $=I(null),W=I(null),H=I(null),q=I(null);function V(e,t){switch(U(H,t),U(W,e),U($,null),t.nodeType){case 9:case 11:e=(e=t.documentElement)&&(e=e.namespaceURI)?af(e):0;break;default:if(e=t.tagName,t=t.namespaceURI)e=of(t=af(t),e);else switch(e){case"svg":e=1;break;case"math":e=2;break;default:e=0}}M($),U($,e)}function Y(){M($),M(W),M(H)}function G(e){null!==e.memoizedState&&U(q,e);var t=$.current,n=of(t,e.type);t!==n&&(U(W,e),U($,n))}function K(e){W.current===e&&(M($),M(W)),q.current===e&&(M(q),Kf._currentValue=D)}var Q=Object.prototype.hasOwnProperty,X=r.unstable_scheduleCallback,J=r.unstable_cancelCallback,Z=r.unstable_shouldYield,ee=r.unstable_requestPaint,te=r.unstable_now,ne=r.unstable_getCurrentPriorityLevel,re=r.unstable_ImmediatePriority,ae=r.unstable_UserBlockingPriority,oe=r.unstable_NormalPriority,le=r.unstable_LowPriority,ie=r.unstable_IdlePriority,ue=r.log,se=r.unstable_setDisableYieldValue,ce=null,fe=null;function de(e){if("function"==typeof ue&&se(e),fe&&"function"==typeof fe.setStrictMode)try{fe.setStrictMode(ce,e)}catch(e){}}var pe=Math.clz32?Math.clz32:function(e){return 0==(e>>>=0)?32:31-(me(e)/he|0)|0},me=Math.log,he=Math.LN2,ge=256,ye=4194304;function be(e){var t=42&e;if(0!==t)return t;switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:return 64;case 128:return 128;case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194048&e;case 4194304:case 8388608:case 16777216:case 33554432:return 62914560&e;case 67108864:return 67108864;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 0;default:return e}}function ve(e,t,n){var r=e.pendingLanes;if(0===r)return 0;var a=0,o=e.suspendedLanes,l=e.pingedLanes;e=e.warmLanes;var i=134217727&r;return 0!==i?0!==(r=i&~o)?a=be(r):0!==(l&=i)?a=be(l):n||0!==(n=i&~e)&&(a=be(n)):0!==(i=r&~o)?a=be(i):0!==l?a=be(l):n||0!==(n=r&~e)&&(a=be(n)),0===a?0:0!==t&&t!==a&&0===(t&o)&&((o=a&-a)>=(n=t&-t)||32===o&&4194048&n)?t:a}function Ae(e,t){return 0===(e.pendingLanes&~(e.suspendedLanes&~e.pingedLanes)&t)}function Ee(e,t){switch(e){case 1:case 2:case 4:case 8:case 64:return t+250;case 16:case 32:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function we(){var e=ge;return!(4194048&(ge<<=1))&&(ge=256),e}function ke(){var e=ye;return!(62914560&(ye<<=1))&&(ye=4194304),e}function Ce(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Se(e,t){e.pendingLanes|=t,268435456!==t&&(e.suspendedLanes=0,e.pingedLanes=0,e.warmLanes=0)}function xe(e,t,n){e.pendingLanes|=t,e.suspendedLanes&=~t;var r=31-pe(t);e.entangledLanes|=t,e.entanglements[r]=1073741824|e.entanglements[r]|4194090&n}function Be(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-pe(n),a=1<<r;a&t|e[r]&t&&(e[r]|=t),n&=~a}}function Te(e){switch(e){case 2:e=1;break;case 8:e=4;break;case 32:e=16;break;case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:e=128;break;case 268435456:e=134217728;break;default:e=0}return e}function Pe(e){return 2<(e&=-e)?8<e?134217727&e?32:268435456:8:2}function Oe(){var e=L.p;return 0!==e?e:void 0===(e=window.event)?32:cd(e.type)}var Re=Math.random().toString(36).slice(2),Ne="__reactFiber$"+Re,_e="__reactProps$"+Re,ze="__reactContainer$"+Re,Le="__reactEvents$"+Re,De="__reactListeners$"+Re,je="__reactHandles$"+Re,Fe="__reactResources$"+Re,Ie="__reactMarker$"+Re;function Me(e){delete e[Ne],delete e[_e],delete e[Le],delete e[De],delete e[je]}function Ue(e){var t=e[Ne];if(t)return t;for(var n=e.parentNode;n;){if(t=n[ze]||n[Ne]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=Af(e);null!==e;){if(n=e[Ne])return n;e=Af(e)}return t}n=(e=n).parentNode}return null}function $e(e){if(e=e[Ne]||e[ze]){var t=e.tag;if(5===t||6===t||13===t||26===t||27===t||3===t)return e}return null}function We(e){var t=e.tag;if(5===t||26===t||27===t||6===t)return e.stateNode;throw Error(l(33))}function He(e){var t=e[Fe];return t||(t=e[Fe]={hoistableStyles:new Map,hoistableScripts:new Map}),t}function qe(e){e[Ie]=!0}var Ve=new Set,Ye={};function Ge(e,t){Ke(e,t),Ke(e+"Capture",t)}function Ke(e,t){for(Ye[e]=t,e=0;e<t.length;e++)Ve.add(t[e])}var Qe,Xe,Je=RegExp("^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"),Ze={},et={};function tt(e,t,n){if(a=t,Q.call(et,a)||!Q.call(Ze,a)&&(Je.test(a)?et[a]=!0:(Ze[a]=!0,0)))if(null===n)e.removeAttribute(t);else{switch(typeof n){case"undefined":case"function":case"symbol":return void e.removeAttribute(t);case"boolean":var r=t.toLowerCase().slice(0,5);if("data-"!==r&&"aria-"!==r)return void e.removeAttribute(t)}e.setAttribute(t,""+n)}var a}function nt(e,t,n){if(null===n)e.removeAttribute(t);else{switch(typeof n){case"undefined":case"function":case"symbol":case"boolean":return void e.removeAttribute(t)}e.setAttribute(t,""+n)}}function rt(e,t,n,r){if(null===r)e.removeAttribute(n);else{switch(typeof r){case"undefined":case"function":case"symbol":case"boolean":return void e.removeAttribute(n)}e.setAttributeNS(t,n,""+r)}}function at(e){if(void 0===Qe)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);Qe=t&&t[1]||"",Xe=-1<e.stack.indexOf("\n    at")?" (<anonymous>)":-1<e.stack.indexOf("@")?"@unknown:0:0":""}return"\n"+Qe+e+Xe}var ot=!1;function lt(e,t){if(!e||ot)return"";ot=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{var r={DetermineComponentFrameRoot:function(){try{if(t){var n=function(){throw Error()};if(Object.defineProperty(n.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(n,[])}catch(e){var r=e}Reflect.construct(e,[],n)}else{try{n.call()}catch(e){r=e}e.call(n.prototype)}}else{try{throw Error()}catch(e){r=e}(n=e())&&"function"==typeof n.catch&&n.catch(function(){})}}catch(e){if(e&&r&&"string"==typeof e.stack)return[e.stack,r.stack]}return[null,null]}};r.DetermineComponentFrameRoot.displayName="DetermineComponentFrameRoot";var a=Object.getOwnPropertyDescriptor(r.DetermineComponentFrameRoot,"name");a&&a.configurable&&Object.defineProperty(r.DetermineComponentFrameRoot,"name",{value:"DetermineComponentFrameRoot"});var o=r.DetermineComponentFrameRoot(),l=o[0],i=o[1];if(l&&i){var u=l.split("\n"),s=i.split("\n");for(a=r=0;r<u.length&&!u[r].includes("DetermineComponentFrameRoot");)r++;for(;a<s.length&&!s[a].includes("DetermineComponentFrameRoot");)a++;if(r===u.length||a===s.length)for(r=u.length-1,a=s.length-1;1<=r&&0<=a&&u[r]!==s[a];)a--;for(;1<=r&&0<=a;r--,a--)if(u[r]!==s[a]){if(1!==r||1!==a)do{if(r--,0>--a||u[r]!==s[a]){var c="\n"+u[r].replace(" at new "," at ");return e.displayName&&c.includes("<anonymous>")&&(c=c.replace("<anonymous>",e.displayName)),c}}while(1<=r&&0<=a);break}}}finally{ot=!1,Error.prepareStackTrace=n}return(n=e?e.displayName||e.name:"")?at(n):""}function it(e){switch(e.tag){case 26:case 27:case 5:return at(e.type);case 16:return at("Lazy");case 13:return at("Suspense");case 19:return at("SuspenseList");case 0:case 15:return lt(e.type,!1);case 11:return lt(e.type.render,!1);case 1:return lt(e.type,!0);case 31:return at("Activity");default:return""}}function ut(e){try{var t="";do{t+=it(e),e=e.return}while(e);return t}catch(e){return"\nError generating stack: "+e.message+"\n"+e.stack}}function st(e){switch(typeof e){case"bigint":case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function ct(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function ft(e){e._valueTracker||(e._valueTracker=function(e){var t=ct(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var a=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return a.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function dt(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=ct(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function pt(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}var mt=/[\n"\\]/g;function ht(e){return e.replace(mt,function(e){return"\\"+e.charCodeAt(0).toString(16)+" "})}function gt(e,t,n,r,a,o,l,i){e.name="",null!=l&&"function"!=typeof l&&"symbol"!=typeof l&&"boolean"!=typeof l?e.type=l:e.removeAttribute("type"),null!=t?"number"===l?(0===t&&""===e.value||e.value!=t)&&(e.value=""+st(t)):e.value!==""+st(t)&&(e.value=""+st(t)):"submit"!==l&&"reset"!==l||e.removeAttribute("value"),null!=t?bt(e,l,st(t)):null!=n?bt(e,l,st(n)):null!=r&&e.removeAttribute("value"),null==a&&null!=o&&(e.defaultChecked=!!o),null!=a&&(e.checked=a&&"function"!=typeof a&&"symbol"!=typeof a),null!=i&&"function"!=typeof i&&"symbol"!=typeof i&&"boolean"!=typeof i?e.name=""+st(i):e.removeAttribute("name")}function yt(e,t,n,r,a,o,l,i){if(null!=o&&"function"!=typeof o&&"symbol"!=typeof o&&"boolean"!=typeof o&&(e.type=o),null!=t||null!=n){if(("submit"===o||"reset"===o)&&null==t)return;n=null!=n?""+st(n):"",t=null!=t?""+st(t):n,i||t===e.value||(e.value=t),e.defaultValue=t}r="function"!=typeof(r=null!=r?r:a)&&"symbol"!=typeof r&&!!r,e.checked=i?e.checked:!!r,e.defaultChecked=!!r,null!=l&&"function"!=typeof l&&"symbol"!=typeof l&&"boolean"!=typeof l&&(e.name=l)}function bt(e,t,n){"number"===t&&pt(e.ownerDocument)===e||e.defaultValue===""+n||(e.defaultValue=""+n)}function vt(e,t,n,r){if(e=e.options,t){t={};for(var a=0;a<n.length;a++)t["$"+n[a]]=!0;for(n=0;n<e.length;n++)a=t.hasOwnProperty("$"+e[n].value),e[n].selected!==a&&(e[n].selected=a),a&&r&&(e[n].defaultSelected=!0)}else{for(n=""+st(n),t=null,a=0;a<e.length;a++){if(e[a].value===n)return e[a].selected=!0,void(r&&(e[a].defaultSelected=!0));null!==t||e[a].disabled||(t=e[a])}null!==t&&(t.selected=!0)}}function At(e,t,n){null==t||((t=""+st(t))!==e.value&&(e.value=t),null!=n)?e.defaultValue=null!=n?""+st(n):"":e.defaultValue!==t&&(e.defaultValue=t)}function Et(e,t,n,r){if(null==t){if(null!=r){if(null!=n)throw Error(l(92));if(_(r)){if(1<r.length)throw Error(l(93));r=r[0]}n=r}null==n&&(n=""),t=n}n=st(t),e.defaultValue=n,(r=e.textContent)===n&&""!==r&&null!==r&&(e.value=r)}function wt(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var kt=new Set("animationIterationCount aspectRatio borderImageOutset borderImageSlice borderImageWidth boxFlex boxFlexGroup boxOrdinalGroup columnCount columns flex flexGrow flexPositive flexShrink flexNegative flexOrder gridArea gridRow gridRowEnd gridRowSpan gridRowStart gridColumn gridColumnEnd gridColumnSpan gridColumnStart fontWeight lineClamp lineHeight opacity order orphans scale tabSize widows zIndex zoom fillOpacity floodOpacity stopOpacity strokeDasharray strokeDashoffset strokeMiterlimit strokeOpacity strokeWidth MozAnimationIterationCount MozBoxFlex MozBoxFlexGroup MozLineClamp msAnimationIterationCount msFlex msZoom msFlexGrow msFlexNegative msFlexOrder msFlexPositive msFlexShrink msGridColumn msGridColumnSpan msGridRow msGridRowSpan WebkitAnimationIterationCount WebkitBoxFlex WebKitBoxFlexGroup WebkitBoxOrdinalGroup WebkitColumnCount WebkitColumns WebkitFlex WebkitFlexGrow WebkitFlexPositive WebkitFlexShrink WebkitLineClamp".split(" "));function Ct(e,t,n){var r=0===t.indexOf("--");null==n||"boolean"==typeof n||""===n?r?e.setProperty(t,""):"float"===t?e.cssFloat="":e[t]="":r?e.setProperty(t,n):"number"!=typeof n||0===n||kt.has(t)?"float"===t?e.cssFloat=n:e[t]=(""+n).trim():e[t]=n+"px"}function St(e,t,n){if(null!=t&&"object"!=typeof t)throw Error(l(62));if(e=e.style,null!=n){for(var r in n)!n.hasOwnProperty(r)||null!=t&&t.hasOwnProperty(r)||(0===r.indexOf("--")?e.setProperty(r,""):"float"===r?e.cssFloat="":e[r]="");for(var a in t)r=t[a],t.hasOwnProperty(a)&&n[a]!==r&&Ct(e,a,r)}else for(var o in t)t.hasOwnProperty(o)&&Ct(e,o,t[o])}function xt(e){if(-1===e.indexOf("-"))return!1;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var Bt=new Map([["acceptCharset","accept-charset"],["htmlFor","for"],["httpEquiv","http-equiv"],["crossOrigin","crossorigin"],["accentHeight","accent-height"],["alignmentBaseline","alignment-baseline"],["arabicForm","arabic-form"],["baselineShift","baseline-shift"],["capHeight","cap-height"],["clipPath","clip-path"],["clipRule","clip-rule"],["colorInterpolation","color-interpolation"],["colorInterpolationFilters","color-interpolation-filters"],["colorProfile","color-profile"],["colorRendering","color-rendering"],["dominantBaseline","dominant-baseline"],["enableBackground","enable-background"],["fillOpacity","fill-opacity"],["fillRule","fill-rule"],["floodColor","flood-color"],["floodOpacity","flood-opacity"],["fontFamily","font-family"],["fontSize","font-size"],["fontSizeAdjust","font-size-adjust"],["fontStretch","font-stretch"],["fontStyle","font-style"],["fontVariant","font-variant"],["fontWeight","font-weight"],["glyphName","glyph-name"],["glyphOrientationHorizontal","glyph-orientation-horizontal"],["glyphOrientationVertical","glyph-orientation-vertical"],["horizAdvX","horiz-adv-x"],["horizOriginX","horiz-origin-x"],["imageRendering","image-rendering"],["letterSpacing","letter-spacing"],["lightingColor","lighting-color"],["markerEnd","marker-end"],["markerMid","marker-mid"],["markerStart","marker-start"],["overlinePosition","overline-position"],["overlineThickness","overline-thickness"],["paintOrder","paint-order"],["panose-1","panose-1"],["pointerEvents","pointer-events"],["renderingIntent","rendering-intent"],["shapeRendering","shape-rendering"],["stopColor","stop-color"],["stopOpacity","stop-opacity"],["strikethroughPosition","strikethrough-position"],["strikethroughThickness","strikethrough-thickness"],["strokeDasharray","stroke-dasharray"],["strokeDashoffset","stroke-dashoffset"],["strokeLinecap","stroke-linecap"],["strokeLinejoin","stroke-linejoin"],["strokeMiterlimit","stroke-miterlimit"],["strokeOpacity","stroke-opacity"],["strokeWidth","stroke-width"],["textAnchor","text-anchor"],["textDecoration","text-decoration"],["textRendering","text-rendering"],["transformOrigin","transform-origin"],["underlinePosition","underline-position"],["underlineThickness","underline-thickness"],["unicodeBidi","unicode-bidi"],["unicodeRange","unicode-range"],["unitsPerEm","units-per-em"],["vAlphabetic","v-alphabetic"],["vHanging","v-hanging"],["vIdeographic","v-ideographic"],["vMathematical","v-mathematical"],["vectorEffect","vector-effect"],["vertAdvY","vert-adv-y"],["vertOriginX","vert-origin-x"],["vertOriginY","vert-origin-y"],["wordSpacing","word-spacing"],["writingMode","writing-mode"],["xmlnsXlink","xmlns:xlink"],["xHeight","x-height"]]),Tt=/^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*:/i;function Pt(e){return Tt.test(""+e)?"javascript:throw new Error('React has blocked a javascript: URL as a security precaution.')":e}var Ot=null;function Rt(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Nt=null,_t=null;function zt(e){var t=$e(e);if(t&&(e=t.stateNode)){var n=e[_e]||null;e:switch(e=t.stateNode,t.type){case"input":if(gt(e,n.value,n.defaultValue,n.defaultValue,n.checked,n.defaultChecked,n.type,n.name),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll('input[name="'+ht(""+t)+'"][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var a=r[_e]||null;if(!a)throw Error(l(90));gt(r,a.value,a.defaultValue,a.defaultValue,a.checked,a.defaultChecked,a.type,a.name)}}for(t=0;t<n.length;t++)(r=n[t]).form===e.form&&dt(r)}break e;case"textarea":At(e,n.value,n.defaultValue);break e;case"select":null!=(t=n.value)&&vt(e,!!n.multiple,t,!1)}}}var Lt=!1;function Dt(e,t,n){if(Lt)return e(t,n);Lt=!0;try{return e(t)}finally{if(Lt=!1,(null!==Nt||null!==_t)&&(Us(),Nt&&(t=Nt,e=_t,_t=Nt=null,zt(t),e)))for(t=0;t<e.length;t++)zt(e[t])}}function jt(e,t){var n=e.stateNode;if(null===n)return null;var r=n[_e]||null;if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(l(231,t,typeof n));return n}var Ft=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),It=!1;if(Ft)try{var Mt={};Object.defineProperty(Mt,"passive",{get:function(){It=!0}}),window.addEventListener("test",Mt,Mt),window.removeEventListener("test",Mt,Mt)}catch(e){It=!1}var Ut=null,$t=null,Wt=null;function Ht(){if(Wt)return Wt;var e,t,n=$t,r=n.length,a="value"in Ut?Ut.value:Ut.textContent,o=a.length;for(e=0;e<r&&n[e]===a[e];e++);var l=r-e;for(t=1;t<=l&&n[r-t]===a[o-t];t++);return Wt=a.slice(e,1<t?1-t:void 0)}function qt(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function Vt(){return!0}function Yt(){return!1}function Gt(e){function t(t,n,r,a,o){for(var l in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=a,this.target=o,this.currentTarget=null,e)e.hasOwnProperty(l)&&(t=e[l],this[l]=t?t(a):a[l]);return this.isDefaultPrevented=(null!=a.defaultPrevented?a.defaultPrevented:!1===a.returnValue)?Vt:Yt,this.isPropagationStopped=Yt,this}return d(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=Vt)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=Vt)},persist:function(){},isPersistent:Vt}),t}var Kt,Qt,Xt,Jt={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},Zt=Gt(Jt),en=d({},Jt,{view:0,detail:0}),tn=Gt(en),nn=d({},en,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:mn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==Xt&&(Xt&&"mousemove"===e.type?(Kt=e.screenX-Xt.screenX,Qt=e.screenY-Xt.screenY):Qt=Kt=0,Xt=e),Kt)},movementY:function(e){return"movementY"in e?e.movementY:Qt}}),rn=Gt(nn),an=Gt(d({},nn,{dataTransfer:0})),on=Gt(d({},en,{relatedTarget:0})),ln=Gt(d({},Jt,{animationName:0,elapsedTime:0,pseudoElement:0})),un=Gt(d({},Jt,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),sn=Gt(d({},Jt,{data:0})),cn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},fn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},dn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function pn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=dn[e])&&!!t[e]}function mn(){return pn}var hn=Gt(d({},en,{key:function(e){if(e.key){var t=cn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=qt(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?fn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:mn,charCode:function(e){return"keypress"===e.type?qt(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?qt(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),gn=Gt(d({},nn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),yn=Gt(d({},en,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:mn})),bn=Gt(d({},Jt,{propertyName:0,elapsedTime:0,pseudoElement:0})),vn=Gt(d({},nn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),An=Gt(d({},Jt,{newState:0,oldState:0})),En=[9,13,27,32],wn=Ft&&"CompositionEvent"in window,kn=null;Ft&&"documentMode"in document&&(kn=document.documentMode);var Cn=Ft&&"TextEvent"in window&&!kn,Sn=Ft&&(!wn||kn&&8<kn&&11>=kn),xn=String.fromCharCode(32),Bn=!1;function Tn(e,t){switch(e){case"keyup":return-1!==En.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Pn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var On=!1,Rn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Nn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Rn[e.type]:"textarea"===t}function _n(e,t,n,r){Nt?_t?_t.push(r):_t=[r]:Nt=r,0<(t=Hc(t,"onChange")).length&&(n=new Zt("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var zn=null,Ln=null;function Dn(e){Dc(e,0)}function jn(e){if(dt(We(e)))return e}function Fn(e,t){if("change"===e)return t}var In=!1;if(Ft){var Mn;if(Ft){var Un="oninput"in document;if(!Un){var $n=document.createElement("div");$n.setAttribute("oninput","return;"),Un="function"==typeof $n.oninput}Mn=Un}else Mn=!1;In=Mn&&(!document.documentMode||9<document.documentMode)}function Wn(){zn&&(zn.detachEvent("onpropertychange",Hn),Ln=zn=null)}function Hn(e){if("value"===e.propertyName&&jn(Ln)){var t=[];_n(t,Ln,e,Rt(e)),Dt(Dn,t)}}function qn(e,t,n){"focusin"===e?(Wn(),Ln=n,(zn=t).attachEvent("onpropertychange",Hn)):"focusout"===e&&Wn()}function Vn(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return jn(Ln)}function Yn(e,t){if("click"===e)return jn(t)}function Gn(e,t){if("input"===e||"change"===e)return jn(t)}var Kn="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function Qn(e,t){if(Kn(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var a=n[r];if(!Q.call(t,a)||!Kn(e[a],t[a]))return!1}return!0}function Xn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Jn(e,t){var n,r=Xn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Xn(r)}}function Zn(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?Zn(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function er(e){for(var t=pt((e=null!=e&&null!=e.ownerDocument&&null!=e.ownerDocument.defaultView?e.ownerDocument.defaultView:window).document);t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=pt((e=t.contentWindow).document)}return t}function tr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var nr=Ft&&"documentMode"in document&&11>=document.documentMode,rr=null,ar=null,or=null,lr=!1;function ir(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;lr||null==rr||rr!==pt(r)||(r="selectionStart"in(r=rr)&&tr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},or&&Qn(or,r)||(or=r,0<(r=Hc(ar,"onSelect")).length&&(t=new Zt("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=rr)))}function ur(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var sr={animationend:ur("Animation","AnimationEnd"),animationiteration:ur("Animation","AnimationIteration"),animationstart:ur("Animation","AnimationStart"),transitionrun:ur("Transition","TransitionRun"),transitionstart:ur("Transition","TransitionStart"),transitioncancel:ur("Transition","TransitionCancel"),transitionend:ur("Transition","TransitionEnd")},cr={},fr={};function dr(e){if(cr[e])return cr[e];if(!sr[e])return e;var t,n=sr[e];for(t in n)if(n.hasOwnProperty(t)&&t in fr)return cr[e]=n[t];return e}Ft&&(fr=document.createElement("div").style,"AnimationEvent"in window||(delete sr.animationend.animation,delete sr.animationiteration.animation,delete sr.animationstart.animation),"TransitionEvent"in window||delete sr.transitionend.transition);var pr=dr("animationend"),mr=dr("animationiteration"),hr=dr("animationstart"),gr=dr("transitionrun"),yr=dr("transitionstart"),br=dr("transitioncancel"),vr=dr("transitionend"),Ar=new Map,Er="abort auxClick beforeToggle cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function wr(e,t){Ar.set(e,t),Ge(t,[e])}Er.push("scrollEnd");var kr=new WeakMap;function Cr(e,t){if("object"==typeof e&&null!==e){var n=kr.get(e);return void 0!==n?n:(t={value:e,source:t,stack:ut(t)},kr.set(e,t),t)}return{value:e,source:t,stack:ut(t)}}var Sr=[],xr=0,Br=0;function Tr(){for(var e=xr,t=Br=xr=0;t<e;){var n=Sr[t];Sr[t++]=null;var r=Sr[t];Sr[t++]=null;var a=Sr[t];Sr[t++]=null;var o=Sr[t];if(Sr[t++]=null,null!==r&&null!==a){var l=r.pending;null===l?a.next=a:(a.next=l.next,l.next=a),r.pending=a}0!==o&&Nr(n,a,o)}}function Pr(e,t,n,r){Sr[xr++]=e,Sr[xr++]=t,Sr[xr++]=n,Sr[xr++]=r,Br|=r,e.lanes|=r,null!==(e=e.alternate)&&(e.lanes|=r)}function Or(e,t,n,r){return Pr(e,t,n,r),_r(e)}function Rr(e,t){return Pr(e,null,null,t),_r(e)}function Nr(e,t,n){e.lanes|=n;var r=e.alternate;null!==r&&(r.lanes|=n);for(var a=!1,o=e.return;null!==o;)o.childLanes|=n,null!==(r=o.alternate)&&(r.childLanes|=n),22===o.tag&&(null===(e=o.stateNode)||1&e._visibility||(a=!0)),e=o,o=o.return;return 3===e.tag?(o=e.stateNode,a&&null!==t&&(a=31-pe(n),null===(r=(e=o.hiddenUpdates)[a])?e[a]=[t]:r.push(t),t.lane=536870912|n),o):null}function _r(e){if(50<Ns)throw Ns=0,_s=null,Error(l(185));for(var t=e.return;null!==t;)t=(e=t).return;return 3===e.tag?e.stateNode:null}var zr={};function Lr(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.refCleanup=this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Dr(e,t,n,r){return new Lr(e,t,n,r)}function jr(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Fr(e,t){var n=e.alternate;return null===n?((n=Dr(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=65011712&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n.refCleanup=e.refCleanup,n}function Ir(e,t){e.flags&=65011714;var n=e.alternate;return null===n?(e.childLanes=0,e.lanes=t,e.child=null,e.subtreeFlags=0,e.memoizedProps=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.stateNode=null):(e.childLanes=n.childLanes,e.lanes=n.lanes,e.child=n.child,e.subtreeFlags=0,e.deletions=null,e.memoizedProps=n.memoizedProps,e.memoizedState=n.memoizedState,e.updateQueue=n.updateQueue,e.type=n.type,t=n.dependencies,e.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext}),e}function Mr(e,t,n,r,a,o){var i=0;if(r=e,"function"==typeof e)jr(e)&&(i=1);else if("string"==typeof e)i=function(e,t,n){if(1===n||null!=t.itemProp)return!1;switch(e){case"meta":case"title":return!0;case"style":if("string"!=typeof t.precedence||"string"!=typeof t.href||""===t.href)break;return!0;case"link":if("string"!=typeof t.rel||"string"!=typeof t.href||""===t.href||t.onLoad||t.onError)break;return"stylesheet"!==t.rel||(e=t.disabled,"string"==typeof t.precedence&&null==e);case"script":if(t.async&&"function"!=typeof t.async&&"symbol"!=typeof t.async&&!t.onLoad&&!t.onError&&t.src&&"string"==typeof t.src)return!0}return!1}(e,n,$.current)?26:"html"===e||"head"===e||"body"===e?27:5;else e:switch(e){case B:return(e=Dr(31,n,t,a)).elementType=B,e.lanes=o,e;case g:return Ur(n.children,a,o,t);case y:i=8,a|=24;break;case b:return(e=Dr(12,n,t,2|a)).elementType=b,e.lanes=o,e;case k:return(e=Dr(13,n,t,a)).elementType=k,e.lanes=o,e;case C:return(e=Dr(19,n,t,a)).elementType=C,e.lanes=o,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case v:case E:i=10;break e;case A:i=9;break e;case w:i=11;break e;case S:i=14;break e;case x:i=16,r=null;break e}i=29,n=Error(l(130,null===e?"null":typeof e,"")),r=null}return(t=Dr(i,n,t,a)).elementType=e,t.type=r,t.lanes=o,t}function Ur(e,t,n,r){return(e=Dr(7,e,r,t)).lanes=n,e}function $r(e,t,n){return(e=Dr(6,e,null,t)).lanes=n,e}function Wr(e,t,n){return(t=Dr(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}var Hr=[],qr=0,Vr=null,Yr=0,Gr=[],Kr=0,Qr=null,Xr=1,Jr="";function Zr(e,t){Hr[qr++]=Yr,Hr[qr++]=Vr,Vr=e,Yr=t}function ea(e,t,n){Gr[Kr++]=Xr,Gr[Kr++]=Jr,Gr[Kr++]=Qr,Qr=e;var r=Xr;e=Jr;var a=32-pe(r)-1;r&=~(1<<a),n+=1;var o=32-pe(t)+a;if(30<o){var l=a-a%5;o=(r&(1<<l)-1).toString(32),r>>=l,a-=l,Xr=1<<32-pe(t)+a|n<<a|r,Jr=o+e}else Xr=1<<o|n<<a|r,Jr=e}function ta(e){null!==e.return&&(Zr(e,1),ea(e,1,0))}function na(e){for(;e===Vr;)Vr=Hr[--qr],Hr[qr]=null,Yr=Hr[--qr],Hr[qr]=null;for(;e===Qr;)Qr=Gr[--Kr],Gr[Kr]=null,Jr=Gr[--Kr],Gr[Kr]=null,Xr=Gr[--Kr],Gr[Kr]=null}var ra=null,aa=null,oa=!1,la=null,ia=!1,ua=Error(l(519));function sa(e){throw ha(Cr(Error(l(418,"")),e)),ua}function ca(e){var t=e.stateNode,n=e.type,r=e.memoizedProps;switch(t[Ne]=e,t[_e]=r,n){case"dialog":jc("cancel",t),jc("close",t);break;case"iframe":case"object":case"embed":jc("load",t);break;case"video":case"audio":for(n=0;n<zc.length;n++)jc(zc[n],t);break;case"source":jc("error",t);break;case"img":case"image":case"link":jc("error",t),jc("load",t);break;case"details":jc("toggle",t);break;case"input":jc("invalid",t),yt(t,r.value,r.defaultValue,r.checked,r.defaultChecked,r.type,r.name,!0),ft(t);break;case"select":jc("invalid",t);break;case"textarea":jc("invalid",t),Et(t,r.value,r.defaultValue,r.children),ft(t)}"string"!=typeof(n=r.children)&&"number"!=typeof n&&"bigint"!=typeof n||t.textContent===""+n||!0===r.suppressHydrationWarning||Qc(t.textContent,n)?(null!=r.popover&&(jc("beforetoggle",t),jc("toggle",t)),null!=r.onScroll&&jc("scroll",t),null!=r.onScrollEnd&&jc("scrollend",t),null!=r.onClick&&(t.onclick=Xc),t=!0):t=!1,t||sa(e)}function fa(e){for(ra=e.return;ra;)switch(ra.tag){case 5:case 13:return void(ia=!1);case 27:case 3:return void(ia=!0);default:ra=ra.return}}function da(e){if(e!==ra)return!1;if(!oa)return fa(e),oa=!0,!1;var t,n=e.tag;if((t=3!==n&&27!==n)&&((t=5===n)&&(t=!("form"!==(t=e.type)&&"button"!==t)||lf(e.type,e.memoizedProps)),t=!t),t&&aa&&sa(e),fa(e),13===n){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(l(317));e:{for(e=e.nextSibling,n=0;e;){if(8===e.nodeType)if("/$"===(t=e.data)){if(0===n){aa=bf(e.nextSibling);break e}n--}else"$"!==t&&"$!"!==t&&"$?"!==t||n++;e=e.nextSibling}aa=null}}else 27===n?(n=aa,mf(e.type)?(e=vf,vf=null,aa=e):aa=n):aa=ra?bf(e.stateNode.nextSibling):null;return!0}function pa(){aa=ra=null,oa=!1}function ma(){var e=la;return null!==e&&(null===vs?vs=e:vs.push.apply(vs,e),la=null),e}function ha(e){null===la?la=[e]:la.push(e)}var ga=I(null),ya=null,ba=null;function va(e,t,n){U(ga,t._currentValue),t._currentValue=n}function Aa(e){e._currentValue=ga.current,M(ga)}function Ea(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function wa(e,t,n,r){var a=e.child;for(null!==a&&(a.return=e);null!==a;){var o=a.dependencies;if(null!==o){var i=a.child;o=o.firstContext;e:for(;null!==o;){var u=o;o=a;for(var s=0;s<t.length;s++)if(u.context===t[s]){o.lanes|=n,null!==(u=o.alternate)&&(u.lanes|=n),Ea(o.return,n,e),r||(i=null);break e}o=u.next}}else if(18===a.tag){if(null===(i=a.return))throw Error(l(341));i.lanes|=n,null!==(o=i.alternate)&&(o.lanes|=n),Ea(i,n,e),i=null}else i=a.child;if(null!==i)i.return=a;else for(i=a;null!==i;){if(i===e){i=null;break}if(null!==(a=i.sibling)){a.return=i.return,i=a;break}i=i.return}a=i}}function ka(e,t,n,r){e=null;for(var a=t,o=!1;null!==a;){if(!o)if(524288&a.flags)o=!0;else if(262144&a.flags)break;if(10===a.tag){var i=a.alternate;if(null===i)throw Error(l(387));if(null!==(i=i.memoizedProps)){var u=a.type;Kn(a.pendingProps.value,i.value)||(null!==e?e.push(u):e=[u])}}else if(a===q.current){if(null===(i=a.alternate))throw Error(l(387));i.memoizedState.memoizedState!==a.memoizedState.memoizedState&&(null!==e?e.push(Kf):e=[Kf])}a=a.return}null!==e&&wa(t,e,n,r),t.flags|=262144}function Ca(e){for(e=e.firstContext;null!==e;){if(!Kn(e.context._currentValue,e.memoizedValue))return!0;e=e.next}return!1}function Sa(e){ya=e,ba=null,null!==(e=e.dependencies)&&(e.firstContext=null)}function xa(e){return Ta(ya,e)}function Ba(e,t){return null===ya&&Sa(e),Ta(e,t)}function Ta(e,t){var n=t._currentValue;if(t={context:t,memoizedValue:n,next:null},null===ba){if(null===e)throw Error(l(308));ba=t,e.dependencies={lanes:0,firstContext:t},e.flags|=524288}else ba=ba.next=t;return n}var Pa="undefined"!=typeof AbortController?AbortController:function(){var e=[],t=this.signal={aborted:!1,addEventListener:function(t,n){e.push(n)}};this.abort=function(){t.aborted=!0,e.forEach(function(e){return e()})}},Oa=r.unstable_scheduleCallback,Ra=r.unstable_NormalPriority,Na={$$typeof:E,Consumer:null,Provider:null,_currentValue:null,_currentValue2:null,_threadCount:0};function _a(){return{controller:new Pa,data:new Map,refCount:0}}function za(e){e.refCount--,0===e.refCount&&Oa(Ra,function(){e.controller.abort()})}var La=null,Da=0,ja=0,Fa=null;function Ia(){if(0===--Da&&null!==La){null!==Fa&&(Fa.status="fulfilled");var e=La;La=null,ja=0,Fa=null;for(var t=0;t<e.length;t++)(0,e[t])()}}var Ma=z.S;z.S=function(e,t){"object"==typeof t&&null!==t&&"function"==typeof t.then&&function(e,t){if(null===La){var n=La=[];Da=0,ja=Pc(),Fa={status:"pending",value:void 0,then:function(e){n.push(e)}}}Da++,t.then(Ia,Ia)}(0,t),null!==Ma&&Ma(e,t)};var Ua=I(null);function $a(){var e=Ua.current;return null!==e?e:rs.pooledCache}function Wa(e,t){U(Ua,null===t?Ua.current:t.pool)}function Ha(){var e=$a();return null===e?null:{parent:Na._currentValue,pool:e}}var qa=Error(l(460)),Va=Error(l(474)),Ya=Error(l(542)),Ga={then:function(){}};function Ka(e){return"fulfilled"===(e=e.status)||"rejected"===e}function Qa(){}function Xa(e,t,n){switch(void 0===(n=e[n])?e.push(t):n!==t&&(t.then(Qa,Qa),t=n),t.status){case"fulfilled":return t.value;case"rejected":throw eo(e=t.reason),e;default:if("string"==typeof t.status)t.then(Qa,Qa);else{if(null!==(e=rs)&&100<e.shellSuspendCounter)throw Error(l(482));(e=t).status="pending",e.then(function(e){if("pending"===t.status){var n=t;n.status="fulfilled",n.value=e}},function(e){if("pending"===t.status){var n=t;n.status="rejected",n.reason=e}})}switch(t.status){case"fulfilled":return t.value;case"rejected":throw eo(e=t.reason),e}throw Ja=t,qa}}var Ja=null;function Za(){if(null===Ja)throw Error(l(459));var e=Ja;return Ja=null,e}function eo(e){if(e===qa||e===Ya)throw Error(l(483))}var to=!1;function no(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,lanes:0,hiddenCallbacks:null},callbacks:null}}function ro(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,callbacks:null})}function ao(e){return{lane:e,tag:0,payload:null,callback:null,next:null}}function oo(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,2&ns){var a=r.pending;return null===a?t.next=t:(t.next=a.next,a.next=t),r.pending=t,t=_r(e),Nr(e,null,n),t}return Pr(e,r,t,n),_r(e)}function lo(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,4194048&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,Be(e,n)}}function io(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var a=null,o=null;if(null!==(n=n.firstBaseUpdate)){do{var l={lane:n.lane,tag:n.tag,payload:n.payload,callback:null,next:null};null===o?a=o=l:o=o.next=l,n=n.next}while(null!==n);null===o?a=o=t:o=o.next=t}else a=o=t;return n={baseState:r.baseState,firstBaseUpdate:a,lastBaseUpdate:o,shared:r.shared,callbacks:r.callbacks},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}var uo=!1;function so(){if(uo&&null!==Fa)throw Fa}function co(e,t,n,r){uo=!1;var a=e.updateQueue;to=!1;var o=a.firstBaseUpdate,l=a.lastBaseUpdate,i=a.shared.pending;if(null!==i){a.shared.pending=null;var u=i,s=u.next;u.next=null,null===l?o=s:l.next=s,l=u;var c=e.alternate;null!==c&&(i=(c=c.updateQueue).lastBaseUpdate)!==l&&(null===i?c.firstBaseUpdate=s:i.next=s,c.lastBaseUpdate=u)}if(null!==o){var f=a.baseState;for(l=0,c=s=u=null,i=o;;){var p=-536870913&i.lane,m=p!==i.lane;if(m?(os&p)===p:(r&p)===p){0!==p&&p===ja&&(uo=!0),null!==c&&(c=c.next={lane:0,tag:i.tag,payload:i.payload,callback:null,next:null});e:{var h=e,g=i;p=t;var y=n;switch(g.tag){case 1:if("function"==typeof(h=g.payload)){f=h.call(y,f,p);break e}f=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(p="function"==typeof(h=g.payload)?h.call(y,f,p):h))break e;f=d({},f,p);break e;case 2:to=!0}}null!==(p=i.callback)&&(e.flags|=64,m&&(e.flags|=8192),null===(m=a.callbacks)?a.callbacks=[p]:m.push(p))}else m={lane:p,tag:i.tag,payload:i.payload,callback:i.callback,next:null},null===c?(s=c=m,u=f):c=c.next=m,l|=p;if(null===(i=i.next)){if(null===(i=a.shared.pending))break;i=(m=i).next,m.next=null,a.lastBaseUpdate=m,a.shared.pending=null}}null===c&&(u=f),a.baseState=u,a.firstBaseUpdate=s,a.lastBaseUpdate=c,null===o&&(a.shared.lanes=0),ps|=l,e.lanes=l,e.memoizedState=f}}function fo(e,t){if("function"!=typeof e)throw Error(l(191,e));e.call(t)}function po(e,t){var n=e.callbacks;if(null!==n)for(e.callbacks=null,e=0;e<n.length;e++)fo(n[e],t)}var mo=I(null),ho=I(0);function go(e,t){U(ho,e=fs),U(mo,t),fs=e|t.baseLanes}function yo(){U(ho,fs),U(mo,mo.current)}function bo(){fs=ho.current,M(mo),M(ho)}var vo=0,Ao=null,Eo=null,wo=null,ko=!1,Co=!1,So=!1,xo=0,Bo=0,To=null,Po=0;function Oo(){throw Error(l(321))}function Ro(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Kn(e[n],t[n]))return!1;return!0}function No(e,t,n,r,a,o){return vo=o,Ao=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,z.H=null===e||null===e.memoizedState?Vl:Yl,So=!1,o=n(r,a),So=!1,Co&&(o=zo(t,n,r,a)),_o(e),o}function _o(e){z.H=ql;var t=null!==Eo&&null!==Eo.next;if(vo=0,wo=Eo=Ao=null,ko=!1,Bo=0,To=null,t)throw Error(l(300));null===e||Bi||null!==(e=e.dependencies)&&Ca(e)&&(Bi=!0)}function zo(e,t,n,r){Ao=e;var a=0;do{if(Co&&(To=null),Bo=0,Co=!1,25<=a)throw Error(l(301));if(a+=1,wo=Eo=null,null!=e.updateQueue){var o=e.updateQueue;o.lastEffect=null,o.events=null,o.stores=null,null!=o.memoCache&&(o.memoCache.index=0)}z.H=Gl,o=t(n,r)}while(Co);return o}function Lo(){var e=z.H,t=e.useState()[0];return t="function"==typeof t.then?Uo(t):t,e=e.useState()[0],(null!==Eo?Eo.memoizedState:null)!==e&&(Ao.flags|=1024),t}function Do(){var e=0!==xo;return xo=0,e}function jo(e,t,n){t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~n}function Fo(e){if(ko){for(e=e.memoizedState;null!==e;){var t=e.queue;null!==t&&(t.pending=null),e=e.next}ko=!1}vo=0,wo=Eo=Ao=null,Co=!1,Bo=xo=0,To=null}function Io(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===wo?Ao.memoizedState=wo=e:wo=wo.next=e,wo}function Mo(){if(null===Eo){var e=Ao.alternate;e=null!==e?e.memoizedState:null}else e=Eo.next;var t=null===wo?Ao.memoizedState:wo.next;if(null!==t)wo=t,Eo=e;else{if(null===e){if(null===Ao.alternate)throw Error(l(467));throw Error(l(310))}e={memoizedState:(Eo=e).memoizedState,baseState:Eo.baseState,baseQueue:Eo.baseQueue,queue:Eo.queue,next:null},null===wo?Ao.memoizedState=wo=e:wo=wo.next=e}return wo}function Uo(e){var t=Bo;return Bo+=1,null===To&&(To=[]),e=Xa(To,e,t),t=Ao,null===(null===wo?t.memoizedState:wo.next)&&(t=t.alternate,z.H=null===t||null===t.memoizedState?Vl:Yl),e}function $o(e){if(null!==e&&"object"==typeof e){if("function"==typeof e.then)return Uo(e);if(e.$$typeof===E)return xa(e)}throw Error(l(438,String(e)))}function Wo(e){var t=null,n=Ao.updateQueue;if(null!==n&&(t=n.memoCache),null==t){var r=Ao.alternate;null!==r&&null!==(r=r.updateQueue)&&null!=(r=r.memoCache)&&(t={data:r.data.map(function(e){return e.slice()}),index:0})}if(null==t&&(t={data:[],index:0}),null===n&&(n={lastEffect:null,events:null,stores:null,memoCache:null},Ao.updateQueue=n),n.memoCache=t,void 0===(n=t.data[t.index]))for(n=t.data[t.index]=Array(e),r=0;r<e;r++)n[r]=T;return t.index++,n}function Ho(e,t){return"function"==typeof t?t(e):t}function qo(e){return Vo(Mo(),Eo,e)}function Vo(e,t,n){var r=e.queue;if(null===r)throw Error(l(311));r.lastRenderedReducer=n;var a=e.baseQueue,o=r.pending;if(null!==o){if(null!==a){var i=a.next;a.next=o.next,o.next=i}t.baseQueue=a=o,r.pending=null}if(o=e.baseState,null===a)e.memoizedState=o;else{var u=i=null,s=null,c=t=a.next,f=!1;do{var d=-536870913&c.lane;if(d!==c.lane?(os&d)===d:(vo&d)===d){var p=c.revertLane;if(0===p)null!==s&&(s=s.next={lane:0,revertLane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),d===ja&&(f=!0);else{if((vo&p)===p){c=c.next,p===ja&&(f=!0);continue}d={lane:0,revertLane:c.revertLane,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null},null===s?(u=s=d,i=o):s=s.next=d,Ao.lanes|=p,ps|=p}d=c.action,So&&n(o,d),o=c.hasEagerState?c.eagerState:n(o,d)}else p={lane:d,revertLane:c.revertLane,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null},null===s?(u=s=p,i=o):s=s.next=p,Ao.lanes|=d,ps|=d;c=c.next}while(null!==c&&c!==t);if(null===s?i=o:s.next=u,!Kn(o,e.memoizedState)&&(Bi=!0,f&&null!==(n=Fa)))throw n;e.memoizedState=o,e.baseState=i,e.baseQueue=s,r.lastRenderedState=o}return null===a&&(r.lanes=0),[e.memoizedState,r.dispatch]}function Yo(e){var t=Mo(),n=t.queue;if(null===n)throw Error(l(311));n.lastRenderedReducer=e;var r=n.dispatch,a=n.pending,o=t.memoizedState;if(null!==a){n.pending=null;var i=a=a.next;do{o=e(o,i.action),i=i.next}while(i!==a);Kn(o,t.memoizedState)||(Bi=!0),t.memoizedState=o,null===t.baseQueue&&(t.baseState=o),n.lastRenderedState=o}return[o,r]}function Go(e,t,n){var r=Ao,a=Mo(),o=oa;if(o){if(void 0===n)throw Error(l(407));n=n()}else n=t();var i=!Kn((Eo||a).memoizedState,n);if(i&&(a.memoizedState=n,Bi=!0),a=a.queue,yl(2048,8,Xo.bind(null,r,a,e),[e]),a.getSnapshot!==t||i||null!==wo&&1&wo.memoizedState.tag){if(r.flags|=2048,ml(9,{destroy:void 0,resource:void 0},Qo.bind(null,r,a,n,t),null),null===rs)throw Error(l(349));o||124&vo||Ko(r,t,n)}return n}function Ko(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=Ao.updateQueue)?(t={lastEffect:null,events:null,stores:null,memoCache:null},Ao.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Qo(e,t,n,r){t.value=n,t.getSnapshot=r,Jo(t)&&Zo(e)}function Xo(e,t,n){return n(function(){Jo(t)&&Zo(e)})}function Jo(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!Kn(e,n)}catch(e){return!0}}function Zo(e){var t=Rr(e,2);null!==t&&Ds(t,0,2)}function el(e){var t=Io();if("function"==typeof e){var n=e;if(e=n(),So){de(!0);try{n()}finally{de(!1)}}}return t.memoizedState=t.baseState=e,t.queue={pending:null,lanes:0,dispatch:null,lastRenderedReducer:Ho,lastRenderedState:e},t}function tl(e,t,n,r){return e.baseState=n,Vo(e,Eo,"function"==typeof r?r:Ho)}function nl(e,t,n,r,a){if($l(e))throw Error(l(485));if(null!==(e=t.action)){var o={payload:a,action:e,next:null,isTransition:!0,status:"pending",value:null,reason:null,listeners:[],then:function(e){o.listeners.push(e)}};null!==z.T?n(!0):o.isTransition=!1,r(o),null===(n=t.pending)?(o.next=t.pending=o,rl(t,o)):(o.next=n.next,t.pending=n.next=o)}}function rl(e,t){var n=t.action,r=t.payload,a=e.state;if(t.isTransition){var o=z.T,l={};z.T=l;try{var i=n(a,r),u=z.S;null!==u&&u(l,i),al(e,t,i)}catch(n){ll(e,t,n)}finally{z.T=o}}else try{al(e,t,o=n(a,r))}catch(n){ll(e,t,n)}}function al(e,t,n){null!==n&&"object"==typeof n&&"function"==typeof n.then?n.then(function(n){ol(e,t,n)},function(n){return ll(e,t,n)}):ol(e,t,n)}function ol(e,t,n){t.status="fulfilled",t.value=n,il(t),e.state=n,null!==(t=e.pending)&&((n=t.next)===t?e.pending=null:(n=n.next,t.next=n,rl(e,n)))}function ll(e,t,n){var r=e.pending;if(e.pending=null,null!==r){r=r.next;do{t.status="rejected",t.reason=n,il(t),t=t.next}while(t!==r)}e.action=null}function il(e){e=e.listeners;for(var t=0;t<e.length;t++)(0,e[t])()}function ul(e,t){return t}function sl(e,t){if(oa){var n=rs.formState;if(null!==n){e:{var r=Ao;if(oa){if(aa){t:{for(var a=aa,o=ia;8!==a.nodeType;){if(!o){a=null;break t}if(null===(a=bf(a.nextSibling))){a=null;break t}}a="F!"===(o=a.data)||"F"===o?a:null}if(a){aa=bf(a.nextSibling),r="F!"===a.data;break e}}sa(r)}r=!1}r&&(t=n[0])}}return(n=Io()).memoizedState=n.baseState=t,r={pending:null,lanes:0,dispatch:null,lastRenderedReducer:ul,lastRenderedState:t},n.queue=r,n=Il.bind(null,Ao,r),r.dispatch=n,r=el(!1),o=Ul.bind(null,Ao,!1,r.queue),a={state:t,dispatch:null,action:e,pending:null},(r=Io()).queue=a,n=nl.bind(null,Ao,a,o,n),a.dispatch=n,r.memoizedState=e,[t,n,!1]}function cl(e){return fl(Mo(),Eo,e)}function fl(e,t,n){if(t=Vo(e,t,ul)[0],e=qo(Ho)[0],"object"==typeof t&&null!==t&&"function"==typeof t.then)try{var r=Uo(t)}catch(e){if(e===qa)throw Ya;throw e}else r=t;var a=(t=Mo()).queue,o=a.dispatch;return n!==t.memoizedState&&(Ao.flags|=2048,ml(9,{destroy:void 0,resource:void 0},dl.bind(null,a,n),null)),[r,o,e]}function dl(e,t){e.action=t}function pl(e){var t=Mo(),n=Eo;if(null!==n)return fl(t,n,e);Mo(),t=t.memoizedState;var r=(n=Mo()).queue.dispatch;return n.memoizedState=e,[t,r,!1]}function ml(e,t,n,r){return e={tag:e,create:n,deps:r,inst:t,next:null},null===(t=Ao.updateQueue)&&(t={lastEffect:null,events:null,stores:null,memoCache:null},Ao.updateQueue=t),null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function hl(){return Mo().memoizedState}function gl(e,t,n,r){var a=Io();r=void 0===r?null:r,Ao.flags|=e,a.memoizedState=ml(1|t,{destroy:void 0,resource:void 0},n,r)}function yl(e,t,n,r){var a=Mo();r=void 0===r?null:r;var o=a.memoizedState.inst;null!==Eo&&null!==r&&Ro(r,Eo.memoizedState.deps)?a.memoizedState=ml(t,o,n,r):(Ao.flags|=e,a.memoizedState=ml(1|t,o,n,r))}function bl(e,t){gl(8390656,8,e,t)}function vl(e,t){yl(2048,8,e,t)}function Al(e,t){return yl(4,2,e,t)}function El(e,t){return yl(4,4,e,t)}function wl(e,t){if("function"==typeof t){e=e();var n=t(e);return function(){"function"==typeof n?n():t(null)}}if(null!=t)return e=e(),t.current=e,function(){t.current=null}}function kl(e,t,n){n=null!=n?n.concat([e]):null,yl(4,4,wl.bind(null,t,e),n)}function Cl(){}function Sl(e,t){var n=Mo();t=void 0===t?null:t;var r=n.memoizedState;return null!==t&&Ro(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function xl(e,t){var n=Mo();t=void 0===t?null:t;var r=n.memoizedState;if(null!==t&&Ro(t,r[1]))return r[0];if(r=e(),So){de(!0);try{e()}finally{de(!1)}}return n.memoizedState=[r,t],r}function Bl(e,t,n){return void 0===n||1073741824&vo?e.memoizedState=t:(e.memoizedState=n,e=Ls(),Ao.lanes|=e,ps|=e,n)}function Tl(e,t,n,r){return Kn(n,t)?n:null!==mo.current?(e=Bl(e,n,r),Kn(e,t)||(Bi=!0),e):42&vo?(e=Ls(),Ao.lanes|=e,ps|=e,t):(Bi=!0,e.memoizedState=n)}function Pl(e,t,n,r,a){var o=L.p;L.p=0!==o&&8>o?o:8;var l,i,u,s=z.T,c={};z.T=c,Ul(e,!1,t,n);try{var f=a(),d=z.S;null!==d&&d(c,f),null!==f&&"object"==typeof f&&"function"==typeof f.then?Ml(e,t,(l=r,i=[],u={status:"pending",value:null,reason:null,then:function(e){i.push(e)}},f.then(function(){u.status="fulfilled",u.value=l;for(var e=0;e<i.length;e++)(0,i[e])(l)},function(e){for(u.status="rejected",u.reason=e,e=0;e<i.length;e++)(0,i[e])(void 0)}),u),zs()):Ml(e,t,r,zs())}catch(n){Ml(e,t,{then:function(){},status:"rejected",reason:n},zs())}finally{L.p=o,z.T=s}}function Ol(){}function Rl(e,t,n,r){if(5!==e.tag)throw Error(l(476));var a=Nl(e).queue;Pl(e,a,t,D,null===n?Ol:function(){return _l(e),n(r)})}function Nl(e){var t=e.memoizedState;if(null!==t)return t;var n={};return(t={memoizedState:D,baseState:D,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:Ho,lastRenderedState:D},next:null}).next={memoizedState:n,baseState:n,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:Ho,lastRenderedState:n},next:null},e.memoizedState=t,null!==(e=e.alternate)&&(e.memoizedState=t),t}function _l(e){Ml(e,Nl(e).next.queue,{},zs())}function zl(){return xa(Kf)}function Ll(){return Mo().memoizedState}function Dl(){return Mo().memoizedState}function jl(e){for(var t=e.return;null!==t;){switch(t.tag){case 24:case 3:var n=zs(),r=oo(t,e=ao(n),n);return null!==r&&(Ds(r,0,n),lo(r,t,n)),t={cache:_a()},void(e.payload=t)}t=t.return}}function Fl(e,t,n){var r=zs();n={lane:r,revertLane:0,action:n,hasEagerState:!1,eagerState:null,next:null},$l(e)?Wl(t,n):null!==(n=Or(e,t,n,r))&&(Ds(n,0,r),Hl(n,t,r))}function Il(e,t,n){Ml(e,t,n,zs())}function Ml(e,t,n,r){var a={lane:r,revertLane:0,action:n,hasEagerState:!1,eagerState:null,next:null};if($l(e))Wl(t,a);else{var o=e.alternate;if(0===e.lanes&&(null===o||0===o.lanes)&&null!==(o=t.lastRenderedReducer))try{var l=t.lastRenderedState,i=o(l,n);if(a.hasEagerState=!0,a.eagerState=i,Kn(i,l))return Pr(e,t,a,0),null===rs&&Tr(),!1}catch(e){}if(null!==(n=Or(e,t,a,r)))return Ds(n,0,r),Hl(n,t,r),!0}return!1}function Ul(e,t,n,r){if(r={lane:2,revertLane:Pc(),action:r,hasEagerState:!1,eagerState:null,next:null},$l(e)){if(t)throw Error(l(479))}else null!==(t=Or(e,n,r,2))&&Ds(t,0,2)}function $l(e){var t=e.alternate;return e===Ao||null!==t&&t===Ao}function Wl(e,t){Co=ko=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function Hl(e,t,n){if(4194048&n){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,Be(e,n)}}var ql={readContext:xa,use:$o,useCallback:Oo,useContext:Oo,useEffect:Oo,useImperativeHandle:Oo,useLayoutEffect:Oo,useInsertionEffect:Oo,useMemo:Oo,useReducer:Oo,useRef:Oo,useState:Oo,useDebugValue:Oo,useDeferredValue:Oo,useTransition:Oo,useSyncExternalStore:Oo,useId:Oo,useHostTransitionStatus:Oo,useFormState:Oo,useActionState:Oo,useOptimistic:Oo,useMemoCache:Oo,useCacheRefresh:Oo},Vl={readContext:xa,use:$o,useCallback:function(e,t){return Io().memoizedState=[e,void 0===t?null:t],e},useContext:xa,useEffect:bl,useImperativeHandle:function(e,t,n){n=null!=n?n.concat([e]):null,gl(4194308,4,wl.bind(null,t,e),n)},useLayoutEffect:function(e,t){return gl(4194308,4,e,t)},useInsertionEffect:function(e,t){gl(4,2,e,t)},useMemo:function(e,t){var n=Io();t=void 0===t?null:t;var r=e();if(So){de(!0);try{e()}finally{de(!1)}}return n.memoizedState=[r,t],r},useReducer:function(e,t,n){var r=Io();if(void 0!==n){var a=n(t);if(So){de(!0);try{n(t)}finally{de(!1)}}}else a=t;return r.memoizedState=r.baseState=a,e={pending:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:a},r.queue=e,e=e.dispatch=Fl.bind(null,Ao,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Io().memoizedState=e},useState:function(e){var t=(e=el(e)).queue,n=Il.bind(null,Ao,t);return t.dispatch=n,[e.memoizedState,n]},useDebugValue:Cl,useDeferredValue:function(e,t){return Bl(Io(),e,t)},useTransition:function(){var e=el(!1);return e=Pl.bind(null,Ao,e.queue,!0,!1),Io().memoizedState=e,[!1,e]},useSyncExternalStore:function(e,t,n){var r=Ao,a=Io();if(oa){if(void 0===n)throw Error(l(407));n=n()}else{if(n=t(),null===rs)throw Error(l(349));124&os||Ko(r,t,n)}a.memoizedState=n;var o={value:n,getSnapshot:t};return a.queue=o,bl(Xo.bind(null,r,o,e),[e]),r.flags|=2048,ml(9,{destroy:void 0,resource:void 0},Qo.bind(null,r,o,n,t),null),n},useId:function(){var e=Io(),t=rs.identifierPrefix;if(oa){var n=Jr;t="«"+t+"R"+(n=(Xr&~(1<<32-pe(Xr)-1)).toString(32)+n),0<(n=xo++)&&(t+="H"+n.toString(32)),t+="»"}else t="«"+t+"r"+(n=Po++).toString(32)+"»";return e.memoizedState=t},useHostTransitionStatus:zl,useFormState:sl,useActionState:sl,useOptimistic:function(e){var t=Io();t.memoizedState=t.baseState=e;var n={pending:null,lanes:0,dispatch:null,lastRenderedReducer:null,lastRenderedState:null};return t.queue=n,t=Ul.bind(null,Ao,!0,n),n.dispatch=t,[e,t]},useMemoCache:Wo,useCacheRefresh:function(){return Io().memoizedState=jl.bind(null,Ao)}},Yl={readContext:xa,use:$o,useCallback:Sl,useContext:xa,useEffect:vl,useImperativeHandle:kl,useInsertionEffect:Al,useLayoutEffect:El,useMemo:xl,useReducer:qo,useRef:hl,useState:function(){return qo(Ho)},useDebugValue:Cl,useDeferredValue:function(e,t){return Tl(Mo(),Eo.memoizedState,e,t)},useTransition:function(){var e=qo(Ho)[0],t=Mo().memoizedState;return["boolean"==typeof e?e:Uo(e),t]},useSyncExternalStore:Go,useId:Ll,useHostTransitionStatus:zl,useFormState:cl,useActionState:cl,useOptimistic:function(e,t){return tl(Mo(),0,e,t)},useMemoCache:Wo,useCacheRefresh:Dl},Gl={readContext:xa,use:$o,useCallback:Sl,useContext:xa,useEffect:vl,useImperativeHandle:kl,useInsertionEffect:Al,useLayoutEffect:El,useMemo:xl,useReducer:Yo,useRef:hl,useState:function(){return Yo(Ho)},useDebugValue:Cl,useDeferredValue:function(e,t){var n=Mo();return null===Eo?Bl(n,e,t):Tl(n,Eo.memoizedState,e,t)},useTransition:function(){var e=Yo(Ho)[0],t=Mo().memoizedState;return["boolean"==typeof e?e:Uo(e),t]},useSyncExternalStore:Go,useId:Ll,useHostTransitionStatus:zl,useFormState:pl,useActionState:pl,useOptimistic:function(e,t){var n=Mo();return null!==Eo?tl(n,0,e,t):(n.baseState=e,[e,n.queue.dispatch])},useMemoCache:Wo,useCacheRefresh:Dl},Kl=null,Ql=0;function Xl(e){var t=Ql;return Ql+=1,null===Kl&&(Kl=[]),Xa(Kl,e,t)}function Jl(e,t){t=t.props.ref,e.ref=void 0!==t?t:null}function Zl(e,t){if(t.$$typeof===p)throw Error(l(525));throw e=Object.prototype.toString.call(t),Error(l(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function ei(e){return(0,e._init)(e._payload)}function ti(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e){for(var t=new Map;null!==e;)null!==e.key?t.set(e.key,e):t.set(e.index,e),e=e.sibling;return t}function a(e,t){return(e=Fr(e,t)).index=0,e.sibling=null,e}function o(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=67108866,n):r:(t.flags|=67108866,n):(t.flags|=1048576,n)}function i(t){return e&&null===t.alternate&&(t.flags|=67108866),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=$r(n,e.mode,r)).return=e,t):((t=a(t,n)).return=e,t)}function s(e,t,n,r){var o=n.type;return o===g?f(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===o||"object"==typeof o&&null!==o&&o.$$typeof===x&&ei(o)===t.type)?(Jl(t=a(t,n.props),n),t.return=e,t):(Jl(t=Mr(n.type,n.key,n.props,null,e.mode,r),n),t.return=e,t)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Wr(n,e.mode,r)).return=e,t):((t=a(t,n.children||[])).return=e,t)}function f(e,t,n,r,o){return null===t||7!==t.tag?((t=Ur(n,e.mode,r,o)).return=e,t):((t=a(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t||"bigint"==typeof t)return(t=$r(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case m:return Jl(n=Mr(t.type,t.key,t.props,null,e.mode,n),t),n.return=e,n;case h:return(t=Wr(t,e.mode,n)).return=e,t;case x:return d(e,t=(0,t._init)(t._payload),n)}if(_(t)||O(t))return(t=Ur(t,e.mode,n,null)).return=e,t;if("function"==typeof t.then)return d(e,Xl(t),n);if(t.$$typeof===E)return d(e,Ba(e,t),n);Zl(e,t)}return null}function p(e,t,n,r){var a=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n||"bigint"==typeof n)return null!==a?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case m:return n.key===a?s(e,t,n,r):null;case h:return n.key===a?c(e,t,n,r):null;case x:return p(e,t,n=(a=n._init)(n._payload),r)}if(_(n)||O(n))return null!==a?null:f(e,t,n,r,null);if("function"==typeof n.then)return p(e,t,Xl(n),r);if(n.$$typeof===E)return p(e,t,Ba(e,n),r);Zl(e,n)}return null}function y(e,t,n,r,a){if("string"==typeof r&&""!==r||"number"==typeof r||"bigint"==typeof r)return u(t,e=e.get(n)||null,""+r,a);if("object"==typeof r&&null!==r){switch(r.$$typeof){case m:return s(t,e=e.get(null===r.key?n:r.key)||null,r,a);case h:return c(t,e=e.get(null===r.key?n:r.key)||null,r,a);case x:return y(e,t,n,r=(0,r._init)(r._payload),a)}if(_(r)||O(r))return f(t,e=e.get(n)||null,r,a,null);if("function"==typeof r.then)return y(e,t,n,Xl(r),a);if(r.$$typeof===E)return y(e,t,n,Ba(t,r),a);Zl(t,r)}return null}function b(u,s,c,f){if("object"==typeof c&&null!==c&&c.type===g&&null===c.key&&(c=c.props.children),"object"==typeof c&&null!==c){switch(c.$$typeof){case m:e:{for(var v=c.key;null!==s;){if(s.key===v){if((v=c.type)===g){if(7===s.tag){n(u,s.sibling),(f=a(s,c.props.children)).return=u,u=f;break e}}else if(s.elementType===v||"object"==typeof v&&null!==v&&v.$$typeof===x&&ei(v)===s.type){n(u,s.sibling),Jl(f=a(s,c.props),c),f.return=u,u=f;break e}n(u,s);break}t(u,s),s=s.sibling}c.type===g?((f=Ur(c.props.children,u.mode,f,c.key)).return=u,u=f):(Jl(f=Mr(c.type,c.key,c.props,null,u.mode,f),c),f.return=u,u=f)}return i(u);case h:e:{for(v=c.key;null!==s;){if(s.key===v){if(4===s.tag&&s.stateNode.containerInfo===c.containerInfo&&s.stateNode.implementation===c.implementation){n(u,s.sibling),(f=a(s,c.children||[])).return=u,u=f;break e}n(u,s);break}t(u,s),s=s.sibling}(f=Wr(c,u.mode,f)).return=u,u=f}return i(u);case x:return b(u,s,c=(v=c._init)(c._payload),f)}if(_(c))return function(a,l,i,u){for(var s=null,c=null,f=l,m=l=0,h=null;null!==f&&m<i.length;m++){f.index>m?(h=f,f=null):h=f.sibling;var g=p(a,f,i[m],u);if(null===g){null===f&&(f=h);break}e&&f&&null===g.alternate&&t(a,f),l=o(g,l,m),null===c?s=g:c.sibling=g,c=g,f=h}if(m===i.length)return n(a,f),oa&&Zr(a,m),s;if(null===f){for(;m<i.length;m++)null!==(f=d(a,i[m],u))&&(l=o(f,l,m),null===c?s=f:c.sibling=f,c=f);return oa&&Zr(a,m),s}for(f=r(f);m<i.length;m++)null!==(h=y(f,a,m,i[m],u))&&(e&&null!==h.alternate&&f.delete(null===h.key?m:h.key),l=o(h,l,m),null===c?s=h:c.sibling=h,c=h);return e&&f.forEach(function(e){return t(a,e)}),oa&&Zr(a,m),s}(u,s,c,f);if(O(c)){if("function"!=typeof(v=O(c)))throw Error(l(150));return function(a,i,u,s){if(null==u)throw Error(l(151));for(var c=null,f=null,m=i,h=i=0,g=null,b=u.next();null!==m&&!b.done;h++,b=u.next()){m.index>h?(g=m,m=null):g=m.sibling;var v=p(a,m,b.value,s);if(null===v){null===m&&(m=g);break}e&&m&&null===v.alternate&&t(a,m),i=o(v,i,h),null===f?c=v:f.sibling=v,f=v,m=g}if(b.done)return n(a,m),oa&&Zr(a,h),c;if(null===m){for(;!b.done;h++,b=u.next())null!==(b=d(a,b.value,s))&&(i=o(b,i,h),null===f?c=b:f.sibling=b,f=b);return oa&&Zr(a,h),c}for(m=r(m);!b.done;h++,b=u.next())null!==(b=y(m,a,h,b.value,s))&&(e&&null!==b.alternate&&m.delete(null===b.key?h:b.key),i=o(b,i,h),null===f?c=b:f.sibling=b,f=b);return e&&m.forEach(function(e){return t(a,e)}),oa&&Zr(a,h),c}(u,s,c=v.call(c),f)}if("function"==typeof c.then)return b(u,s,Xl(c),f);if(c.$$typeof===E)return b(u,s,Ba(u,c),f);Zl(u,c)}return"string"==typeof c&&""!==c||"number"==typeof c||"bigint"==typeof c?(c=""+c,null!==s&&6===s.tag?(n(u,s.sibling),(f=a(s,c)).return=u,u=f):(n(u,s),(f=$r(c,u.mode,f)).return=u,u=f),i(u)):n(u,s)}return function(e,t,n,r){try{Ql=0;var a=b(e,t,n,r);return Kl=null,a}catch(t){if(t===qa||t===Ya)throw t;var o=Dr(29,t,null,e.mode);return o.lanes=r,o.return=e,o}}}var ni=ti(!0),ri=ti(!1),ai=I(null),oi=null;function li(e){var t=e.alternate;U(ci,1&ci.current),U(ai,e),null===oi&&(null===t||null!==mo.current||null!==t.memoizedState)&&(oi=e)}function ii(e){if(22===e.tag){if(U(ci,ci.current),U(ai,e),null===oi){var t=e.alternate;null!==t&&null!==t.memoizedState&&(oi=e)}}else ui()}function ui(){U(ci,ci.current),U(ai,ai.current)}function si(e){M(ai),oi===e&&(oi=null),M(ci)}var ci=I(0);function fi(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||yf(n)))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(128&t.flags)return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function di(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:d({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var pi={enqueueSetState:function(e,t,n){e=e._reactInternals;var r=zs(),a=ao(r);a.payload=t,null!=n&&(a.callback=n),null!==(t=oo(e,a,r))&&(Ds(t,0,r),lo(t,e,r))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=zs(),a=ao(r);a.tag=1,a.payload=t,null!=n&&(a.callback=n),null!==(t=oo(e,a,r))&&(Ds(t,0,r),lo(t,e,r))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=zs(),r=ao(n);r.tag=2,null!=t&&(r.callback=t),null!==(t=oo(e,r,n))&&(Ds(t,0,n),lo(t,e,n))}};function mi(e,t,n,r,a,o,l){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,l):!(t.prototype&&t.prototype.isPureReactComponent&&Qn(n,r)&&Qn(a,o))}function hi(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&pi.enqueueReplaceState(t,t.state,null)}function gi(e,t){var n=t;if("ref"in t)for(var r in n={},t)"ref"!==r&&(n[r]=t[r]);if(e=e.defaultProps)for(var a in n===t&&(n=d({},n)),e)void 0===n[a]&&(n[a]=e[a]);return n}var yi="function"==typeof reportError?reportError:function(e){if("object"==typeof window&&"function"==typeof window.ErrorEvent){var t=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:"object"==typeof e&&null!==e&&"string"==typeof e.message?String(e.message):String(e),error:e});if(!window.dispatchEvent(t))return}else if("object"==typeof process&&"function"==typeof process.emit)return void process.emit("uncaughtException",e);console.error(e)};function bi(e){yi(e)}function vi(e){console.error(e)}function Ai(e){yi(e)}function Ei(e,t){try{(0,e.onUncaughtError)(t.value,{componentStack:t.stack})}catch(e){setTimeout(function(){throw e})}}function wi(e,t,n){try{(0,e.onCaughtError)(n.value,{componentStack:n.stack,errorBoundary:1===t.tag?t.stateNode:null})}catch(e){setTimeout(function(){throw e})}}function ki(e,t,n){return(n=ao(n)).tag=3,n.payload={element:null},n.callback=function(){Ei(e,t)},n}function Ci(e){return(e=ao(e)).tag=3,e}function Si(e,t,n,r){var a=n.type.getDerivedStateFromError;if("function"==typeof a){var o=r.value;e.payload=function(){return a(o)},e.callback=function(){wi(t,n,r)}}var l=n.stateNode;null!==l&&"function"==typeof l.componentDidCatch&&(e.callback=function(){wi(t,n,r),"function"!=typeof a&&(null===Cs?Cs=new Set([this]):Cs.add(this));var e=r.stack;this.componentDidCatch(r.value,{componentStack:null!==e?e:""})})}var xi=Error(l(461)),Bi=!1;function Ti(e,t,n,r){t.child=null===e?ri(t,null,n,r):ni(t,e.child,n,r)}function Pi(e,t,n,r,a){n=n.render;var o=t.ref;if("ref"in r){var l={};for(var i in r)"ref"!==i&&(l[i]=r[i])}else l=r;return Sa(t),r=No(e,t,n,l,o,a),i=Do(),null===e||Bi?(oa&&i&&ta(t),t.flags|=1,Ti(e,t,r,a),t.child):(jo(e,t,a),Ki(e,t,a))}function Oi(e,t,n,r,a){if(null===e){var o=n.type;return"function"!=typeof o||jr(o)||void 0!==o.defaultProps||null!==n.compare?((e=Mr(n.type,null,r,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=o,Ri(e,t,o,r,a))}if(o=e.child,!Qi(e,a)){var l=o.memoizedProps;if((n=null!==(n=n.compare)?n:Qn)(l,r)&&e.ref===t.ref)return Ki(e,t,a)}return t.flags|=1,(e=Fr(o,r)).ref=t.ref,e.return=t,t.child=e}function Ri(e,t,n,r,a){if(null!==e){var o=e.memoizedProps;if(Qn(o,r)&&e.ref===t.ref){if(Bi=!1,t.pendingProps=r=o,!Qi(e,a))return t.lanes=e.lanes,Ki(e,t,a);131072&e.flags&&(Bi=!0)}}return Li(e,t,n,r,a)}function Ni(e,t,n){var r=t.pendingProps,a=r.children,o=null!==e?e.memoizedState:null;if("hidden"===r.mode){if(128&t.flags){if(r=null!==o?o.baseLanes|n:n,null!==e){for(a=t.child=e.child,o=0;null!==a;)o=o|a.lanes|a.childLanes,a=a.sibling;t.childLanes=o&~r}else t.childLanes=0,t.child=null;return _i(e,t,r,n)}if(!(536870912&n))return t.lanes=t.childLanes=536870912,_i(e,t,null!==o?o.baseLanes|n:n,n);t.memoizedState={baseLanes:0,cachePool:null},null!==e&&Wa(0,null!==o?o.cachePool:null),null!==o?go(t,o):yo(),ii(t)}else null!==o?(Wa(0,o.cachePool),go(t,o),ui(),t.memoizedState=null):(null!==e&&Wa(0,null),yo(),ui());return Ti(e,t,a,n),t.child}function _i(e,t,n,r){var a=$a();return a=null===a?null:{parent:Na._currentValue,pool:a},t.memoizedState={baseLanes:n,cachePool:a},null!==e&&Wa(0,null),yo(),ii(t),null!==e&&ka(e,t,r,!0),null}function zi(e,t){var n=t.ref;if(null===n)null!==e&&null!==e.ref&&(t.flags|=4194816);else{if("function"!=typeof n&&"object"!=typeof n)throw Error(l(284));null!==e&&e.ref===n||(t.flags|=4194816)}}function Li(e,t,n,r,a){return Sa(t),n=No(e,t,n,r,void 0,a),r=Do(),null===e||Bi?(oa&&r&&ta(t),t.flags|=1,Ti(e,t,n,a),t.child):(jo(e,t,a),Ki(e,t,a))}function Di(e,t,n,r,a,o){return Sa(t),t.updateQueue=null,n=zo(t,r,n,a),_o(e),r=Do(),null===e||Bi?(oa&&r&&ta(t),t.flags|=1,Ti(e,t,n,o),t.child):(jo(e,t,o),Ki(e,t,o))}function ji(e,t,n,r,a){if(Sa(t),null===t.stateNode){var o=zr,l=n.contextType;"object"==typeof l&&null!==l&&(o=xa(l)),o=new n(r,o),t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,o.updater=pi,t.stateNode=o,o._reactInternals=t,(o=t.stateNode).props=r,o.state=t.memoizedState,o.refs={},no(t),l=n.contextType,o.context="object"==typeof l&&null!==l?xa(l):zr,o.state=t.memoizedState,"function"==typeof(l=n.getDerivedStateFromProps)&&(di(t,n,l,r),o.state=t.memoizedState),"function"==typeof n.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(l=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),l!==o.state&&pi.enqueueReplaceState(o,o.state,null),co(t,r,o,a),so(),o.state=t.memoizedState),"function"==typeof o.componentDidMount&&(t.flags|=4194308),r=!0}else if(null===e){o=t.stateNode;var i=t.memoizedProps,u=gi(n,i);o.props=u;var s=o.context,c=n.contextType;l=zr,"object"==typeof c&&null!==c&&(l=xa(c));var f=n.getDerivedStateFromProps;c="function"==typeof f||"function"==typeof o.getSnapshotBeforeUpdate,i=t.pendingProps!==i,c||"function"!=typeof o.UNSAFE_componentWillReceiveProps&&"function"!=typeof o.componentWillReceiveProps||(i||s!==l)&&hi(t,o,r,l),to=!1;var d=t.memoizedState;o.state=d,co(t,r,o,a),so(),s=t.memoizedState,i||d!==s||to?("function"==typeof f&&(di(t,n,f,r),s=t.memoizedState),(u=to||mi(t,n,u,r,d,s,l))?(c||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||("function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount()),"function"==typeof o.componentDidMount&&(t.flags|=4194308)):("function"==typeof o.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=s),o.props=r,o.state=s,o.context=l,r=u):("function"==typeof o.componentDidMount&&(t.flags|=4194308),r=!1)}else{o=t.stateNode,ro(e,t),c=gi(n,l=t.memoizedProps),o.props=c,f=t.pendingProps,d=o.context,s=n.contextType,u=zr,"object"==typeof s&&null!==s&&(u=xa(s)),(s="function"==typeof(i=n.getDerivedStateFromProps)||"function"==typeof o.getSnapshotBeforeUpdate)||"function"!=typeof o.UNSAFE_componentWillReceiveProps&&"function"!=typeof o.componentWillReceiveProps||(l!==f||d!==u)&&hi(t,o,r,u),to=!1,d=t.memoizedState,o.state=d,co(t,r,o,a),so();var p=t.memoizedState;l!==f||d!==p||to||null!==e&&null!==e.dependencies&&Ca(e.dependencies)?("function"==typeof i&&(di(t,n,i,r),p=t.memoizedState),(c=to||mi(t,n,c,r,d,p,u)||null!==e&&null!==e.dependencies&&Ca(e.dependencies))?(s||"function"!=typeof o.UNSAFE_componentWillUpdate&&"function"!=typeof o.componentWillUpdate||("function"==typeof o.componentWillUpdate&&o.componentWillUpdate(r,p,u),"function"==typeof o.UNSAFE_componentWillUpdate&&o.UNSAFE_componentWillUpdate(r,p,u)),"function"==typeof o.componentDidUpdate&&(t.flags|=4),"function"==typeof o.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof o.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof o.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=p),o.props=r,o.state=p,o.context=u,r=c):("function"!=typeof o.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof o.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),r=!1)}return o=r,zi(e,t),r=!!(128&t.flags),o||r?(o=t.stateNode,n=r&&"function"!=typeof n.getDerivedStateFromError?null:o.render(),t.flags|=1,null!==e&&r?(t.child=ni(t,e.child,null,a),t.child=ni(t,null,n,a)):Ti(e,t,n,a),t.memoizedState=o.state,e=t.child):e=Ki(e,t,a),e}function Fi(e,t,n,r){return pa(),t.flags|=256,Ti(e,t,n,r),t.child}var Ii={dehydrated:null,treeContext:null,retryLane:0,hydrationErrors:null};function Mi(e){return{baseLanes:e,cachePool:Ha()}}function Ui(e,t,n){return e=null!==e?e.childLanes&~n:0,t&&(e|=gs),e}function $i(e,t,n){var r,a=t.pendingProps,o=!1,i=!!(128&t.flags);if((r=i)||(r=(null===e||null!==e.memoizedState)&&!!(2&ci.current)),r&&(o=!0,t.flags&=-129),r=!!(32&t.flags),t.flags&=-33,null===e){if(oa){if(o?li(t):ui(),oa){var u,s=aa;if(u=s){e:{for(u=s,s=ia;8!==u.nodeType;){if(!s){s=null;break e}if(null===(u=bf(u.nextSibling))){s=null;break e}}s=u}null!==s?(t.memoizedState={dehydrated:s,treeContext:null!==Qr?{id:Xr,overflow:Jr}:null,retryLane:536870912,hydrationErrors:null},(u=Dr(18,null,null,0)).stateNode=s,u.return=t,t.child=u,ra=t,aa=null,u=!0):u=!1}u||sa(t)}if(null!==(s=t.memoizedState)&&null!==(s=s.dehydrated))return yf(s)?t.lanes=32:t.lanes=536870912,null;si(t)}return s=a.children,a=a.fallback,o?(ui(),s=Hi({mode:"hidden",children:s},o=t.mode),a=Ur(a,o,n,null),s.return=t,a.return=t,s.sibling=a,t.child=s,(o=t.child).memoizedState=Mi(n),o.childLanes=Ui(e,r,n),t.memoizedState=Ii,a):(li(t),Wi(t,s))}if(null!==(u=e.memoizedState)&&null!==(s=u.dehydrated)){if(i)256&t.flags?(li(t),t.flags&=-257,t=qi(e,t,n)):null!==t.memoizedState?(ui(),t.child=e.child,t.flags|=128,t=null):(ui(),o=a.fallback,s=t.mode,a=Hi({mode:"visible",children:a.children},s),(o=Ur(o,s,n,null)).flags|=2,a.return=t,o.return=t,a.sibling=o,t.child=a,ni(t,e.child,null,n),(a=t.child).memoizedState=Mi(n),a.childLanes=Ui(e,r,n),t.memoizedState=Ii,t=o);else if(li(t),yf(s)){if(r=s.nextSibling&&s.nextSibling.dataset)var c=r.dgst;r=c,(a=Error(l(419))).stack="",a.digest=r,ha({value:a,source:null,stack:null}),t=qi(e,t,n)}else if(Bi||ka(e,t,n,!1),r=0!==(n&e.childLanes),Bi||r){if(null!==(r=rs)&&0!==(a=0!==((a=42&(a=n&-n)?1:Te(a))&(r.suspendedLanes|n))?0:a)&&a!==u.retryLane)throw u.retryLane=a,Rr(e,a),Ds(r,0,a),xi;"$?"===s.data||Ys(),t=qi(e,t,n)}else"$?"===s.data?(t.flags|=192,t.child=e.child,t=null):(e=u.treeContext,aa=bf(s.nextSibling),ra=t,oa=!0,la=null,ia=!1,null!==e&&(Gr[Kr++]=Xr,Gr[Kr++]=Jr,Gr[Kr++]=Qr,Xr=e.id,Jr=e.overflow,Qr=t),(t=Wi(t,a.children)).flags|=4096);return t}return o?(ui(),o=a.fallback,s=t.mode,c=(u=e.child).sibling,(a=Fr(u,{mode:"hidden",children:a.children})).subtreeFlags=65011712&u.subtreeFlags,null!==c?o=Fr(c,o):(o=Ur(o,s,n,null)).flags|=2,o.return=t,a.return=t,a.sibling=o,t.child=a,a=o,o=t.child,null===(s=e.child.memoizedState)?s=Mi(n):(null!==(u=s.cachePool)?(c=Na._currentValue,u=u.parent!==c?{parent:c,pool:c}:u):u=Ha(),s={baseLanes:s.baseLanes|n,cachePool:u}),o.memoizedState=s,o.childLanes=Ui(e,r,n),t.memoizedState=Ii,a):(li(t),e=(n=e.child).sibling,(n=Fr(n,{mode:"visible",children:a.children})).return=t,n.sibling=null,null!==e&&(null===(r=t.deletions)?(t.deletions=[e],t.flags|=16):r.push(e)),t.child=n,t.memoizedState=null,n)}function Wi(e,t){return(t=Hi({mode:"visible",children:t},e.mode)).return=e,e.child=t}function Hi(e,t){return(e=Dr(22,e,null,t)).lanes=0,e.stateNode={_visibility:1,_pendingMarkers:null,_retryCache:null,_transitions:null},e}function qi(e,t,n){return ni(t,e.child,null,n),(e=Wi(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function Vi(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),Ea(e.return,t,n)}function Yi(e,t,n,r,a){var o=e.memoizedState;null===o?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:a}:(o.isBackwards=t,o.rendering=null,o.renderingStartTime=0,o.last=r,o.tail=n,o.tailMode=a)}function Gi(e,t,n){var r=t.pendingProps,a=r.revealOrder,o=r.tail;if(Ti(e,t,r.children,n),2&(r=ci.current))r=1&r|2,t.flags|=128;else{if(null!==e&&128&e.flags)e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Vi(e,n,t);else if(19===e.tag)Vi(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}switch(U(ci,r),a){case"forwards":for(n=t.child,a=null;null!==n;)null!==(e=n.alternate)&&null===fi(e)&&(a=n),n=n.sibling;null===(n=a)?(a=t.child,t.child=null):(a=n.sibling,n.sibling=null),Yi(t,!1,a,n,o);break;case"backwards":for(n=null,a=t.child,t.child=null;null!==a;){if(null!==(e=a.alternate)&&null===fi(e)){t.child=a;break}e=a.sibling,a.sibling=n,n=a,a=e}Yi(t,!0,n,null,o);break;case"together":Yi(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Ki(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),ps|=t.lanes,0===(n&t.childLanes)){if(null===e)return null;if(ka(e,t,n,!1),0===(n&t.childLanes))return null}if(null!==e&&t.child!==e.child)throw Error(l(153));if(null!==t.child){for(n=Fr(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Fr(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Qi(e,t){return 0!==(e.lanes&t)||!(null===(e=e.dependencies)||!Ca(e))}function Xi(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps)Bi=!0;else{if(!(Qi(e,n)||128&t.flags))return Bi=!1,function(e,t,n){switch(t.tag){case 3:V(t,t.stateNode.containerInfo),va(0,Na,e.memoizedState.cache),pa();break;case 27:case 5:G(t);break;case 4:V(t,t.stateNode.containerInfo);break;case 10:va(0,t.type,t.memoizedProps.value);break;case 13:var r=t.memoizedState;if(null!==r)return null!==r.dehydrated?(li(t),t.flags|=128,null):0!==(n&t.child.childLanes)?$i(e,t,n):(li(t),null!==(e=Ki(e,t,n))?e.sibling:null);li(t);break;case 19:var a=!!(128&e.flags);if((r=0!==(n&t.childLanes))||(ka(e,t,n,!1),r=0!==(n&t.childLanes)),a){if(r)return Gi(e,t,n);t.flags|=128}if(null!==(a=t.memoizedState)&&(a.rendering=null,a.tail=null,a.lastEffect=null),U(ci,ci.current),r)break;return null;case 22:case 23:return t.lanes=0,Ni(e,t,n);case 24:va(0,Na,e.memoizedState.cache)}return Ki(e,t,n)}(e,t,n);Bi=!!(131072&e.flags)}else Bi=!1,oa&&1048576&t.flags&&ea(t,Yr,t.index);switch(t.lanes=0,t.tag){case 16:e:{e=t.pendingProps;var r=t.elementType,a=r._init;if(r=a(r._payload),t.type=r,"function"!=typeof r){if(null!=r){if((a=r.$$typeof)===w){t.tag=11,t=Pi(null,t,r,e,n);break e}if(a===S){t.tag=14,t=Oi(null,t,r,e,n);break e}}throw t=N(r)||r,Error(l(306,t,""))}jr(r)?(e=gi(r,e),t.tag=1,t=ji(null,t,r,e,n)):(t.tag=0,t=Li(null,t,r,e,n))}return t;case 0:return Li(e,t,t.type,t.pendingProps,n);case 1:return ji(e,t,r=t.type,a=gi(r,t.pendingProps),n);case 3:e:{if(V(t,t.stateNode.containerInfo),null===e)throw Error(l(387));r=t.pendingProps;var o=t.memoizedState;a=o.element,ro(e,t),co(t,r,null,n);var i=t.memoizedState;if(r=i.cache,va(0,Na,r),r!==o.cache&&wa(t,[Na],n,!0),so(),r=i.element,o.isDehydrated){if(o={element:r,isDehydrated:!1,cache:i.cache},t.updateQueue.baseState=o,t.memoizedState=o,256&t.flags){t=Fi(e,t,r,n);break e}if(r!==a){ha(a=Cr(Error(l(424)),t)),t=Fi(e,t,r,n);break e}for(e=9===(e=t.stateNode.containerInfo).nodeType?e.body:"HTML"===e.nodeName?e.ownerDocument.body:e,aa=bf(e.firstChild),ra=t,oa=!0,la=null,ia=!0,n=ri(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(pa(),r===a){t=Ki(e,t,n);break e}Ti(e,t,r,n)}t=t.child}return t;case 26:return zi(e,t),null===e?(n=Pf(t.type,null,t.pendingProps,null))?t.memoizedState=n:oa||(n=t.type,e=t.pendingProps,(r=rf(H.current).createElement(n))[Ne]=t,r[_e]=e,ef(r,n,e),qe(r),t.stateNode=r):t.memoizedState=Pf(t.type,e.memoizedProps,t.pendingProps,e.memoizedState),null;case 27:return G(t),null===e&&oa&&(r=t.stateNode=Ef(t.type,t.pendingProps,H.current),ra=t,ia=!0,a=aa,mf(t.type)?(vf=a,aa=bf(r.firstChild)):aa=a),Ti(e,t,t.pendingProps.children,n),zi(e,t),null===e&&(t.flags|=4194304),t.child;case 5:return null===e&&oa&&((a=r=aa)&&(null!==(r=function(e,t,n,r){for(;1===e.nodeType;){var a=n;if(e.nodeName.toLowerCase()!==t.toLowerCase()){if(!r&&("INPUT"!==e.nodeName||"hidden"!==e.type))break}else if(r){if(!e[Ie])switch(t){case"meta":if(!e.hasAttribute("itemprop"))break;return e;case"link":if("stylesheet"===(o=e.getAttribute("rel"))&&e.hasAttribute("data-precedence"))break;if(o!==a.rel||e.getAttribute("href")!==(null==a.href||""===a.href?null:a.href)||e.getAttribute("crossorigin")!==(null==a.crossOrigin?null:a.crossOrigin)||e.getAttribute("title")!==(null==a.title?null:a.title))break;return e;case"style":if(e.hasAttribute("data-precedence"))break;return e;case"script":if(((o=e.getAttribute("src"))!==(null==a.src?null:a.src)||e.getAttribute("type")!==(null==a.type?null:a.type)||e.getAttribute("crossorigin")!==(null==a.crossOrigin?null:a.crossOrigin))&&o&&e.hasAttribute("async")&&!e.hasAttribute("itemprop"))break;return e;default:return e}}else{if("input"!==t||"hidden"!==e.type)return e;var o=null==a.name?null:""+a.name;if("hidden"===a.type&&e.getAttribute("name")===o)return e}if(null===(e=bf(e.nextSibling)))break}return null}(r,t.type,t.pendingProps,ia))?(t.stateNode=r,ra=t,aa=bf(r.firstChild),ia=!1,a=!0):a=!1),a||sa(t)),G(t),a=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,r=o.children,lf(a,o)?r=null:null!==i&&lf(a,i)&&(t.flags|=32),null!==t.memoizedState&&(a=No(e,t,Lo,null,null,n),Kf._currentValue=a),zi(e,t),Ti(e,t,r,n),t.child;case 6:return null===e&&oa&&((e=n=aa)&&(null!==(n=function(e,t,n){if(""===t)return null;for(;3!==e.nodeType;){if((1!==e.nodeType||"INPUT"!==e.nodeName||"hidden"!==e.type)&&!n)return null;if(null===(e=bf(e.nextSibling)))return null}return e}(n,t.pendingProps,ia))?(t.stateNode=n,ra=t,aa=null,e=!0):e=!1),e||sa(t)),null;case 13:return $i(e,t,n);case 4:return V(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=ni(t,null,r,n):Ti(e,t,r,n),t.child;case 11:return Pi(e,t,t.type,t.pendingProps,n);case 7:return Ti(e,t,t.pendingProps,n),t.child;case 8:case 12:return Ti(e,t,t.pendingProps.children,n),t.child;case 10:return r=t.pendingProps,va(0,t.type,r.value),Ti(e,t,r.children,n),t.child;case 9:return a=t.type._context,r=t.pendingProps.children,Sa(t),r=r(a=xa(a)),t.flags|=1,Ti(e,t,r,n),t.child;case 14:return Oi(e,t,t.type,t.pendingProps,n);case 15:return Ri(e,t,t.type,t.pendingProps,n);case 19:return Gi(e,t,n);case 31:return r=t.pendingProps,n=t.mode,r={mode:r.mode,children:r.children},null===e?((n=Hi(r,n)).ref=t.ref,t.child=n,n.return=t,t=n):((n=Fr(e.child,r)).ref=t.ref,t.child=n,n.return=t,t=n),t;case 22:return Ni(e,t,n);case 24:return Sa(t),r=xa(Na),null===e?(null===(a=$a())&&(a=rs,o=_a(),a.pooledCache=o,o.refCount++,null!==o&&(a.pooledCacheLanes|=n),a=o),t.memoizedState={parent:r,cache:a},no(t),va(0,Na,a)):(0!==(e.lanes&n)&&(ro(e,t),co(t,null,null,n),so()),a=e.memoizedState,o=t.memoizedState,a.parent!==r?(a={parent:r,cache:r},t.memoizedState=a,0===t.lanes&&(t.memoizedState=t.updateQueue.baseState=a),va(0,Na,r)):(r=o.cache,va(0,Na,r),r!==a.cache&&wa(t,[Na],n,!0))),Ti(e,t,t.pendingProps.children,n),t.child;case 29:throw t.pendingProps}throw Error(l(156,t.tag))}function Ji(e){e.flags|=4}function Zi(e,t){if("stylesheet"!==t.type||4&t.state.loading)e.flags&=-16777217;else if(e.flags|=16777216,!$f(t)){if(null!==(t=ai.current)&&((4194048&os)===os?null!==oi:(62914560&os)!==os&&!(536870912&os)||t!==oi))throw Ja=Ga,Va;e.flags|=8192}}function eu(e,t){null!==t&&(e.flags|=4),16384&e.flags&&(t=22!==e.tag?ke():536870912,e.lanes|=t,ys|=t)}function tu(e,t){if(!oa)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function nu(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=65011712&a.subtreeFlags,r|=65011712&a.flags,a.return=e,a=a.sibling;else for(a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=a.subtreeFlags,r|=a.flags,a.return=e,a=a.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function ru(e,t,n){var r=t.pendingProps;switch(na(t),t.tag){case 31:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:case 1:return nu(t),null;case 3:return n=t.stateNode,r=null,null!==e&&(r=e.memoizedState.cache),t.memoizedState.cache!==r&&(t.flags|=2048),Aa(Na),Y(),n.pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||(da(t)?Ji(t):null===e||e.memoizedState.isDehydrated&&!(256&t.flags)||(t.flags|=1024,ma())),nu(t),null;case 26:return n=t.memoizedState,null===e?(Ji(t),null!==n?(nu(t),Zi(t,n)):(nu(t),t.flags&=-16777217)):n?n!==e.memoizedState?(Ji(t),nu(t),Zi(t,n)):(nu(t),t.flags&=-16777217):(e.memoizedProps!==r&&Ji(t),nu(t),t.flags&=-16777217),null;case 27:K(t),n=H.current;var a=t.type;if(null!==e&&null!=t.stateNode)e.memoizedProps!==r&&Ji(t);else{if(!r){if(null===t.stateNode)throw Error(l(166));return nu(t),null}e=$.current,da(t)?ca(t):(e=Ef(a,r,n),t.stateNode=e,Ji(t))}return nu(t),null;case 5:if(K(t),n=t.type,null!==e&&null!=t.stateNode)e.memoizedProps!==r&&Ji(t);else{if(!r){if(null===t.stateNode)throw Error(l(166));return nu(t),null}if(e=$.current,da(t))ca(t);else{switch(a=rf(H.current),e){case 1:e=a.createElementNS("http://www.w3.org/2000/svg",n);break;case 2:e=a.createElementNS("http://www.w3.org/1998/Math/MathML",n);break;default:switch(n){case"svg":e=a.createElementNS("http://www.w3.org/2000/svg",n);break;case"math":e=a.createElementNS("http://www.w3.org/1998/Math/MathML",n);break;case"script":(e=a.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild);break;case"select":e="string"==typeof r.is?a.createElement("select",{is:r.is}):a.createElement("select"),r.multiple?e.multiple=!0:r.size&&(e.size=r.size);break;default:e="string"==typeof r.is?a.createElement(n,{is:r.is}):a.createElement(n)}}e[Ne]=t,e[_e]=r;e:for(a=t.child;null!==a;){if(5===a.tag||6===a.tag)e.appendChild(a.stateNode);else if(4!==a.tag&&27!==a.tag&&null!==a.child){a.child.return=a,a=a.child;continue}if(a===t)break e;for(;null===a.sibling;){if(null===a.return||a.return===t)break e;a=a.return}a.sibling.return=a.return,a=a.sibling}t.stateNode=e;e:switch(ef(e,n,r),n){case"button":case"input":case"select":case"textarea":e=!!r.autoFocus;break e;case"img":e=!0;break e;default:e=!1}e&&Ji(t)}}return nu(t),t.flags&=-16777217,null;case 6:if(e&&null!=t.stateNode)e.memoizedProps!==r&&Ji(t);else{if("string"!=typeof r&&null===t.stateNode)throw Error(l(166));if(e=H.current,da(t)){if(e=t.stateNode,n=t.memoizedProps,r=null,null!==(a=ra))switch(a.tag){case 27:case 5:r=a.memoizedProps}e[Ne]=t,(e=!!(e.nodeValue===n||null!==r&&!0===r.suppressHydrationWarning||Qc(e.nodeValue,n)))||sa(t)}else(e=rf(e).createTextNode(r))[Ne]=t,t.stateNode=e}return nu(t),null;case 13:if(r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(a=da(t),null!==r&&null!==r.dehydrated){if(null===e){if(!a)throw Error(l(318));if(!(a=null!==(a=t.memoizedState)?a.dehydrated:null))throw Error(l(317));a[Ne]=t}else pa(),!(128&t.flags)&&(t.memoizedState=null),t.flags|=4;nu(t),a=!1}else a=ma(),null!==e&&null!==e.memoizedState&&(e.memoizedState.hydrationErrors=a),a=!0;if(!a)return 256&t.flags?(si(t),t):(si(t),null)}if(si(t),128&t.flags)return t.lanes=n,t;if(n=null!==r,e=null!==e&&null!==e.memoizedState,n){a=null,null!==(r=t.child).alternate&&null!==r.alternate.memoizedState&&null!==r.alternate.memoizedState.cachePool&&(a=r.alternate.memoizedState.cachePool.pool);var o=null;null!==r.memoizedState&&null!==r.memoizedState.cachePool&&(o=r.memoizedState.cachePool.pool),o!==a&&(r.flags|=2048)}return n!==e&&n&&(t.child.flags|=8192),eu(t,t.updateQueue),nu(t),null;case 4:return Y(),null===e&&Mc(t.stateNode.containerInfo),nu(t),null;case 10:return Aa(t.type),nu(t),null;case 19:if(M(ci),null===(a=t.memoizedState))return nu(t),null;if(r=!!(128&t.flags),null===(o=a.rendering))if(r)tu(a,!1);else{if(0!==ds||null!==e&&128&e.flags)for(e=t.child;null!==e;){if(null!==(o=fi(e))){for(t.flags|=128,tu(a,!1),e=o.updateQueue,t.updateQueue=e,eu(t,e),t.subtreeFlags=0,e=n,n=t.child;null!==n;)Ir(n,e),n=n.sibling;return U(ci,1&ci.current|2),t.child}e=e.sibling}null!==a.tail&&te()>ws&&(t.flags|=128,r=!0,tu(a,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=fi(o))){if(t.flags|=128,r=!0,e=e.updateQueue,t.updateQueue=e,eu(t,e),tu(a,!0),null===a.tail&&"hidden"===a.tailMode&&!o.alternate&&!oa)return nu(t),null}else 2*te()-a.renderingStartTime>ws&&536870912!==n&&(t.flags|=128,r=!0,tu(a,!1),t.lanes=4194304);a.isBackwards?(o.sibling=t.child,t.child=o):(null!==(e=a.last)?e.sibling=o:t.child=o,a.last=o)}return null!==a.tail?(t=a.tail,a.rendering=t,a.tail=t.sibling,a.renderingStartTime=te(),t.sibling=null,e=ci.current,U(ci,r?1&e|2:1&e),t):(nu(t),null);case 22:case 23:return si(t),bo(),r=null!==t.memoizedState,null!==e?null!==e.memoizedState!==r&&(t.flags|=8192):r&&(t.flags|=8192),r?!!(536870912&n)&&!(128&t.flags)&&(nu(t),6&t.subtreeFlags&&(t.flags|=8192)):nu(t),null!==(n=t.updateQueue)&&eu(t,n.retryQueue),n=null,null!==e&&null!==e.memoizedState&&null!==e.memoizedState.cachePool&&(n=e.memoizedState.cachePool.pool),r=null,null!==t.memoizedState&&null!==t.memoizedState.cachePool&&(r=t.memoizedState.cachePool.pool),r!==n&&(t.flags|=2048),null!==e&&M(Ua),null;case 24:return n=null,null!==e&&(n=e.memoizedState.cache),t.memoizedState.cache!==n&&(t.flags|=2048),Aa(Na),nu(t),null;case 25:case 30:return null}throw Error(l(156,t.tag))}function au(e,t){switch(na(t),t.tag){case 1:return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return Aa(Na),Y(),65536&(e=t.flags)&&!(128&e)?(t.flags=-65537&e|128,t):null;case 26:case 27:case 5:return K(t),null;case 13:if(si(t),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(l(340));pa()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return M(ci),null;case 4:return Y(),null;case 10:return Aa(t.type),null;case 22:case 23:return si(t),bo(),null!==e&&M(Ua),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 24:return Aa(Na),null;default:return null}}function ou(e,t){switch(na(t),t.tag){case 3:Aa(Na),Y();break;case 26:case 27:case 5:K(t);break;case 4:Y();break;case 13:si(t);break;case 19:M(ci);break;case 10:Aa(t.type);break;case 22:case 23:si(t),bo(),null!==e&&M(Ua);break;case 24:Aa(Na)}}function lu(e,t){try{var n=t.updateQueue,r=null!==n?n.lastEffect:null;if(null!==r){var a=r.next;n=a;do{if((n.tag&e)===e){r=void 0;var o=n.create,l=n.inst;r=o(),l.destroy=r}n=n.next}while(n!==a)}}catch(e){cc(t,t.return,e)}}function iu(e,t,n){try{var r=t.updateQueue,a=null!==r?r.lastEffect:null;if(null!==a){var o=a.next;r=o;do{if((r.tag&e)===e){var l=r.inst,i=l.destroy;if(void 0!==i){l.destroy=void 0,a=t;var u=n,s=i;try{s()}catch(e){cc(a,u,e)}}}r=r.next}while(r!==o)}}catch(e){cc(t,t.return,e)}}function uu(e){var t=e.updateQueue;if(null!==t){var n=e.stateNode;try{po(t,n)}catch(t){cc(e,e.return,t)}}}function su(e,t,n){n.props=gi(e.type,e.memoizedProps),n.state=e.memoizedState;try{n.componentWillUnmount()}catch(n){cc(e,t,n)}}function cu(e,t){try{var n=e.ref;if(null!==n){switch(e.tag){case 26:case 27:case 5:var r=e.stateNode;break;default:r=e.stateNode}"function"==typeof n?e.refCleanup=n(r):n.current=r}}catch(n){cc(e,t,n)}}function fu(e,t){var n=e.ref,r=e.refCleanup;if(null!==n)if("function"==typeof r)try{r()}catch(n){cc(e,t,n)}finally{e.refCleanup=null,null!=(e=e.alternate)&&(e.refCleanup=null)}else if("function"==typeof n)try{n(null)}catch(n){cc(e,t,n)}else n.current=null}function du(e){var t=e.type,n=e.memoizedProps,r=e.stateNode;try{e:switch(t){case"button":case"input":case"select":case"textarea":n.autoFocus&&r.focus();break e;case"img":n.src?r.src=n.src:n.srcSet&&(r.srcset=n.srcSet)}}catch(t){cc(e,e.return,t)}}function pu(e,t,n){try{var r=e.stateNode;!function(e,t,n,r){switch(t){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"input":var a=null,o=null,i=null,u=null,s=null,c=null,f=null;for(m in n){var d=n[m];if(n.hasOwnProperty(m)&&null!=d)switch(m){case"checked":case"value":break;case"defaultValue":s=d;default:r.hasOwnProperty(m)||Jc(e,t,m,null,r,d)}}for(var p in r){var m=r[p];if(d=n[p],r.hasOwnProperty(p)&&(null!=m||null!=d))switch(p){case"type":o=m;break;case"name":a=m;break;case"checked":c=m;break;case"defaultChecked":f=m;break;case"value":i=m;break;case"defaultValue":u=m;break;case"children":case"dangerouslySetInnerHTML":if(null!=m)throw Error(l(137,t));break;default:m!==d&&Jc(e,t,p,m,r,d)}}return void gt(e,i,u,s,c,f,o,a);case"select":for(o in m=i=u=p=null,n)if(s=n[o],n.hasOwnProperty(o)&&null!=s)switch(o){case"value":break;case"multiple":m=s;default:r.hasOwnProperty(o)||Jc(e,t,o,null,r,s)}for(a in r)if(o=r[a],s=n[a],r.hasOwnProperty(a)&&(null!=o||null!=s))switch(a){case"value":p=o;break;case"defaultValue":u=o;break;case"multiple":i=o;default:o!==s&&Jc(e,t,a,o,r,s)}return t=u,n=i,r=m,void(null!=p?vt(e,!!n,p,!1):!!r!=!!n&&(null!=t?vt(e,!!n,t,!0):vt(e,!!n,n?[]:"",!1)));case"textarea":for(u in m=p=null,n)if(a=n[u],n.hasOwnProperty(u)&&null!=a&&!r.hasOwnProperty(u))switch(u){case"value":case"children":break;default:Jc(e,t,u,null,r,a)}for(i in r)if(a=r[i],o=n[i],r.hasOwnProperty(i)&&(null!=a||null!=o))switch(i){case"value":p=a;break;case"defaultValue":m=a;break;case"children":break;case"dangerouslySetInnerHTML":if(null!=a)throw Error(l(91));break;default:a!==o&&Jc(e,t,i,a,r,o)}return void At(e,p,m);case"option":for(var h in n)p=n[h],n.hasOwnProperty(h)&&null!=p&&!r.hasOwnProperty(h)&&("selected"===h?e.selected=!1:Jc(e,t,h,null,r,p));for(s in r)p=r[s],m=n[s],!r.hasOwnProperty(s)||p===m||null==p&&null==m||("selected"===s?e.selected=p&&"function"!=typeof p&&"symbol"!=typeof p:Jc(e,t,s,p,r,m));return;case"img":case"link":case"area":case"base":case"br":case"col":case"embed":case"hr":case"keygen":case"meta":case"param":case"source":case"track":case"wbr":case"menuitem":for(var g in n)p=n[g],n.hasOwnProperty(g)&&null!=p&&!r.hasOwnProperty(g)&&Jc(e,t,g,null,r,p);for(c in r)if(p=r[c],m=n[c],r.hasOwnProperty(c)&&p!==m&&(null!=p||null!=m))switch(c){case"children":case"dangerouslySetInnerHTML":if(null!=p)throw Error(l(137,t));break;default:Jc(e,t,c,p,r,m)}return;default:if(xt(t)){for(var y in n)p=n[y],n.hasOwnProperty(y)&&void 0!==p&&!r.hasOwnProperty(y)&&Zc(e,t,y,void 0,r,p);for(f in r)p=r[f],m=n[f],!r.hasOwnProperty(f)||p===m||void 0===p&&void 0===m||Zc(e,t,f,p,r,m);return}}for(var b in n)p=n[b],n.hasOwnProperty(b)&&null!=p&&!r.hasOwnProperty(b)&&Jc(e,t,b,null,r,p);for(d in r)p=r[d],m=n[d],!r.hasOwnProperty(d)||p===m||null==p&&null==m||Jc(e,t,d,p,r,m)}(r,e.type,n,t),r[_e]=t}catch(t){cc(e,e.return,t)}}function mu(e){return 5===e.tag||3===e.tag||26===e.tag||27===e.tag&&mf(e.type)||4===e.tag}function hu(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||mu(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(27===e.tag&&mf(e.type))continue e;if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function gu(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?(9===n.nodeType?n.body:"HTML"===n.nodeName?n.ownerDocument.body:n).insertBefore(e,t):((t=9===n.nodeType?n.body:"HTML"===n.nodeName?n.ownerDocument.body:n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Xc));else if(4!==r&&(27===r&&mf(e.type)&&(n=e.stateNode,t=null),null!==(e=e.child)))for(gu(e,t,n),e=e.sibling;null!==e;)gu(e,t,n),e=e.sibling}function yu(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&(27===r&&mf(e.type)&&(n=e.stateNode),null!==(e=e.child)))for(yu(e,t,n),e=e.sibling;null!==e;)yu(e,t,n),e=e.sibling}function bu(e){var t=e.stateNode,n=e.memoizedProps;try{for(var r=e.type,a=t.attributes;a.length;)t.removeAttributeNode(a[0]);ef(t,r,n),t[Ne]=e,t[_e]=n}catch(t){cc(e,e.return,t)}}var vu=!1,Au=!1,Eu=!1,wu="function"==typeof WeakSet?WeakSet:Set,ku=null;function Cu(e,t,n){var r=n.flags;switch(n.tag){case 0:case 11:case 15:ju(e,n),4&r&&lu(5,n);break;case 1:if(ju(e,n),4&r)if(e=n.stateNode,null===t)try{e.componentDidMount()}catch(e){cc(n,n.return,e)}else{var a=gi(n.type,t.memoizedProps);t=t.memoizedState;try{e.componentDidUpdate(a,t,e.__reactInternalSnapshotBeforeUpdate)}catch(e){cc(n,n.return,e)}}64&r&&uu(n),512&r&&cu(n,n.return);break;case 3:if(ju(e,n),64&r&&null!==(e=n.updateQueue)){if(t=null,null!==n.child)switch(n.child.tag){case 27:case 5:case 1:t=n.child.stateNode}try{po(e,t)}catch(e){cc(n,n.return,e)}}break;case 27:null===t&&4&r&&bu(n);case 26:case 5:ju(e,n),null===t&&4&r&&du(n),512&r&&cu(n,n.return);break;case 12:ju(e,n);break;case 13:ju(e,n),4&r&&Ou(e,n),64&r&&null!==(e=n.memoizedState)&&null!==(e=e.dehydrated)&&function(e,t){var n=e.ownerDocument;if("$?"!==e.data||"complete"===n.readyState)t();else{var r=function(){t(),n.removeEventListener("DOMContentLoaded",r)};n.addEventListener("DOMContentLoaded",r),e._reactRetry=r}}(e,n=mc.bind(null,n));break;case 22:if(!(r=null!==n.memoizedState||vu)){t=null!==t&&null!==t.memoizedState||Au,a=vu;var o=Au;vu=r,(Au=t)&&!o?Iu(e,n,!!(8772&n.subtreeFlags)):ju(e,n),vu=a,Au=o}break;case 30:break;default:ju(e,n)}}function Su(e){var t=e.alternate;null!==t&&(e.alternate=null,Su(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&Me(t),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}var xu=null,Bu=!1;function Tu(e,t,n){for(n=n.child;null!==n;)Pu(e,t,n),n=n.sibling}function Pu(e,t,n){if(fe&&"function"==typeof fe.onCommitFiberUnmount)try{fe.onCommitFiberUnmount(ce,n)}catch(e){}switch(n.tag){case 26:Au||fu(n,t),Tu(e,t,n),n.memoizedState?n.memoizedState.count--:n.stateNode&&(n=n.stateNode).parentNode.removeChild(n);break;case 27:Au||fu(n,t);var r=xu,a=Bu;mf(n.type)&&(xu=n.stateNode,Bu=!1),Tu(e,t,n),wf(n.stateNode),xu=r,Bu=a;break;case 5:Au||fu(n,t);case 6:if(r=xu,a=Bu,xu=null,Tu(e,t,n),Bu=a,null!==(xu=r))if(Bu)try{(9===xu.nodeType?xu.body:"HTML"===xu.nodeName?xu.ownerDocument.body:xu).removeChild(n.stateNode)}catch(e){cc(n,t,e)}else try{xu.removeChild(n.stateNode)}catch(e){cc(n,t,e)}break;case 18:null!==xu&&(Bu?(hf(9===(e=xu).nodeType?e.body:"HTML"===e.nodeName?e.ownerDocument.body:e,n.stateNode),Td(e)):hf(xu,n.stateNode));break;case 4:r=xu,a=Bu,xu=n.stateNode.containerInfo,Bu=!0,Tu(e,t,n),xu=r,Bu=a;break;case 0:case 11:case 14:case 15:Au||iu(2,n,t),Au||iu(4,n,t),Tu(e,t,n);break;case 1:Au||(fu(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount&&su(n,t,r)),Tu(e,t,n);break;case 21:Tu(e,t,n);break;case 22:Au=(r=Au)||null!==n.memoizedState,Tu(e,t,n),Au=r;break;default:Tu(e,t,n)}}function Ou(e,t){if(null===t.memoizedState&&null!==(e=t.alternate)&&null!==(e=e.memoizedState)&&null!==(e=e.dehydrated))try{Td(e)}catch(e){cc(t,t.return,e)}}function Ru(e,t){var n=function(e){switch(e.tag){case 13:case 19:var t=e.stateNode;return null===t&&(t=e.stateNode=new wu),t;case 22:return null===(t=(e=e.stateNode)._retryCache)&&(t=e._retryCache=new wu),t;default:throw Error(l(435,e.tag))}}(e);t.forEach(function(t){var r=hc.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))})}function Nu(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var a=n[r],o=e,i=t,u=i;e:for(;null!==u;){switch(u.tag){case 27:if(mf(u.type)){xu=u.stateNode,Bu=!1;break e}break;case 5:xu=u.stateNode,Bu=!1;break e;case 3:case 4:xu=u.stateNode.containerInfo,Bu=!0;break e}u=u.return}if(null===xu)throw Error(l(160));Pu(o,i,a),xu=null,Bu=!1,null!==(o=a.alternate)&&(o.return=null),a.return=null}if(13878&t.subtreeFlags)for(t=t.child;null!==t;)zu(t,e),t=t.sibling}var _u=null;function zu(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:Nu(t,e),Lu(e),4&r&&(iu(3,e,e.return),lu(3,e),iu(5,e,e.return));break;case 1:Nu(t,e),Lu(e),512&r&&(Au||null===n||fu(n,n.return)),64&r&&vu&&null!==(e=e.updateQueue)&&null!==(r=e.callbacks)&&(n=e.shared.hiddenCallbacks,e.shared.hiddenCallbacks=null===n?r:n.concat(r));break;case 26:var a=_u;if(Nu(t,e),Lu(e),512&r&&(Au||null===n||fu(n,n.return)),4&r){var o=null!==n?n.memoizedState:null;if(r=e.memoizedState,null===n)if(null===r)if(null===e.stateNode){e:{r=e.type,n=e.memoizedProps,a=a.ownerDocument||a;t:switch(r){case"title":(!(o=a.getElementsByTagName("title")[0])||o[Ie]||o[Ne]||"http://www.w3.org/2000/svg"===o.namespaceURI||o.hasAttribute("itemprop"))&&(o=a.createElement(r),a.head.insertBefore(o,a.querySelector("head > title"))),ef(o,r,n),o[Ne]=e,qe(o),r=o;break e;case"link":var i=Mf("link","href",a).get(r+(n.href||""));if(i)for(var u=0;u<i.length;u++)if((o=i[u]).getAttribute("href")===(null==n.href||""===n.href?null:n.href)&&o.getAttribute("rel")===(null==n.rel?null:n.rel)&&o.getAttribute("title")===(null==n.title?null:n.title)&&o.getAttribute("crossorigin")===(null==n.crossOrigin?null:n.crossOrigin)){i.splice(u,1);break t}ef(o=a.createElement(r),r,n),a.head.appendChild(o);break;case"meta":if(i=Mf("meta","content",a).get(r+(n.content||"")))for(u=0;u<i.length;u++)if((o=i[u]).getAttribute("content")===(null==n.content?null:""+n.content)&&o.getAttribute("name")===(null==n.name?null:n.name)&&o.getAttribute("property")===(null==n.property?null:n.property)&&o.getAttribute("http-equiv")===(null==n.httpEquiv?null:n.httpEquiv)&&o.getAttribute("charset")===(null==n.charSet?null:n.charSet)){i.splice(u,1);break t}ef(o=a.createElement(r),r,n),a.head.appendChild(o);break;default:throw Error(l(468,r))}o[Ne]=e,qe(o),r=o}e.stateNode=r}else Uf(a,e.type,e.stateNode);else e.stateNode=Lf(a,r,e.memoizedProps);else o!==r?(null===o?null!==n.stateNode&&(n=n.stateNode).parentNode.removeChild(n):o.count--,null===r?Uf(a,e.type,e.stateNode):Lf(a,r,e.memoizedProps)):null===r&&null!==e.stateNode&&pu(e,e.memoizedProps,n.memoizedProps)}break;case 27:Nu(t,e),Lu(e),512&r&&(Au||null===n||fu(n,n.return)),null!==n&&4&r&&pu(e,e.memoizedProps,n.memoizedProps);break;case 5:if(Nu(t,e),Lu(e),512&r&&(Au||null===n||fu(n,n.return)),32&e.flags){a=e.stateNode;try{wt(a,"")}catch(t){cc(e,e.return,t)}}4&r&&null!=e.stateNode&&pu(e,a=e.memoizedProps,null!==n?n.memoizedProps:a),1024&r&&(Eu=!0);break;case 6:if(Nu(t,e),Lu(e),4&r){if(null===e.stateNode)throw Error(l(162));r=e.memoizedProps,n=e.stateNode;try{n.nodeValue=r}catch(t){cc(e,e.return,t)}}break;case 3:if(If=null,a=_u,_u=Sf(t.containerInfo),Nu(t,e),_u=a,Lu(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{Td(t.containerInfo)}catch(t){cc(e,e.return,t)}Eu&&(Eu=!1,Du(e));break;case 4:r=_u,_u=Sf(e.stateNode.containerInfo),Nu(t,e),Lu(e),_u=r;break;case 12:default:Nu(t,e),Lu(e);break;case 13:Nu(t,e),Lu(e),8192&e.child.flags&&null!==e.memoizedState!=(null!==n&&null!==n.memoizedState)&&(Es=te()),4&r&&null!==(r=e.updateQueue)&&(e.updateQueue=null,Ru(e,r));break;case 22:a=null!==e.memoizedState;var s=null!==n&&null!==n.memoizedState,c=vu,f=Au;if(vu=c||a,Au=f||s,Nu(t,e),Au=f,vu=c,Lu(e),8192&r)e:for(t=e.stateNode,t._visibility=a?-2&t._visibility:1|t._visibility,a&&(null===n||s||vu||Au||Fu(e)),n=null,t=e;;){if(5===t.tag||26===t.tag){if(null===n){s=n=t;try{if(o=s.stateNode,a)"function"==typeof(i=o.style).setProperty?i.setProperty("display","none","important"):i.display="none";else{u=s.stateNode;var d=s.memoizedProps.style,p=null!=d&&d.hasOwnProperty("display")?d.display:null;u.style.display=null==p||"boolean"==typeof p?"":(""+p).trim()}}catch(e){cc(s,s.return,e)}}}else if(6===t.tag){if(null===n){s=t;try{s.stateNode.nodeValue=a?"":s.memoizedProps}catch(e){cc(s,s.return,e)}}}else if((22!==t.tag&&23!==t.tag||null===t.memoizedState||t===e)&&null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break e;for(;null===t.sibling;){if(null===t.return||t.return===e)break e;n===t&&(n=null),t=t.return}n===t&&(n=null),t.sibling.return=t.return,t=t.sibling}4&r&&null!==(r=e.updateQueue)&&null!==(n=r.retryQueue)&&(r.retryQueue=null,Ru(e,n));break;case 19:Nu(t,e),Lu(e),4&r&&null!==(r=e.updateQueue)&&(e.updateQueue=null,Ru(e,r));case 30:case 21:}}function Lu(e){var t=e.flags;if(2&t){try{for(var n,r=e.return;null!==r;){if(mu(r)){n=r;break}r=r.return}if(null==n)throw Error(l(160));switch(n.tag){case 27:var a=n.stateNode;yu(e,hu(e),a);break;case 5:var o=n.stateNode;32&n.flags&&(wt(o,""),n.flags&=-33),yu(e,hu(e),o);break;case 3:case 4:var i=n.stateNode.containerInfo;gu(e,hu(e),i);break;default:throw Error(l(161))}}catch(t){cc(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function Du(e){if(1024&e.subtreeFlags)for(e=e.child;null!==e;){var t=e;Du(t),5===t.tag&&1024&t.flags&&t.stateNode.reset(),e=e.sibling}}function ju(e,t){if(8772&t.subtreeFlags)for(t=t.child;null!==t;)Cu(e,t.alternate,t),t=t.sibling}function Fu(e){for(e=e.child;null!==e;){var t=e;switch(t.tag){case 0:case 11:case 14:case 15:iu(4,t,t.return),Fu(t);break;case 1:fu(t,t.return);var n=t.stateNode;"function"==typeof n.componentWillUnmount&&su(t,t.return,n),Fu(t);break;case 27:wf(t.stateNode);case 26:case 5:fu(t,t.return),Fu(t);break;case 22:null===t.memoizedState&&Fu(t);break;default:Fu(t)}e=e.sibling}}function Iu(e,t,n){for(n=n&&!!(8772&t.subtreeFlags),t=t.child;null!==t;){var r=t.alternate,a=e,o=t,l=o.flags;switch(o.tag){case 0:case 11:case 15:Iu(a,o,n),lu(4,o);break;case 1:if(Iu(a,o,n),"function"==typeof(a=(r=o).stateNode).componentDidMount)try{a.componentDidMount()}catch(e){cc(r,r.return,e)}if(null!==(a=(r=o).updateQueue)){var i=r.stateNode;try{var u=a.shared.hiddenCallbacks;if(null!==u)for(a.shared.hiddenCallbacks=null,a=0;a<u.length;a++)fo(u[a],i)}catch(e){cc(r,r.return,e)}}n&&64&l&&uu(o),cu(o,o.return);break;case 27:bu(o);case 26:case 5:Iu(a,o,n),n&&null===r&&4&l&&du(o),cu(o,o.return);break;case 12:Iu(a,o,n);break;case 13:Iu(a,o,n),n&&4&l&&Ou(a,o);break;case 22:null===o.memoizedState&&Iu(a,o,n),cu(o,o.return);break;case 30:break;default:Iu(a,o,n)}t=t.sibling}}function Mu(e,t){var n=null;null!==e&&null!==e.memoizedState&&null!==e.memoizedState.cachePool&&(n=e.memoizedState.cachePool.pool),e=null,null!==t.memoizedState&&null!==t.memoizedState.cachePool&&(e=t.memoizedState.cachePool.pool),e!==n&&(null!=e&&e.refCount++,null!=n&&za(n))}function Uu(e,t){e=null,null!==t.alternate&&(e=t.alternate.memoizedState.cache),(t=t.memoizedState.cache)!==e&&(t.refCount++,null!=e&&za(e))}function $u(e,t,n,r){if(10256&t.subtreeFlags)for(t=t.child;null!==t;)Wu(e,t,n,r),t=t.sibling}function Wu(e,t,n,r){var a=t.flags;switch(t.tag){case 0:case 11:case 15:$u(e,t,n,r),2048&a&&lu(9,t);break;case 1:case 13:default:$u(e,t,n,r);break;case 3:$u(e,t,n,r),2048&a&&(e=null,null!==t.alternate&&(e=t.alternate.memoizedState.cache),(t=t.memoizedState.cache)!==e&&(t.refCount++,null!=e&&za(e)));break;case 12:if(2048&a){$u(e,t,n,r),e=t.stateNode;try{var o=t.memoizedProps,l=o.id,i=o.onPostCommit;"function"==typeof i&&i(l,null===t.alternate?"mount":"update",e.passiveEffectDuration,-0)}catch(e){cc(t,t.return,e)}}else $u(e,t,n,r);break;case 23:break;case 22:o=t.stateNode,l=t.alternate,null!==t.memoizedState?2&o._visibility?$u(e,t,n,r):qu(e,t):2&o._visibility?$u(e,t,n,r):(o._visibility|=2,Hu(e,t,n,r,!!(10256&t.subtreeFlags))),2048&a&&Mu(l,t);break;case 24:$u(e,t,n,r),2048&a&&Uu(t.alternate,t)}}function Hu(e,t,n,r,a){for(a=a&&!!(10256&t.subtreeFlags),t=t.child;null!==t;){var o=e,l=t,i=n,u=r,s=l.flags;switch(l.tag){case 0:case 11:case 15:Hu(o,l,i,u,a),lu(8,l);break;case 23:break;case 22:var c=l.stateNode;null!==l.memoizedState?2&c._visibility?Hu(o,l,i,u,a):qu(o,l):(c._visibility|=2,Hu(o,l,i,u,a)),a&&2048&s&&Mu(l.alternate,l);break;case 24:Hu(o,l,i,u,a),a&&2048&s&&Uu(l.alternate,l);break;default:Hu(o,l,i,u,a)}t=t.sibling}}function qu(e,t){if(10256&t.subtreeFlags)for(t=t.child;null!==t;){var n=e,r=t,a=r.flags;switch(r.tag){case 22:qu(n,r),2048&a&&Mu(r.alternate,r);break;case 24:qu(n,r),2048&a&&Uu(r.alternate,r);break;default:qu(n,r)}t=t.sibling}}var Vu=8192;function Yu(e){if(e.subtreeFlags&Vu)for(e=e.child;null!==e;)Gu(e),e=e.sibling}function Gu(e){switch(e.tag){case 26:Yu(e),e.flags&Vu&&null!==e.memoizedState&&function(e,t,n){if(null===Wf)throw Error(l(475));var r=Wf;if(!("stylesheet"!==t.type||"string"==typeof n.media&&!1===matchMedia(n.media).matches||4&t.state.loading)){if(null===t.instance){var a=Of(n.href),o=e.querySelector(Rf(a));if(o)return null!==(e=o._p)&&"object"==typeof e&&"function"==typeof e.then&&(r.count++,r=qf.bind(r),e.then(r,r)),t.state.loading|=4,t.instance=o,void qe(o);o=e.ownerDocument||e,n=Nf(n),(a=kf.get(a))&&jf(n,a),qe(o=o.createElement("link"));var i=o;i._p=new Promise(function(e,t){i.onload=e,i.onerror=t}),ef(o,"link",n),t.instance=o}null===r.stylesheets&&(r.stylesheets=new Map),r.stylesheets.set(t,e),(e=t.state.preload)&&!(3&t.state.loading)&&(r.count++,t=qf.bind(r),e.addEventListener("load",t),e.addEventListener("error",t))}}(_u,e.memoizedState,e.memoizedProps);break;case 5:default:Yu(e);break;case 3:case 4:var t=_u;_u=Sf(e.stateNode.containerInfo),Yu(e),_u=t;break;case 22:null===e.memoizedState&&(null!==(t=e.alternate)&&null!==t.memoizedState?(t=Vu,Vu=16777216,Yu(e),Vu=t):Yu(e))}}function Ku(e){var t=e.alternate;if(null!==t&&null!==(e=t.child)){t.child=null;do{t=e.sibling,e.sibling=null,e=t}while(null!==e)}}function Qu(e){var t=e.deletions;if(16&e.flags){if(null!==t)for(var n=0;n<t.length;n++){var r=t[n];ku=r,Zu(r,e)}Ku(e)}if(10256&e.subtreeFlags)for(e=e.child;null!==e;)Xu(e),e=e.sibling}function Xu(e){switch(e.tag){case 0:case 11:case 15:Qu(e),2048&e.flags&&iu(9,e,e.return);break;case 3:case 12:default:Qu(e);break;case 22:var t=e.stateNode;null!==e.memoizedState&&2&t._visibility&&(null===e.return||13!==e.return.tag)?(t._visibility&=-3,Ju(e)):Qu(e)}}function Ju(e){var t=e.deletions;if(16&e.flags){if(null!==t)for(var n=0;n<t.length;n++){var r=t[n];ku=r,Zu(r,e)}Ku(e)}for(e=e.child;null!==e;){switch((t=e).tag){case 0:case 11:case 15:iu(8,t,t.return),Ju(t);break;case 22:2&(n=t.stateNode)._visibility&&(n._visibility&=-3,Ju(t));break;default:Ju(t)}e=e.sibling}}function Zu(e,t){for(;null!==ku;){var n=ku;switch(n.tag){case 0:case 11:case 15:iu(8,n,t);break;case 23:case 22:if(null!==n.memoizedState&&null!==n.memoizedState.cachePool){var r=n.memoizedState.cachePool.pool;null!=r&&r.refCount++}break;case 24:za(n.memoizedState.cache)}if(null!==(r=n.child))r.return=n,ku=r;else e:for(n=e;null!==ku;){var a=(r=ku).sibling,o=r.return;if(Su(r),r===n){ku=null;break e}if(null!==a){a.return=o,ku=a;break e}ku=o}}}var es={getCacheForType:function(e){var t=xa(Na),n=t.data.get(e);return void 0===n&&(n=e(),t.data.set(e,n)),n}},ts="function"==typeof WeakMap?WeakMap:Map,ns=0,rs=null,as=null,os=0,ls=0,is=null,us=!1,ss=!1,cs=!1,fs=0,ds=0,ps=0,ms=0,hs=0,gs=0,ys=0,bs=null,vs=null,As=!1,Es=0,ws=1/0,ks=null,Cs=null,Ss=0,xs=null,Bs=null,Ts=0,Ps=0,Os=null,Rs=null,Ns=0,_s=null;function zs(){return 2&ns&&0!==os?os&-os:null!==z.T?0!==ja?ja:Pc():Oe()}function Ls(){0===gs&&(gs=536870912&os&&!oa?536870912:we());var e=ai.current;return null!==e&&(e.flags|=32),gs}function Ds(e,t,n){(e!==rs||2!==ls&&9!==ls)&&null===e.cancelPendingCommit||(Ws(e,0),Ms(e,os,gs,!1)),Se(e,n),2&ns&&e===rs||(e===rs&&(!(2&ns)&&(ms|=n),4===ds&&Ms(e,os,gs,!1)),wc(e))}function js(e,t,n){if(6&ns)throw Error(l(327));for(var r=!n&&!(124&t)&&0===(t&e.expiredLanes)||Ae(e,t),a=r?function(e,t){var n=ns;ns|=2;var r=qs(),a=Vs();rs!==e||os!==t?(ks=null,ws=te()+500,Ws(e,t)):ss=Ae(e,t);e:for(;;)try{if(0!==ls&&null!==as){t=as;var o=is;t:switch(ls){case 1:ls=0,is=null,Zs(e,t,o,1);break;case 2:case 9:if(Ka(o)){ls=0,is=null,Js(t);break}t=function(){2!==ls&&9!==ls||rs!==e||(ls=7),wc(e)},o.then(t,t);break e;case 3:ls=7;break e;case 4:ls=5;break e;case 7:Ka(o)?(ls=0,is=null,Js(t)):(ls=0,is=null,Zs(e,t,o,7));break;case 5:var i=null;switch(as.tag){case 26:i=as.memoizedState;case 5:case 27:var u=as;if(!i||$f(i)){ls=0,is=null;var s=u.sibling;if(null!==s)as=s;else{var c=u.return;null!==c?(as=c,ec(c)):as=null}break t}}ls=0,is=null,Zs(e,t,o,5);break;case 6:ls=0,is=null,Zs(e,t,o,6);break;case 8:$s(),ds=6;break e;default:throw Error(l(462))}}Qs();break}catch(t){Hs(e,t)}return ba=ya=null,z.H=r,z.A=a,ns=n,null!==as?0:(rs=null,os=0,Tr(),ds)}(e,t):Gs(e,t,!0),o=r;;){if(0===a){ss&&!r&&Ms(e,t,0,!1);break}if(n=e.current.alternate,!o||Is(n)){if(2===a){if(o=t,e.errorRecoveryDisabledLanes&o)var i=0;else i=0!=(i=-536870913&e.pendingLanes)?i:536870912&i?536870912:0;if(0!==i){t=i;e:{var u=e;a=bs;var s=u.current.memoizedState.isDehydrated;if(s&&(Ws(u,i).flags|=256),2!==(i=Gs(u,i,!1))){if(cs&&!s){u.errorRecoveryDisabledLanes|=o,ms|=o,a=4;break e}o=vs,vs=a,null!==o&&(null===vs?vs=o:vs.push.apply(vs,o))}a=i}if(o=!1,2!==a)continue}}if(1===a){Ws(e,0),Ms(e,t,0,!0);break}e:{switch(r=e,o=a){case 0:case 1:throw Error(l(345));case 4:if((4194048&t)!==t)break;case 6:Ms(r,t,gs,!us);break e;case 2:vs=null;break;case 3:case 5:break;default:throw Error(l(329))}if((62914560&t)===t&&10<(a=Es+300-te())){if(Ms(r,t,gs,!us),0!==ve(r,0,!0))break e;r.timeoutHandle=sf(Fs.bind(null,r,n,vs,ks,As,t,gs,ms,ys,us,o,2,-0,0),a)}else Fs(r,n,vs,ks,As,t,gs,ms,ys,us,o,0,-0,0)}break}a=Gs(e,t,!1),o=!1}wc(e)}function Fs(e,t,n,r,a,o,i,u,s,c,f,d,p,m){if(e.timeoutHandle=-1,(8192&(d=t.subtreeFlags)||!(16785408&~d))&&(Wf={stylesheets:null,count:0,unsuspend:Hf},Gu(t),null!==(d=function(){if(null===Wf)throw Error(l(475));var e=Wf;return e.stylesheets&&0===e.count&&Yf(e,e.stylesheets),0<e.count?function(t){var n=setTimeout(function(){if(e.stylesheets&&Yf(e,e.stylesheets),e.unsuspend){var t=e.unsuspend;e.unsuspend=null,t()}},6e4);return e.unsuspend=t,function(){e.unsuspend=null,clearTimeout(n)}}:null}())))return e.cancelPendingCommit=d(nc.bind(null,e,t,o,n,r,a,i,u,s,f,1,p,m)),void Ms(e,o,i,!c);nc(e,t,o,n,r,a,i,u,s)}function Is(e){for(var t=e;;){var n=t.tag;if((0===n||11===n||15===n)&&16384&t.flags&&null!==(n=t.updateQueue)&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var a=n[r],o=a.getSnapshot;a=a.value;try{if(!Kn(o(),a))return!1}catch(e){return!1}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}function Ms(e,t,n,r){t&=~hs,t&=~ms,e.suspendedLanes|=t,e.pingedLanes&=~t,r&&(e.warmLanes|=t),r=e.expirationTimes;for(var a=t;0<a;){var o=31-pe(a),l=1<<o;r[o]=-1,a&=~l}0!==n&&xe(e,n,t)}function Us(){return!!(6&ns)||(kc(0,!1),!1)}function $s(){if(null!==as){if(0===ls)var e=as.return;else ba=ya=null,Fo(e=as),Kl=null,Ql=0,e=as;for(;null!==e;)ou(e.alternate,e),e=e.return;as=null}}function Ws(e,t){var n=e.timeoutHandle;-1!==n&&(e.timeoutHandle=-1,cf(n)),null!==(n=e.cancelPendingCommit)&&(e.cancelPendingCommit=null,n()),$s(),rs=e,as=n=Fr(e.current,null),os=t,ls=0,is=null,us=!1,ss=Ae(e,t),cs=!1,ys=gs=hs=ms=ps=ds=0,vs=bs=null,As=!1,8&t&&(t|=32&t);var r=e.entangledLanes;if(0!==r)for(e=e.entanglements,r&=t;0<r;){var a=31-pe(r),o=1<<a;t|=e[a],r&=~o}return fs=t,Tr(),n}function Hs(e,t){Ao=null,z.H=ql,t===qa||t===Ya?(t=Za(),ls=3):t===Va?(t=Za(),ls=4):ls=t===xi?8:null!==t&&"object"==typeof t&&"function"==typeof t.then?6:1,is=t,null===as&&(ds=1,Ei(e,Cr(t,e.current)))}function qs(){var e=z.H;return z.H=ql,null===e?ql:e}function Vs(){var e=z.A;return z.A=es,e}function Ys(){ds=4,us||(4194048&os)!==os&&null!==ai.current||(ss=!0),!(134217727&ps)&&!(134217727&ms)||null===rs||Ms(rs,os,gs,!1)}function Gs(e,t,n){var r=ns;ns|=2;var a=qs(),o=Vs();rs===e&&os===t||(ks=null,Ws(e,t)),t=!1;var l=ds;e:for(;;)try{if(0!==ls&&null!==as){var i=as,u=is;switch(ls){case 8:$s(),l=6;break e;case 3:case 2:case 9:case 6:null===ai.current&&(t=!0);var s=ls;if(ls=0,is=null,Zs(e,i,u,s),n&&ss){l=0;break e}break;default:s=ls,ls=0,is=null,Zs(e,i,u,s)}}Ks(),l=ds;break}catch(t){Hs(e,t)}return t&&e.shellSuspendCounter++,ba=ya=null,ns=r,z.H=a,z.A=o,null===as&&(rs=null,os=0,Tr()),l}function Ks(){for(;null!==as;)Xs(as)}function Qs(){for(;null!==as&&!Z();)Xs(as)}function Xs(e){var t=Xi(e.alternate,e,fs);e.memoizedProps=e.pendingProps,null===t?ec(e):as=t}function Js(e){var t=e,n=t.alternate;switch(t.tag){case 15:case 0:t=Di(n,t,t.pendingProps,t.type,void 0,os);break;case 11:t=Di(n,t,t.pendingProps,t.type.render,t.ref,os);break;case 5:Fo(t);default:ou(n,t),t=Xi(n,t=as=Ir(t,fs),fs)}e.memoizedProps=e.pendingProps,null===t?ec(e):as=t}function Zs(e,t,n,r){ba=ya=null,Fo(t),Kl=null,Ql=0;var a=t.return;try{if(function(e,t,n,r,a){if(n.flags|=32768,null!==r&&"object"==typeof r&&"function"==typeof r.then){if(null!==(t=n.alternate)&&ka(t,n,a,!0),null!==(n=ai.current)){switch(n.tag){case 13:return null===oi?Ys():null===n.alternate&&0===ds&&(ds=3),n.flags&=-257,n.flags|=65536,n.lanes=a,r===Ga?n.flags|=16384:(null===(t=n.updateQueue)?n.updateQueue=new Set([r]):t.add(r),fc(e,r,a)),!1;case 22:return n.flags|=65536,r===Ga?n.flags|=16384:(null===(t=n.updateQueue)?(t={transitions:null,markerInstances:null,retryQueue:new Set([r])},n.updateQueue=t):null===(n=t.retryQueue)?t.retryQueue=new Set([r]):n.add(r),fc(e,r,a)),!1}throw Error(l(435,n.tag))}return fc(e,r,a),Ys(),!1}if(oa)return null!==(t=ai.current)?(!(65536&t.flags)&&(t.flags|=256),t.flags|=65536,t.lanes=a,r!==ua&&ha(Cr(e=Error(l(422),{cause:r}),n))):(r!==ua&&ha(Cr(t=Error(l(423),{cause:r}),n)),(e=e.current.alternate).flags|=65536,a&=-a,e.lanes|=a,r=Cr(r,n),io(e,a=ki(e.stateNode,r,a)),4!==ds&&(ds=2)),!1;var o=Error(l(520),{cause:r});if(o=Cr(o,n),null===bs?bs=[o]:bs.push(o),4!==ds&&(ds=2),null===t)return!0;r=Cr(r,n),n=t;do{switch(n.tag){case 3:return n.flags|=65536,e=a&-a,n.lanes|=e,io(n,e=ki(n.stateNode,r,e)),!1;case 1:if(t=n.type,o=n.stateNode,!(128&n.flags||"function"!=typeof t.getDerivedStateFromError&&(null===o||"function"!=typeof o.componentDidCatch||null!==Cs&&Cs.has(o))))return n.flags|=65536,a&=-a,n.lanes|=a,Si(a=Ci(a),e,n,r),io(n,a),!1}n=n.return}while(null!==n);return!1}(e,a,t,n,os))return ds=1,Ei(e,Cr(n,e.current)),void(as=null)}catch(t){if(null!==a)throw as=a,t;return ds=1,Ei(e,Cr(n,e.current)),void(as=null)}32768&t.flags?(oa||1===r?e=!0:ss||536870912&os?e=!1:(us=e=!0,(2===r||9===r||3===r||6===r)&&null!==(r=ai.current)&&13===r.tag&&(r.flags|=16384)),tc(t,e)):ec(t)}function ec(e){var t=e;do{if(32768&t.flags)return void tc(t,us);e=t.return;var n=ru(t.alternate,t,fs);if(null!==n)return void(as=n);if(null!==(t=t.sibling))return void(as=t);as=t=e}while(null!==t);0===ds&&(ds=5)}function tc(e,t){do{var n=au(e.alternate,e);if(null!==n)return n.flags&=32767,void(as=n);if(null!==(n=e.return)&&(n.flags|=32768,n.subtreeFlags=0,n.deletions=null),!t&&null!==(e=e.sibling))return void(as=e);as=e=n}while(null!==e);ds=6,as=null}function nc(e,t,n,r,a,o,i,u,s){e.cancelPendingCommit=null;do{ic()}while(0!==Ss);if(6&ns)throw Error(l(327));if(null!==t){if(t===e.current)throw Error(l(177));if(o=t.lanes|t.childLanes,function(e,t,n,r,a,o){var l=e.pendingLanes;e.pendingLanes=n,e.suspendedLanes=0,e.pingedLanes=0,e.warmLanes=0,e.expiredLanes&=n,e.entangledLanes&=n,e.errorRecoveryDisabledLanes&=n,e.shellSuspendCounter=0;var i=e.entanglements,u=e.expirationTimes,s=e.hiddenUpdates;for(n=l&~n;0<n;){var c=31-pe(n),f=1<<c;i[c]=0,u[c]=-1;var d=s[c];if(null!==d)for(s[c]=null,c=0;c<d.length;c++){var p=d[c];null!==p&&(p.lane&=-536870913)}n&=~f}0!==r&&xe(e,r,0),0!==o&&0===a&&0!==e.tag&&(e.suspendedLanes|=o&~(l&~t))}(e,n,o|=Br,i,u,s),e===rs&&(as=rs=null,os=0),Bs=t,xs=e,Ts=n,Ps=o,Os=a,Rs=r,10256&t.subtreeFlags||10256&t.flags?(e.callbackNode=null,e.callbackPriority=0,X(oe,function(){return uc(),null})):(e.callbackNode=null,e.callbackPriority=0),r=!!(13878&t.flags),13878&t.subtreeFlags||r){r=z.T,z.T=null,a=L.p,L.p=2,i=ns,ns|=4;try{!function(e,t){if(e=e.containerInfo,tf=rd,tr(e=er(e))){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var a=r.anchorOffset,o=r.focusNode;r=r.focusOffset;try{n.nodeType,o.nodeType}catch(e){n=null;break e}var i=0,u=-1,s=-1,c=0,f=0,d=e,p=null;t:for(;;){for(var m;d!==n||0!==a&&3!==d.nodeType||(u=i+a),d!==o||0!==r&&3!==d.nodeType||(s=i+r),3===d.nodeType&&(i+=d.nodeValue.length),null!==(m=d.firstChild);)p=d,d=m;for(;;){if(d===e)break t;if(p===n&&++c===a&&(u=i),p===o&&++f===r&&(s=i),null!==(m=d.nextSibling))break;p=(d=p).parentNode}d=m}n=-1===u||-1===s?null:{start:u,end:s}}else n=null}n=n||{start:0,end:0}}else n=null;for(nf={focusedElem:e,selectionRange:n},rd=!1,ku=t;null!==ku;)if(e=(t=ku).child,1024&t.subtreeFlags&&null!==e)e.return=t,ku=e;else for(;null!==ku;){switch(o=(t=ku).alternate,e=t.flags,t.tag){case 0:case 11:case 15:case 5:case 26:case 27:case 6:case 4:case 17:break;case 1:if(1024&e&&null!==o){e=void 0,n=t,a=o.memoizedProps,o=o.memoizedState,r=n.stateNode;try{var h=gi(n.type,a,(n.elementType,n.type));e=r.getSnapshotBeforeUpdate(h,o),r.__reactInternalSnapshotBeforeUpdate=e}catch(e){cc(n,n.return,e)}}break;case 3:if(1024&e)if(9===(n=(e=t.stateNode.containerInfo).nodeType))gf(e);else if(1===n)switch(e.nodeName){case"HEAD":case"HTML":case"BODY":gf(e);break;default:e.textContent=""}break;default:if(1024&e)throw Error(l(163))}if(null!==(e=t.sibling)){e.return=t.return,ku=e;break}ku=t.return}}(e,t)}finally{ns=i,L.p=a,z.T=r}}Ss=1,rc(),ac(),oc()}}function rc(){if(1===Ss){Ss=0;var e=xs,t=Bs,n=!!(13878&t.flags);if(13878&t.subtreeFlags||n){n=z.T,z.T=null;var r=L.p;L.p=2;var a=ns;ns|=4;try{zu(t,e);var o=nf,l=er(e.containerInfo),i=o.focusedElem,u=o.selectionRange;if(l!==i&&i&&i.ownerDocument&&Zn(i.ownerDocument.documentElement,i)){if(null!==u&&tr(i)){var s=u.start,c=u.end;if(void 0===c&&(c=s),"selectionStart"in i)i.selectionStart=s,i.selectionEnd=Math.min(c,i.value.length);else{var f=i.ownerDocument||document,d=f&&f.defaultView||window;if(d.getSelection){var p=d.getSelection(),m=i.textContent.length,h=Math.min(u.start,m),g=void 0===u.end?h:Math.min(u.end,m);!p.extend&&h>g&&(l=g,g=h,h=l);var y=Jn(i,h),b=Jn(i,g);if(y&&b&&(1!==p.rangeCount||p.anchorNode!==y.node||p.anchorOffset!==y.offset||p.focusNode!==b.node||p.focusOffset!==b.offset)){var v=f.createRange();v.setStart(y.node,y.offset),p.removeAllRanges(),h>g?(p.addRange(v),p.extend(b.node,b.offset)):(v.setEnd(b.node,b.offset),p.addRange(v))}}}}for(f=[],p=i;p=p.parentNode;)1===p.nodeType&&f.push({element:p,left:p.scrollLeft,top:p.scrollTop});for("function"==typeof i.focus&&i.focus(),i=0;i<f.length;i++){var A=f[i];A.element.scrollLeft=A.left,A.element.scrollTop=A.top}}rd=!!tf,nf=tf=null}finally{ns=a,L.p=r,z.T=n}}e.current=t,Ss=2}}function ac(){if(2===Ss){Ss=0;var e=xs,t=Bs,n=!!(8772&t.flags);if(8772&t.subtreeFlags||n){n=z.T,z.T=null;var r=L.p;L.p=2;var a=ns;ns|=4;try{Cu(e,t.alternate,t)}finally{ns=a,L.p=r,z.T=n}}Ss=3}}function oc(){if(4===Ss||3===Ss){Ss=0,ee();var e=xs,t=Bs,n=Ts,r=Rs;10256&t.subtreeFlags||10256&t.flags?Ss=5:(Ss=0,Bs=xs=null,lc(e,e.pendingLanes));var a=e.pendingLanes;if(0===a&&(Cs=null),Pe(n),t=t.stateNode,fe&&"function"==typeof fe.onCommitFiberRoot)try{fe.onCommitFiberRoot(ce,t,void 0,!(128&~t.current.flags))}catch(e){}if(null!==r){t=z.T,a=L.p,L.p=2,z.T=null;try{for(var o=e.onRecoverableError,l=0;l<r.length;l++){var i=r[l];o(i.value,{componentStack:i.stack})}}finally{z.T=t,L.p=a}}3&Ts&&ic(),wc(e),a=e.pendingLanes,4194090&n&&42&a?e===_s?Ns++:(Ns=0,_s=e):Ns=0,kc(0,!1)}}function lc(e,t){0===(e.pooledCacheLanes&=t)&&null!=(t=e.pooledCache)&&(e.pooledCache=null,za(t))}function ic(e){return rc(),ac(),oc(),uc()}function uc(){if(5!==Ss)return!1;var e=xs,t=Ps;Ps=0;var n=Pe(Ts),r=z.T,a=L.p;try{L.p=32>n?32:n,z.T=null,n=Os,Os=null;var o=xs,i=Ts;if(Ss=0,Bs=xs=null,Ts=0,6&ns)throw Error(l(331));var u=ns;if(ns|=4,Xu(o.current),Wu(o,o.current,i,n),ns=u,kc(0,!1),fe&&"function"==typeof fe.onPostCommitFiberRoot)try{fe.onPostCommitFiberRoot(ce,o)}catch(e){}return!0}finally{L.p=a,z.T=r,lc(e,t)}}function sc(e,t,n){t=Cr(n,t),null!==(e=oo(e,t=ki(e.stateNode,t,2),2))&&(Se(e,2),wc(e))}function cc(e,t,n){if(3===e.tag)sc(e,e,n);else for(;null!==t;){if(3===t.tag){sc(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Cs||!Cs.has(r))){e=Cr(n,e),null!==(r=oo(t,n=Ci(2),2))&&(Si(n,r,t,e),Se(r,2),wc(r));break}}t=t.return}}function fc(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new ts;var a=new Set;r.set(t,a)}else void 0===(a=r.get(t))&&(a=new Set,r.set(t,a));a.has(n)||(cs=!0,a.add(n),e=dc.bind(null,e,t,n),t.then(e,e))}function dc(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),e.pingedLanes|=e.suspendedLanes&n,e.warmLanes&=~n,rs===e&&(os&n)===n&&(4===ds||3===ds&&(62914560&os)===os&&300>te()-Es?!(2&ns)&&Ws(e,0):hs|=n,ys===os&&(ys=0)),wc(e)}function pc(e,t){0===t&&(t=ke()),null!==(e=Rr(e,t))&&(Se(e,t),wc(e))}function mc(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),pc(e,n)}function hc(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,a=e.memoizedState;null!==a&&(n=a.retryLane);break;case 19:r=e.stateNode;break;case 22:r=e.stateNode._retryCache;break;default:throw Error(l(314))}null!==r&&r.delete(t),pc(e,n)}var gc=null,yc=null,bc=!1,vc=!1,Ac=!1,Ec=0;function wc(e){e!==yc&&null===e.next&&(null===yc?gc=yc=e:yc=yc.next=e),vc=!0,bc||(bc=!0,df(function(){6&ns?X(re,Cc):Sc()}))}function kc(e,t){if(!Ac&&vc){Ac=!0;do{for(var n=!1,r=gc;null!==r;){if(!t)if(0!==e){var a=r.pendingLanes;if(0===a)var o=0;else{var l=r.suspendedLanes,i=r.pingedLanes;o=(1<<31-pe(42|e)+1)-1,o=201326741&(o&=a&~(l&~i))?201326741&o|1:o?2|o:0}0!==o&&(n=!0,Tc(r,o))}else o=os,!(3&(o=ve(r,r===rs?o:0,null!==r.cancelPendingCommit||-1!==r.timeoutHandle)))||Ae(r,o)||(n=!0,Tc(r,o));r=r.next}}while(n);Ac=!1}}function Cc(){Sc()}function Sc(){vc=bc=!1;var e,t=0;0!==Ec&&(((e=window.event)&&"popstate"===e.type?e!==uf&&(uf=e,!0):(uf=null,!1))&&(t=Ec),Ec=0);for(var n=te(),r=null,a=gc;null!==a;){var o=a.next,l=xc(a,n);0===l?(a.next=null,null===r?gc=o:r.next=o,null===o&&(yc=r)):(r=a,(0!==t||3&l)&&(vc=!0)),a=o}kc(t,!1)}function xc(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,a=e.expirationTimes,o=-62914561&e.pendingLanes;0<o;){var l=31-pe(o),i=1<<l,u=a[l];-1===u?0!==(i&n)&&0===(i&r)||(a[l]=Ee(i,t)):u<=t&&(e.expiredLanes|=i),o&=~i}if(n=os,n=ve(e,e===(t=rs)?n:0,null!==e.cancelPendingCommit||-1!==e.timeoutHandle),r=e.callbackNode,0===n||e===t&&(2===ls||9===ls)||null!==e.cancelPendingCommit)return null!==r&&null!==r&&J(r),e.callbackNode=null,e.callbackPriority=0;if(!(3&n)||Ae(e,n)){if((t=n&-n)===e.callbackPriority)return t;switch(null!==r&&J(r),Pe(n)){case 2:case 8:n=ae;break;case 32:default:n=oe;break;case 268435456:n=ie}return r=Bc.bind(null,e),n=X(n,r),e.callbackPriority=t,e.callbackNode=n,t}return null!==r&&null!==r&&J(r),e.callbackPriority=2,e.callbackNode=null,2}function Bc(e,t){if(0!==Ss&&5!==Ss)return e.callbackNode=null,e.callbackPriority=0,null;var n=e.callbackNode;if(ic()&&e.callbackNode!==n)return null;var r=os;return 0===(r=ve(e,e===rs?r:0,null!==e.cancelPendingCommit||-1!==e.timeoutHandle))?null:(js(e,r,t),xc(e,te()),null!=e.callbackNode&&e.callbackNode===n?Bc.bind(null,e):null)}function Tc(e,t){if(ic())return null;js(e,t,!0)}function Pc(){return 0===Ec&&(Ec=we()),Ec}function Oc(e){return null==e||"symbol"==typeof e||"boolean"==typeof e?null:"function"==typeof e?e:Pt(""+e)}function Rc(e,t){var n=t.ownerDocument.createElement("input");return n.name=t.name,n.value=t.value,e.id&&n.setAttribute("form",e.id),t.parentNode.insertBefore(n,t),e=new FormData(e),n.parentNode.removeChild(n),e}for(var Nc=0;Nc<Er.length;Nc++){var _c=Er[Nc];wr(_c.toLowerCase(),"on"+(_c[0].toUpperCase()+_c.slice(1)))}wr(pr,"onAnimationEnd"),wr(mr,"onAnimationIteration"),wr(hr,"onAnimationStart"),wr("dblclick","onDoubleClick"),wr("focusin","onFocus"),wr("focusout","onBlur"),wr(gr,"onTransitionRun"),wr(yr,"onTransitionStart"),wr(br,"onTransitionCancel"),wr(vr,"onTransitionEnd"),Ke("onMouseEnter",["mouseout","mouseover"]),Ke("onMouseLeave",["mouseout","mouseover"]),Ke("onPointerEnter",["pointerout","pointerover"]),Ke("onPointerLeave",["pointerout","pointerover"]),Ge("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),Ge("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),Ge("onBeforeInput",["compositionend","keypress","textInput","paste"]),Ge("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),Ge("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),Ge("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var zc="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Lc=new Set("beforetoggle cancel close invalid load scroll scrollend toggle".split(" ").concat(zc));function Dc(e,t){t=!!(4&t);for(var n=0;n<e.length;n++){var r=e[n],a=r.event;r=r.listeners;e:{var o=void 0;if(t)for(var l=r.length-1;0<=l;l--){var i=r[l],u=i.instance,s=i.currentTarget;if(i=i.listener,u!==o&&a.isPropagationStopped())break e;o=i,a.currentTarget=s;try{o(a)}catch(e){yi(e)}a.currentTarget=null,o=u}else for(l=0;l<r.length;l++){if(u=(i=r[l]).instance,s=i.currentTarget,i=i.listener,u!==o&&a.isPropagationStopped())break e;o=i,a.currentTarget=s;try{o(a)}catch(e){yi(e)}a.currentTarget=null,o=u}}}}function jc(e,t){var n=t[Le];void 0===n&&(n=t[Le]=new Set);var r=e+"__bubble";n.has(r)||(Uc(t,e,2,!1),n.add(r))}function Fc(e,t,n){var r=0;t&&(r|=4),Uc(n,e,r,t)}var Ic="_reactListening"+Math.random().toString(36).slice(2);function Mc(e){if(!e[Ic]){e[Ic]=!0,Ve.forEach(function(t){"selectionchange"!==t&&(Lc.has(t)||Fc(t,!1,e),Fc(t,!0,e))});var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Ic]||(t[Ic]=!0,Fc("selectionchange",!1,t))}}function Uc(e,t,n,r){switch(cd(t)){case 2:var a=ad;break;case 8:a=od;break;default:a=ld}n=a.bind(null,t,n,e),a=void 0,!It||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(a=!0),r?void 0!==a?e.addEventListener(t,n,{capture:!0,passive:a}):e.addEventListener(t,n,!0):void 0!==a?e.addEventListener(t,n,{passive:a}):e.addEventListener(t,n,!1)}function $c(e,t,n,r,a){var o=r;if(!(1&t||2&t||null===r))e:for(;;){if(null===r)return;var l=r.tag;if(3===l||4===l){var i=r.stateNode.containerInfo;if(i===a)break;if(4===l)for(l=r.return;null!==l;){var s=l.tag;if((3===s||4===s)&&l.stateNode.containerInfo===a)return;l=l.return}for(;null!==i;){if(null===(l=Ue(i)))return;if(5===(s=l.tag)||6===s||26===s||27===s){r=o=l;continue e}i=i.parentNode}}r=r.return}Dt(function(){var r=o,a=Rt(n),l=[];e:{var i=Ar.get(e);if(void 0!==i){var s=Zt,c=e;switch(e){case"keypress":if(0===qt(n))break e;case"keydown":case"keyup":s=hn;break;case"focusin":c="focus",s=on;break;case"focusout":c="blur",s=on;break;case"beforeblur":case"afterblur":s=on;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":s=rn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":s=an;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":s=yn;break;case pr:case mr:case hr:s=ln;break;case vr:s=bn;break;case"scroll":case"scrollend":s=tn;break;case"wheel":s=vn;break;case"copy":case"cut":case"paste":s=un;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":s=gn;break;case"toggle":case"beforetoggle":s=An}var f=!!(4&t),d=!f&&("scroll"===e||"scrollend"===e),p=f?null!==i?i+"Capture":null:i;f=[];for(var m,h=r;null!==h;){var g=h;if(m=g.stateNode,5!==(g=g.tag)&&26!==g&&27!==g||null===m||null===p||null!=(g=jt(h,p))&&f.push(Wc(h,g,m)),d)break;h=h.return}0<f.length&&(i=new s(i,c,null,n,a),l.push({event:i,listeners:f}))}}if(!(7&t)){if(s="mouseout"===e||"pointerout"===e,(!(i="mouseover"===e||"pointerover"===e)||n===Ot||!(c=n.relatedTarget||n.fromElement)||!Ue(c)&&!c[ze])&&(s||i)&&(i=a.window===a?a:(i=a.ownerDocument)?i.defaultView||i.parentWindow:window,s?(s=r,null!==(c=(c=n.relatedTarget||n.toElement)?Ue(c):null)&&(d=u(c),f=c.tag,c!==d||5!==f&&27!==f&&6!==f)&&(c=null)):(s=null,c=r),s!==c)){if(f=rn,g="onMouseLeave",p="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(f=gn,g="onPointerLeave",p="onPointerEnter",h="pointer"),d=null==s?i:We(s),m=null==c?i:We(c),(i=new f(g,h+"leave",s,n,a)).target=d,i.relatedTarget=m,g=null,Ue(a)===r&&((f=new f(p,h+"enter",c,n,a)).target=m,f.relatedTarget=d,g=f),d=g,s&&c)e:{for(p=c,h=0,m=f=s;m;m=qc(m))h++;for(m=0,g=p;g;g=qc(g))m++;for(;0<h-m;)f=qc(f),h--;for(;0<m-h;)p=qc(p),m--;for(;h--;){if(f===p||null!==p&&f===p.alternate)break e;f=qc(f),p=qc(p)}f=null}else f=null;null!==s&&Vc(l,i,s,f,!1),null!==c&&null!==d&&Vc(l,d,c,f,!0)}if("select"===(s=(i=r?We(r):window).nodeName&&i.nodeName.toLowerCase())||"input"===s&&"file"===i.type)var y=Fn;else if(Nn(i))if(In)y=Gn;else{y=Vn;var b=qn}else!(s=i.nodeName)||"input"!==s.toLowerCase()||"checkbox"!==i.type&&"radio"!==i.type?r&&xt(r.elementType)&&(y=Fn):y=Yn;switch(y&&(y=y(e,r))?_n(l,y,n,a):(b&&b(e,i,r),"focusout"===e&&r&&"number"===i.type&&null!=r.memoizedProps.value&&bt(i,"number",i.value)),b=r?We(r):window,e){case"focusin":(Nn(b)||"true"===b.contentEditable)&&(rr=b,ar=r,or=null);break;case"focusout":or=ar=rr=null;break;case"mousedown":lr=!0;break;case"contextmenu":case"mouseup":case"dragend":lr=!1,ir(l,n,a);break;case"selectionchange":if(nr)break;case"keydown":case"keyup":ir(l,n,a)}var v;if(wn)e:{switch(e){case"compositionstart":var A="onCompositionStart";break e;case"compositionend":A="onCompositionEnd";break e;case"compositionupdate":A="onCompositionUpdate";break e}A=void 0}else On?Tn(e,n)&&(A="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(A="onCompositionStart");A&&(Sn&&"ko"!==n.locale&&(On||"onCompositionStart"!==A?"onCompositionEnd"===A&&On&&(v=Ht()):($t="value"in(Ut=a)?Ut.value:Ut.textContent,On=!0)),0<(b=Hc(r,A)).length&&(A=new sn(A,e,null,n,a),l.push({event:A,listeners:b}),(v||null!==(v=Pn(n)))&&(A.data=v))),(v=Cn?function(e,t){switch(e){case"compositionend":return Pn(t);case"keypress":return 32!==t.which?null:(Bn=!0,xn);case"textInput":return(e=t.data)===xn&&Bn?null:e;default:return null}}(e,n):function(e,t){if(On)return"compositionend"===e||!wn&&Tn(e,t)?(e=Ht(),Wt=$t=Ut=null,On=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Sn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(A=Hc(r,"onBeforeInput")).length&&(b=new sn("onBeforeInput","beforeinput",null,n,a),l.push({event:b,listeners:A}),b.data=v),function(e,t,n,r,a){if("submit"===t&&n&&n.stateNode===a){var o=Oc((a[_e]||null).action),l=r.submitter;l&&null!==(t=(t=l[_e]||null)?Oc(t.formAction):l.getAttribute("formAction"))&&(o=t,l=null);var i=new Zt("action","action",null,r,a);e.push({event:i,listeners:[{instance:null,listener:function(){if(r.defaultPrevented){if(0!==Ec){var e=l?Rc(a,l):new FormData(a);Rl(n,{pending:!0,data:e,method:a.method,action:o},null,e)}}else"function"==typeof o&&(i.preventDefault(),e=l?Rc(a,l):new FormData(a),Rl(n,{pending:!0,data:e,method:a.method,action:o},o,e))},currentTarget:a}]})}}(l,e,r,n,a)}Dc(l,t)})}function Wc(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Hc(e,t){for(var n=t+"Capture",r=[];null!==e;){var a=e,o=a.stateNode;if(5!==(a=a.tag)&&26!==a&&27!==a||null===o||(null!=(a=jt(e,n))&&r.unshift(Wc(e,a,o)),null!=(a=jt(e,t))&&r.push(Wc(e,a,o))),3===e.tag)return r;e=e.return}return[]}function qc(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag&&27!==e.tag);return e||null}function Vc(e,t,n,r,a){for(var o=t._reactName,l=[];null!==n&&n!==r;){var i=n,u=i.alternate,s=i.stateNode;if(i=i.tag,null!==u&&u===r)break;5!==i&&26!==i&&27!==i||null===s||(u=s,a?null!=(s=jt(n,o))&&l.unshift(Wc(n,s,u)):a||null!=(s=jt(n,o))&&l.push(Wc(n,s,u))),n=n.return}0!==l.length&&e.push({event:t,listeners:l})}var Yc=/\r\n?/g,Gc=/\u0000|\uFFFD/g;function Kc(e){return("string"==typeof e?e:""+e).replace(Yc,"\n").replace(Gc,"")}function Qc(e,t){return t=Kc(t),Kc(e)===t}function Xc(){}function Jc(e,t,n,r,a,o){switch(n){case"children":"string"==typeof r?"body"===t||"textarea"===t&&""===r||wt(e,r):("number"==typeof r||"bigint"==typeof r)&&"body"!==t&&wt(e,""+r);break;case"className":nt(e,"class",r);break;case"tabIndex":nt(e,"tabindex",r);break;case"dir":case"role":case"viewBox":case"width":case"height":nt(e,n,r);break;case"style":St(e,r,o);break;case"data":if("object"!==t){nt(e,"data",r);break}case"src":case"href":if(""===r&&("a"!==t||"href"!==n)){e.removeAttribute(n);break}if(null==r||"function"==typeof r||"symbol"==typeof r||"boolean"==typeof r){e.removeAttribute(n);break}r=Pt(""+r),e.setAttribute(n,r);break;case"action":case"formAction":if("function"==typeof r){e.setAttribute(n,"javascript:throw new Error('A React form was unexpectedly submitted. If you called form.submit() manually, consider using form.requestSubmit() instead. If you\\'re trying to use event.stopPropagation() in a submit event handler, consider also calling event.preventDefault().')");break}if("function"==typeof o&&("formAction"===n?("input"!==t&&Jc(e,t,"name",a.name,a,null),Jc(e,t,"formEncType",a.formEncType,a,null),Jc(e,t,"formMethod",a.formMethod,a,null),Jc(e,t,"formTarget",a.formTarget,a,null)):(Jc(e,t,"encType",a.encType,a,null),Jc(e,t,"method",a.method,a,null),Jc(e,t,"target",a.target,a,null))),null==r||"symbol"==typeof r||"boolean"==typeof r){e.removeAttribute(n);break}r=Pt(""+r),e.setAttribute(n,r);break;case"onClick":null!=r&&(e.onclick=Xc);break;case"onScroll":null!=r&&jc("scroll",e);break;case"onScrollEnd":null!=r&&jc("scrollend",e);break;case"dangerouslySetInnerHTML":if(null!=r){if("object"!=typeof r||!("__html"in r))throw Error(l(61));if(null!=(n=r.__html)){if(null!=a.children)throw Error(l(60));e.innerHTML=n}}break;case"multiple":e.multiple=r&&"function"!=typeof r&&"symbol"!=typeof r;break;case"muted":e.muted=r&&"function"!=typeof r&&"symbol"!=typeof r;break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"defaultValue":case"defaultChecked":case"innerHTML":case"ref":case"autoFocus":break;case"xlinkHref":if(null==r||"function"==typeof r||"boolean"==typeof r||"symbol"==typeof r){e.removeAttribute("xlink:href");break}n=Pt(""+r),e.setAttributeNS("http://www.w3.org/1999/xlink","xlink:href",n);break;case"contentEditable":case"spellCheck":case"draggable":case"value":case"autoReverse":case"externalResourcesRequired":case"focusable":case"preserveAlpha":null!=r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,""+r):e.removeAttribute(n);break;case"inert":case"allowFullScreen":case"async":case"autoPlay":case"controls":case"default":case"defer":case"disabled":case"disablePictureInPicture":case"disableRemotePlayback":case"formNoValidate":case"hidden":case"loop":case"noModule":case"noValidate":case"open":case"playsInline":case"readOnly":case"required":case"reversed":case"scoped":case"seamless":case"itemScope":r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,""):e.removeAttribute(n);break;case"capture":case"download":!0===r?e.setAttribute(n,""):!1!==r&&null!=r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,r):e.removeAttribute(n);break;case"cols":case"rows":case"size":case"span":null!=r&&"function"!=typeof r&&"symbol"!=typeof r&&!isNaN(r)&&1<=r?e.setAttribute(n,r):e.removeAttribute(n);break;case"rowSpan":case"start":null==r||"function"==typeof r||"symbol"==typeof r||isNaN(r)?e.removeAttribute(n):e.setAttribute(n,r);break;case"popover":jc("beforetoggle",e),jc("toggle",e),tt(e,"popover",r);break;case"xlinkActuate":rt(e,"http://www.w3.org/1999/xlink","xlink:actuate",r);break;case"xlinkArcrole":rt(e,"http://www.w3.org/1999/xlink","xlink:arcrole",r);break;case"xlinkRole":rt(e,"http://www.w3.org/1999/xlink","xlink:role",r);break;case"xlinkShow":rt(e,"http://www.w3.org/1999/xlink","xlink:show",r);break;case"xlinkTitle":rt(e,"http://www.w3.org/1999/xlink","xlink:title",r);break;case"xlinkType":rt(e,"http://www.w3.org/1999/xlink","xlink:type",r);break;case"xmlBase":rt(e,"http://www.w3.org/XML/1998/namespace","xml:base",r);break;case"xmlLang":rt(e,"http://www.w3.org/XML/1998/namespace","xml:lang",r);break;case"xmlSpace":rt(e,"http://www.w3.org/XML/1998/namespace","xml:space",r);break;case"is":tt(e,"is",r);break;case"innerText":case"textContent":break;default:(!(2<n.length)||"o"!==n[0]&&"O"!==n[0]||"n"!==n[1]&&"N"!==n[1])&&tt(e,n=Bt.get(n)||n,r)}}function Zc(e,t,n,r,a,o){switch(n){case"style":St(e,r,o);break;case"dangerouslySetInnerHTML":if(null!=r){if("object"!=typeof r||!("__html"in r))throw Error(l(61));if(null!=(n=r.__html)){if(null!=a.children)throw Error(l(60));e.innerHTML=n}}break;case"children":"string"==typeof r?wt(e,r):("number"==typeof r||"bigint"==typeof r)&&wt(e,""+r);break;case"onScroll":null!=r&&jc("scroll",e);break;case"onScrollEnd":null!=r&&jc("scrollend",e);break;case"onClick":null!=r&&(e.onclick=Xc);break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"innerHTML":case"ref":case"innerText":case"textContent":break;default:Ye.hasOwnProperty(n)||("o"!==n[0]||"n"!==n[1]||(a=n.endsWith("Capture"),t=n.slice(2,a?n.length-7:void 0),"function"==typeof(o=null!=(o=e[_e]||null)?o[n]:null)&&e.removeEventListener(t,o,a),"function"!=typeof r)?n in e?e[n]=r:!0===r?e.setAttribute(n,""):tt(e,n,r):("function"!=typeof o&&null!==o&&(n in e?e[n]=null:e.hasAttribute(n)&&e.removeAttribute(n)),e.addEventListener(t,r,a)))}}function ef(e,t,n){switch(t){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"img":jc("error",e),jc("load",e);var r,a=!1,o=!1;for(r in n)if(n.hasOwnProperty(r)){var i=n[r];if(null!=i)switch(r){case"src":a=!0;break;case"srcSet":o=!0;break;case"children":case"dangerouslySetInnerHTML":throw Error(l(137,t));default:Jc(e,t,r,i,n,null)}}return o&&Jc(e,t,"srcSet",n.srcSet,n,null),void(a&&Jc(e,t,"src",n.src,n,null));case"input":jc("invalid",e);var u=r=i=o=null,s=null,c=null;for(a in n)if(n.hasOwnProperty(a)){var f=n[a];if(null!=f)switch(a){case"name":o=f;break;case"type":i=f;break;case"checked":s=f;break;case"defaultChecked":c=f;break;case"value":r=f;break;case"defaultValue":u=f;break;case"children":case"dangerouslySetInnerHTML":if(null!=f)throw Error(l(137,t));break;default:Jc(e,t,a,f,n,null)}}return yt(e,r,u,s,c,i,o,!1),void ft(e);case"select":for(o in jc("invalid",e),a=i=r=null,n)if(n.hasOwnProperty(o)&&null!=(u=n[o]))switch(o){case"value":r=u;break;case"defaultValue":i=u;break;case"multiple":a=u;default:Jc(e,t,o,u,n,null)}return t=r,n=i,e.multiple=!!a,void(null!=t?vt(e,!!a,t,!1):null!=n&&vt(e,!!a,n,!0));case"textarea":for(i in jc("invalid",e),r=o=a=null,n)if(n.hasOwnProperty(i)&&null!=(u=n[i]))switch(i){case"value":a=u;break;case"defaultValue":o=u;break;case"children":r=u;break;case"dangerouslySetInnerHTML":if(null!=u)throw Error(l(91));break;default:Jc(e,t,i,u,n,null)}return Et(e,a,o,r),void ft(e);case"option":for(s in n)n.hasOwnProperty(s)&&null!=(a=n[s])&&("selected"===s?e.selected=a&&"function"!=typeof a&&"symbol"!=typeof a:Jc(e,t,s,a,n,null));return;case"dialog":jc("beforetoggle",e),jc("toggle",e),jc("cancel",e),jc("close",e);break;case"iframe":case"object":jc("load",e);break;case"video":case"audio":for(a=0;a<zc.length;a++)jc(zc[a],e);break;case"image":jc("error",e),jc("load",e);break;case"details":jc("toggle",e);break;case"embed":case"source":case"link":jc("error",e),jc("load",e);case"area":case"base":case"br":case"col":case"hr":case"keygen":case"meta":case"param":case"track":case"wbr":case"menuitem":for(c in n)if(n.hasOwnProperty(c)&&null!=(a=n[c]))switch(c){case"children":case"dangerouslySetInnerHTML":throw Error(l(137,t));default:Jc(e,t,c,a,n,null)}return;default:if(xt(t)){for(f in n)n.hasOwnProperty(f)&&void 0!==(a=n[f])&&Zc(e,t,f,a,n,void 0);return}}for(u in n)n.hasOwnProperty(u)&&null!=(a=n[u])&&Jc(e,t,u,a,n,null)}var tf=null,nf=null;function rf(e){return 9===e.nodeType?e:e.ownerDocument}function af(e){switch(e){case"http://www.w3.org/2000/svg":return 1;case"http://www.w3.org/1998/Math/MathML":return 2;default:return 0}}function of(e,t){if(0===e)switch(t){case"svg":return 1;case"math":return 2;default:return 0}return 1===e&&"foreignObject"===t?0:e}function lf(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"bigint"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var uf=null,sf="function"==typeof setTimeout?setTimeout:void 0,cf="function"==typeof clearTimeout?clearTimeout:void 0,ff="function"==typeof Promise?Promise:void 0,df="function"==typeof queueMicrotask?queueMicrotask:void 0!==ff?function(e){return ff.resolve(null).then(e).catch(pf)}:sf;function pf(e){setTimeout(function(){throw e})}function mf(e){return"head"===e}function hf(e,t){var n=t,r=0,a=0;do{var o=n.nextSibling;if(e.removeChild(n),o&&8===o.nodeType)if("/$"===(n=o.data)){if(0<r&&8>r){n=r;var l=e.ownerDocument;if(1&n&&wf(l.documentElement),2&n&&wf(l.body),4&n)for(wf(n=l.head),l=n.firstChild;l;){var i=l.nextSibling,u=l.nodeName;l[Ie]||"SCRIPT"===u||"STYLE"===u||"LINK"===u&&"stylesheet"===l.rel.toLowerCase()||n.removeChild(l),l=i}}if(0===a)return e.removeChild(o),void Td(t);a--}else"$"===n||"$?"===n||"$!"===n?a++:r=n.charCodeAt(0)-48;else r=0;n=o}while(n);Td(t)}function gf(e){var t=e.firstChild;for(t&&10===t.nodeType&&(t=t.nextSibling);t;){var n=t;switch(t=t.nextSibling,n.nodeName){case"HTML":case"HEAD":case"BODY":gf(n),Me(n);continue;case"SCRIPT":case"STYLE":continue;case"LINK":if("stylesheet"===n.rel.toLowerCase())continue}e.removeChild(n)}}function yf(e){return"$!"===e.data||"$?"===e.data&&"complete"===e.ownerDocument.readyState}function bf(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t||"F!"===t||"F"===t)break;if("/$"===t)return null}}return e}var vf=null;function Af(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}function Ef(e,t,n){switch(t=rf(n),e){case"html":if(!(e=t.documentElement))throw Error(l(452));return e;case"head":if(!(e=t.head))throw Error(l(453));return e;case"body":if(!(e=t.body))throw Error(l(454));return e;default:throw Error(l(451))}}function wf(e){for(var t=e.attributes;t.length;)e.removeAttributeNode(t[0]);Me(e)}var kf=new Map,Cf=new Set;function Sf(e){return"function"==typeof e.getRootNode?e.getRootNode():9===e.nodeType?e:e.ownerDocument}var xf=L.d;L.d={f:function(){var e=xf.f(),t=Us();return e||t},r:function(e){var t=$e(e);null!==t&&5===t.tag&&"form"===t.type?_l(t):xf.r(e)},D:function(e){xf.D(e),Tf("dns-prefetch",e,null)},C:function(e,t){xf.C(e,t),Tf("preconnect",e,t)},L:function(e,t,n){xf.L(e,t,n);var r=Bf;if(r&&e&&t){var a='link[rel="preload"][as="'+ht(t)+'"]';"image"===t&&n&&n.imageSrcSet?(a+='[imagesrcset="'+ht(n.imageSrcSet)+'"]',"string"==typeof n.imageSizes&&(a+='[imagesizes="'+ht(n.imageSizes)+'"]')):a+='[href="'+ht(e)+'"]';var o=a;switch(t){case"style":o=Of(e);break;case"script":o=_f(e)}kf.has(o)||(e=d({rel:"preload",href:"image"===t&&n&&n.imageSrcSet?void 0:e,as:t},n),kf.set(o,e),null!==r.querySelector(a)||"style"===t&&r.querySelector(Rf(o))||"script"===t&&r.querySelector(zf(o))||(ef(t=r.createElement("link"),"link",e),qe(t),r.head.appendChild(t)))}},m:function(e,t){xf.m(e,t);var n=Bf;if(n&&e){var r=t&&"string"==typeof t.as?t.as:"script",a='link[rel="modulepreload"][as="'+ht(r)+'"][href="'+ht(e)+'"]',o=a;switch(r){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":o=_f(e)}if(!kf.has(o)&&(e=d({rel:"modulepreload",href:e},t),kf.set(o,e),null===n.querySelector(a))){switch(r){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":if(n.querySelector(zf(o)))return}ef(r=n.createElement("link"),"link",e),qe(r),n.head.appendChild(r)}}},X:function(e,t){xf.X(e,t);var n=Bf;if(n&&e){var r=He(n).hoistableScripts,a=_f(e),o=r.get(a);o||((o=n.querySelector(zf(a)))||(e=d({src:e,async:!0},t),(t=kf.get(a))&&Ff(e,t),qe(o=n.createElement("script")),ef(o,"link",e),n.head.appendChild(o)),o={type:"script",instance:o,count:1,state:null},r.set(a,o))}},S:function(e,t,n){xf.S(e,t,n);var r=Bf;if(r&&e){var a=He(r).hoistableStyles,o=Of(e);t=t||"default";var l=a.get(o);if(!l){var i={loading:0,preload:null};if(l=r.querySelector(Rf(o)))i.loading=5;else{e=d({rel:"stylesheet",href:e,"data-precedence":t},n),(n=kf.get(o))&&jf(e,n);var u=l=r.createElement("link");qe(u),ef(u,"link",e),u._p=new Promise(function(e,t){u.onload=e,u.onerror=t}),u.addEventListener("load",function(){i.loading|=1}),u.addEventListener("error",function(){i.loading|=2}),i.loading|=4,Df(l,t,r)}l={type:"stylesheet",instance:l,count:1,state:i},a.set(o,l)}}},M:function(e,t){xf.M(e,t);var n=Bf;if(n&&e){var r=He(n).hoistableScripts,a=_f(e),o=r.get(a);o||((o=n.querySelector(zf(a)))||(e=d({src:e,async:!0,type:"module"},t),(t=kf.get(a))&&Ff(e,t),qe(o=n.createElement("script")),ef(o,"link",e),n.head.appendChild(o)),o={type:"script",instance:o,count:1,state:null},r.set(a,o))}}};var Bf="undefined"==typeof document?null:document;function Tf(e,t,n){var r=Bf;if(r&&"string"==typeof t&&t){var a=ht(t);a='link[rel="'+e+'"][href="'+a+'"]',"string"==typeof n&&(a+='[crossorigin="'+n+'"]'),Cf.has(a)||(Cf.add(a),e={rel:e,crossOrigin:n,href:t},null===r.querySelector(a)&&(ef(t=r.createElement("link"),"link",e),qe(t),r.head.appendChild(t)))}}function Pf(e,t,n,r){var a,o,i,u,s=(s=H.current)?Sf(s):null;if(!s)throw Error(l(446));switch(e){case"meta":case"title":return null;case"style":return"string"==typeof n.precedence&&"string"==typeof n.href?(t=Of(n.href),(r=(n=He(s).hoistableStyles).get(t))||(r={type:"style",instance:null,count:0,state:null},n.set(t,r)),r):{type:"void",instance:null,count:0,state:null};case"link":if("stylesheet"===n.rel&&"string"==typeof n.href&&"string"==typeof n.precedence){e=Of(n.href);var c=He(s).hoistableStyles,f=c.get(e);if(f||(s=s.ownerDocument||s,f={type:"stylesheet",instance:null,count:0,state:{loading:0,preload:null}},c.set(e,f),(c=s.querySelector(Rf(e)))&&!c._p&&(f.instance=c,f.state.loading=5),kf.has(e)||(n={rel:"preload",as:"style",href:n.href,crossOrigin:n.crossOrigin,integrity:n.integrity,media:n.media,hrefLang:n.hrefLang,referrerPolicy:n.referrerPolicy},kf.set(e,n),c||(a=s,o=e,i=n,u=f.state,a.querySelector('link[rel="preload"][as="style"]['+o+"]")?u.loading=1:(o=a.createElement("link"),u.preload=o,o.addEventListener("load",function(){return u.loading|=1}),o.addEventListener("error",function(){return u.loading|=2}),ef(o,"link",i),qe(o),a.head.appendChild(o))))),t&&null===r)throw Error(l(528,""));return f}if(t&&null!==r)throw Error(l(529,""));return null;case"script":return t=n.async,"string"==typeof(n=n.src)&&t&&"function"!=typeof t&&"symbol"!=typeof t?(t=_f(n),(r=(n=He(s).hoistableScripts).get(t))||(r={type:"script",instance:null,count:0,state:null},n.set(t,r)),r):{type:"void",instance:null,count:0,state:null};default:throw Error(l(444,e))}}function Of(e){return'href="'+ht(e)+'"'}function Rf(e){return'link[rel="stylesheet"]['+e+"]"}function Nf(e){return d({},e,{"data-precedence":e.precedence,precedence:null})}function _f(e){return'[src="'+ht(e)+'"]'}function zf(e){return"script[async]"+e}function Lf(e,t,n){if(t.count++,null===t.instance)switch(t.type){case"style":var r=e.querySelector('style[data-href~="'+ht(n.href)+'"]');if(r)return t.instance=r,qe(r),r;var a=d({},n,{"data-href":n.href,"data-precedence":n.precedence,href:null,precedence:null});return qe(r=(e.ownerDocument||e).createElement("style")),ef(r,"style",a),Df(r,n.precedence,e),t.instance=r;case"stylesheet":a=Of(n.href);var o=e.querySelector(Rf(a));if(o)return t.state.loading|=4,t.instance=o,qe(o),o;r=Nf(n),(a=kf.get(a))&&jf(r,a),qe(o=(e.ownerDocument||e).createElement("link"));var i=o;return i._p=new Promise(function(e,t){i.onload=e,i.onerror=t}),ef(o,"link",r),t.state.loading|=4,Df(o,n.precedence,e),t.instance=o;case"script":return o=_f(n.src),(a=e.querySelector(zf(o)))?(t.instance=a,qe(a),a):(r=n,(a=kf.get(o))&&Ff(r=d({},n),a),qe(a=(e=e.ownerDocument||e).createElement("script")),ef(a,"link",r),e.head.appendChild(a),t.instance=a);case"void":return null;default:throw Error(l(443,t.type))}else"stylesheet"===t.type&&!(4&t.state.loading)&&(r=t.instance,t.state.loading|=4,Df(r,n.precedence,e));return t.instance}function Df(e,t,n){for(var r=n.querySelectorAll('link[rel="stylesheet"][data-precedence],style[data-precedence]'),a=r.length?r[r.length-1]:null,o=a,l=0;l<r.length;l++){var i=r[l];if(i.dataset.precedence===t)o=i;else if(o!==a)break}o?o.parentNode.insertBefore(e,o.nextSibling):(t=9===n.nodeType?n.head:n).insertBefore(e,t.firstChild)}function jf(e,t){null==e.crossOrigin&&(e.crossOrigin=t.crossOrigin),null==e.referrerPolicy&&(e.referrerPolicy=t.referrerPolicy),null==e.title&&(e.title=t.title)}function Ff(e,t){null==e.crossOrigin&&(e.crossOrigin=t.crossOrigin),null==e.referrerPolicy&&(e.referrerPolicy=t.referrerPolicy),null==e.integrity&&(e.integrity=t.integrity)}var If=null;function Mf(e,t,n){if(null===If){var r=new Map,a=If=new Map;a.set(n,r)}else(r=(a=If).get(n))||(r=new Map,a.set(n,r));if(r.has(e))return r;for(r.set(e,null),n=n.getElementsByTagName(e),a=0;a<n.length;a++){var o=n[a];if(!(o[Ie]||o[Ne]||"link"===e&&"stylesheet"===o.getAttribute("rel"))&&"http://www.w3.org/2000/svg"!==o.namespaceURI){var l=o.getAttribute(t)||"";l=e+l;var i=r.get(l);i?i.push(o):r.set(l,[o])}}return r}function Uf(e,t,n){(e=e.ownerDocument||e).head.insertBefore(n,"title"===t?e.querySelector("head > title"):null)}function $f(e){return!!("stylesheet"!==e.type||3&e.state.loading)}var Wf=null;function Hf(){}function qf(){if(this.count--,0===this.count)if(this.stylesheets)Yf(this,this.stylesheets);else if(this.unsuspend){var e=this.unsuspend;this.unsuspend=null,e()}}var Vf=null;function Yf(e,t){e.stylesheets=null,null!==e.unsuspend&&(e.count++,Vf=new Map,t.forEach(Gf,e),Vf=null,qf.call(e))}function Gf(e,t){if(!(4&t.state.loading)){var n=Vf.get(e);if(n)var r=n.get(null);else{n=new Map,Vf.set(e,n);for(var a=e.querySelectorAll("link[data-precedence],style[data-precedence]"),o=0;o<a.length;o++){var l=a[o];"LINK"!==l.nodeName&&"not all"===l.getAttribute("media")||(n.set(l.dataset.precedence,l),r=l)}r&&n.set(null,r)}l=(a=t.instance).getAttribute("data-precedence"),(o=n.get(l)||r)===r&&n.set(null,a),n.set(l,a),this.count++,r=qf.bind(this),a.addEventListener("load",r),a.addEventListener("error",r),o?o.parentNode.insertBefore(a,o.nextSibling):(e=9===e.nodeType?e.head:e).insertBefore(a,e.firstChild),t.state.loading|=4}}var Kf={$$typeof:E,Provider:null,Consumer:null,_currentValue:D,_currentValue2:D,_threadCount:0};function Qf(e,t,n,r,a,o,l,i){this.tag=1,this.containerInfo=e,this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.next=this.pendingContext=this.context=this.cancelPendingCommit=null,this.callbackPriority=0,this.expirationTimes=Ce(-1),this.entangledLanes=this.shellSuspendCounter=this.errorRecoveryDisabledLanes=this.expiredLanes=this.warmLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Ce(0),this.hiddenUpdates=Ce(null),this.identifierPrefix=r,this.onUncaughtError=a,this.onCaughtError=o,this.onRecoverableError=l,this.pooledCache=null,this.pooledCacheLanes=0,this.formState=i,this.incompleteTransitions=new Map}function Xf(e,t,n,r,a,o,l,i,u,s,c,f){return e=new Qf(e,t,n,l,i,u,s,f),t=1,!0===o&&(t|=24),o=Dr(3,null,null,t),e.current=o,o.stateNode=e,(t=_a()).refCount++,e.pooledCache=t,t.refCount++,o.memoizedState={element:r,isDehydrated:n,cache:t},no(o),e}function Jf(e){return e?e=zr:zr}function Zf(e,t,n,r,a,o){a=Jf(a),null===r.context?r.context=a:r.pendingContext=a,(r=ao(t)).payload={element:n},null!==(o=void 0===o?null:o)&&(r.callback=o),null!==(n=oo(e,r,t))&&(Ds(n,0,t),lo(n,e,t))}function ed(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function td(e,t){ed(e,t),(e=e.alternate)&&ed(e,t)}function nd(e){if(13===e.tag){var t=Rr(e,67108864);null!==t&&Ds(t,0,67108864),td(e,67108864)}}var rd=!0;function ad(e,t,n,r){var a=z.T;z.T=null;var o=L.p;try{L.p=2,ld(e,t,n,r)}finally{L.p=o,z.T=a}}function od(e,t,n,r){var a=z.T;z.T=null;var o=L.p;try{L.p=8,ld(e,t,n,r)}finally{L.p=o,z.T=a}}function ld(e,t,n,r){if(rd){var a=id(r);if(null===a)$c(e,t,r,ud,n),vd(e,r);else if(function(e,t,n,r,a){switch(t){case"focusin":return dd=Ad(dd,e,t,n,r,a),!0;case"dragenter":return pd=Ad(pd,e,t,n,r,a),!0;case"mouseover":return md=Ad(md,e,t,n,r,a),!0;case"pointerover":var o=a.pointerId;return hd.set(o,Ad(hd.get(o)||null,e,t,n,r,a)),!0;case"gotpointercapture":return o=a.pointerId,gd.set(o,Ad(gd.get(o)||null,e,t,n,r,a)),!0}return!1}(a,e,t,n,r))r.stopPropagation();else if(vd(e,r),4&t&&-1<bd.indexOf(e)){for(;null!==a;){var o=$e(a);if(null!==o)switch(o.tag){case 3:if((o=o.stateNode).current.memoizedState.isDehydrated){var l=be(o.pendingLanes);if(0!==l){var i=o;for(i.pendingLanes|=2,i.entangledLanes|=2;l;){var u=1<<31-pe(l);i.entanglements[1]|=u,l&=~u}wc(o),!(6&ns)&&(ws=te()+500,kc(0,!1))}}break;case 13:null!==(i=Rr(o,2))&&Ds(i,0,2),Us(),td(o,2)}if(null===(o=id(r))&&$c(e,t,r,ud,n),o===a)break;a=o}null!==a&&r.stopPropagation()}else $c(e,t,r,null,n)}}function id(e){return sd(e=Rt(e))}var ud=null;function sd(e){if(ud=null,null!==(e=Ue(e))){var t=u(e);if(null===t)e=null;else{var n=t.tag;if(13===n){if(null!==(e=s(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null)}}return ud=e,null}function cd(e){switch(e){case"beforetoggle":case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"toggle":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 2;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 8;case"message":switch(ne()){case re:return 2;case ae:return 8;case oe:case le:return 32;case ie:return 268435456;default:return 32}default:return 32}}var fd=!1,dd=null,pd=null,md=null,hd=new Map,gd=new Map,yd=[],bd="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset".split(" ");function vd(e,t){switch(e){case"focusin":case"focusout":dd=null;break;case"dragenter":case"dragleave":pd=null;break;case"mouseover":case"mouseout":md=null;break;case"pointerover":case"pointerout":hd.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":gd.delete(t.pointerId)}}function Ad(e,t,n,r,a,o){return null===e||e.nativeEvent!==o?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:o,targetContainers:[a]},null!==t&&null!==(t=$e(t))&&nd(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==a&&-1===t.indexOf(a)&&t.push(a),e)}function Ed(e){var t=Ue(e.target);if(null!==t){var n=u(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=s(n)))return e.blockedOn=t,void function(e){var t=L.p;try{return L.p=e,function(){if(13===n.tag){var e=zs();e=Te(e);var t=Rr(n,e);null!==t&&Ds(t,0,e),td(n,e)}}()}finally{L.p=t}}(e.priority)}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function wd(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=id(e.nativeEvent);if(null!==n)return null!==(t=$e(n))&&nd(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);Ot=r,n.target.dispatchEvent(r),Ot=null,t.shift()}return!0}function kd(e,t,n){wd(e)&&n.delete(t)}function Cd(){fd=!1,null!==dd&&wd(dd)&&(dd=null),null!==pd&&wd(pd)&&(pd=null),null!==md&&wd(md)&&(md=null),hd.forEach(kd),gd.forEach(kd)}function Sd(e,t){e.blockedOn===t&&(e.blockedOn=null,fd||(fd=!0,r.unstable_scheduleCallback(r.unstable_NormalPriority,Cd)))}var xd=null;function Bd(e){xd!==e&&(xd=e,r.unstable_scheduleCallback(r.unstable_NormalPriority,function(){xd===e&&(xd=null);for(var t=0;t<e.length;t+=3){var n=e[t],r=e[t+1],a=e[t+2];if("function"!=typeof r){if(null===sd(r||n))continue;break}var o=$e(n);null!==o&&(e.splice(t,3),t-=3,Rl(o,{pending:!0,data:a,method:n.method,action:r},r,a))}}))}function Td(e){function t(t){return Sd(t,e)}null!==dd&&Sd(dd,e),null!==pd&&Sd(pd,e),null!==md&&Sd(md,e),hd.forEach(t),gd.forEach(t);for(var n=0;n<yd.length;n++){var r=yd[n];r.blockedOn===e&&(r.blockedOn=null)}for(;0<yd.length&&null===(n=yd[0]).blockedOn;)Ed(n),null===n.blockedOn&&yd.shift();if(null!=(n=(e.ownerDocument||e).$$reactFormReplay))for(r=0;r<n.length;r+=3){var a=n[r],o=n[r+1],l=a[_e]||null;if("function"==typeof o)l||Bd(n);else if(l){var i=null;if(o&&o.hasAttribute("formAction")){if(a=o,l=o[_e]||null)i=l.formAction;else if(null!==sd(a))continue}else i=l.action;"function"==typeof i?n[r+1]=i:(n.splice(r,3),r-=3),Bd(n)}}}function Pd(e){this._internalRoot=e}function Od(e){this._internalRoot=e}Od.prototype.render=Pd.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(l(409));Zf(t.current,zs(),e,t,null,null)},Od.prototype.unmount=Pd.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;Zf(e.current,2,null,e,null,null),Us(),t[ze]=null}},Od.prototype.unstable_scheduleHydration=function(e){if(e){var t=Oe();e={blockedOn:null,target:e,priority:t};for(var n=0;n<yd.length&&0!==t&&t<yd[n].priority;n++);yd.splice(n,0,e),0===n&&Ed(e)}};var Rd=a.version;if("19.1.1"!==Rd)throw Error(l(527,Rd,"19.1.1"));L.findDOMNode=function(e){var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(l(188));throw e=Object.keys(e).join(","),Error(l(268,e))}return e=function(e){var t=e.alternate;if(!t){if(null===(t=u(e)))throw Error(l(188));return t!==e?null:e}for(var n=e,r=t;;){var a=n.return;if(null===a)break;var o=a.alternate;if(null===o){if(null!==(r=a.return)){n=r;continue}break}if(a.child===o.child){for(o=a.child;o;){if(o===n)return c(a),e;if(o===r)return c(a),t;o=o.sibling}throw Error(l(188))}if(n.return!==r.return)n=a,r=o;else{for(var i=!1,s=a.child;s;){if(s===n){i=!0,n=a,r=o;break}if(s===r){i=!0,r=a,n=o;break}s=s.sibling}if(!i){for(s=o.child;s;){if(s===n){i=!0,n=o,r=a;break}if(s===r){i=!0,r=o,n=a;break}s=s.sibling}if(!i)throw Error(l(189))}}if(n.alternate!==r)throw Error(l(190))}if(3!==n.tag)throw Error(l(188));return n.stateNode.current===n?e:t}(t),null===(e=null!==e?f(e):null)?null:e.stateNode};var Nd={bundleType:0,version:"19.1.1",rendererPackageName:"react-dom",currentDispatcherRef:z,reconcilerVersion:"19.1.1"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var _d=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!_d.isDisabled&&_d.supportsFiber)try{ce=_d.inject(Nd),fe=_d}catch(e){}}t.createRoot=function(e,t){if(!i(e))throw Error(l(299));var n=!1,r="",a=bi,o=vi,u=Ai;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onUncaughtError&&(a=t.onUncaughtError),void 0!==t.onCaughtError&&(o=t.onCaughtError),void 0!==t.onRecoverableError&&(u=t.onRecoverableError),void 0!==t.unstable_transitionCallbacks&&t.unstable_transitionCallbacks),t=Xf(e,1,!1,null,0,n,r,a,o,u,0,null),e[ze]=t.current,Mc(e),new Pd(t)},t.hydrateRoot=function(e,t,n){if(!i(e))throw Error(l(299));var r=!1,a="",o=bi,u=vi,s=Ai,c=null;return null!=n&&(!0===n.unstable_strictMode&&(r=!0),void 0!==n.identifierPrefix&&(a=n.identifierPrefix),void 0!==n.onUncaughtError&&(o=n.onUncaughtError),void 0!==n.onCaughtError&&(u=n.onCaughtError),void 0!==n.onRecoverableError&&(s=n.onRecoverableError),void 0!==n.unstable_transitionCallbacks&&n.unstable_transitionCallbacks,void 0!==n.formState&&(c=n.formState)),(t=Xf(e,1,!0,t,0,r,a,o,u,s,0,c)).context=Jf(null),n=t.current,(a=ao(r=Te(r=zs()))).callback=null,oo(n,a,r),n=r,t.current.lanes=n,Se(t,n),wc(t),e[ze]=t.current,Mc(e),new Od(t)},t.version="19.1.1"},314:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n}).join("")},t.i=function(e,n,r,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var l={};if(r)for(var i=0;i<this.length;i++){var u=this[i][0];null!=u&&(l[u]=!0)}for(var s=0;s<e.length;s++){var c=[].concat(e[s]);r&&l[c[0]]||(void 0!==o&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=o),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),a&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=a):c[4]="".concat(a)),t.push(c))}},t}},338:(e,t,n)=>{!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(247)},354:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */");return[t].concat([o]).join("\n")}return[t].join("\n")}},477:(e,t)=>{function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,a=e[r];if(!(0<o(a,t)))break e;e[r]=t,e[n]=a,n=r}}function r(e){return 0===e.length?null:e[0]}function a(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,a=e.length,l=a>>>1;r<l;){var i=2*(r+1)-1,u=e[i],s=i+1,c=e[s];if(0>o(u,n))s<a&&0>o(c,u)?(e[r]=c,e[s]=n,r=s):(e[r]=u,e[i]=n,r=i);else{if(!(s<a&&0>o(c,n)))break e;e[r]=c,e[s]=n,r=s}}}return t}function o(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if(t.unstable_now=void 0,"object"==typeof performance&&"function"==typeof performance.now){var l=performance;t.unstable_now=function(){return l.now()}}else{var i=Date,u=i.now();t.unstable_now=function(){return i.now()-u}}var s=[],c=[],f=1,d=null,p=3,m=!1,h=!1,g=!1,y=!1,b="function"==typeof setTimeout?setTimeout:null,v="function"==typeof clearTimeout?clearTimeout:null,A="undefined"!=typeof setImmediate?setImmediate:null;function E(e){for(var t=r(c);null!==t;){if(null===t.callback)a(c);else{if(!(t.startTime<=e))break;a(c),t.sortIndex=t.expirationTime,n(s,t)}t=r(c)}}function w(e){if(g=!1,E(e),!h)if(null!==r(s))h=!0,C||(C=!0,k());else{var t=r(c);null!==t&&N(w,t.startTime-e)}}var k,C=!1,S=-1,x=5,B=-1;function T(){return!(!y&&t.unstable_now()-B<x)}function P(){if(y=!1,C){var e=t.unstable_now();B=e;var n=!0;try{e:{h=!1,g&&(g=!1,v(S),S=-1),m=!0;var o=p;try{t:{for(E(e),d=r(s);null!==d&&!(d.expirationTime>e&&T());){var l=d.callback;if("function"==typeof l){d.callback=null,p=d.priorityLevel;var i=l(d.expirationTime<=e);if(e=t.unstable_now(),"function"==typeof i){d.callback=i,E(e),n=!0;break t}d===r(s)&&a(s),E(e)}else a(s);d=r(s)}if(null!==d)n=!0;else{var u=r(c);null!==u&&N(w,u.startTime-e),n=!1}}break e}finally{d=null,p=o,m=!1}n=void 0}}finally{n?k():C=!1}}}if("function"==typeof A)k=function(){A(P)};else if("undefined"!=typeof MessageChannel){var O=new MessageChannel,R=O.port2;O.port1.onmessage=P,k=function(){R.postMessage(null)}}else k=function(){b(P,0)};function N(e,n){S=b(function(){e(t.unstable_now())},n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):x=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var n=p;p=t;try{return e()}finally{p=n}},t.unstable_requestPaint=function(){y=!0},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=p;p=e;try{return t()}finally{p=n}},t.unstable_scheduleCallback=function(e,a,o){var l=t.unstable_now();switch(o="object"==typeof o&&null!==o&&"number"==typeof(o=o.delay)&&0<o?l+o:l,e){case 1:var i=-1;break;case 2:i=250;break;case 5:i=1073741823;break;case 4:i=1e4;break;default:i=5e3}return e={id:f++,callback:a,priorityLevel:e,startTime:o,expirationTime:i=o+i,sortIndex:-1},o>l?(e.sortIndex=o,n(c,e),null===r(s)&&e===r(c)&&(g?(v(S),S=-1):g=!0,N(w,o-l))):(e.sortIndex=i,n(s,e),h||m||(h=!0,C||(C=!0,k()))),e},t.unstable_shouldYield=T,t.unstable_wrapCallback=function(e){var t=p;return function(){var n=p;p=t;try{return e.apply(this,arguments)}finally{p=n}}}},540:(e,t,n)=>{e.exports=n(869)},581:(e,t,n)=>{n.d(t,{A:()=>i});var r=n(354),a=n.n(r),o=n(314),l=n.n(o)()(a());l.push([e.id,".App {\n  min-height: 100vh;\n  width: 100%;\n  text-align: left;\n  padding: 20px;\n}\n","",{version:3,sources:["webpack://./src/styles/App.css"],names:[],mappings:"AAAA;EACE,iBAAiB;EACjB,WAAW;EACX,gBAAgB;EAChB,aAAa;AACf",sourcesContent:[".App {\n  min-height: 100vh;\n  width: 100%;\n  text-align: left;\n  padding: 20px;\n}\r\n"],sourceRoot:""}]);const i=l},595:(e,t,n)=>{n.d(t,{A:()=>i});var r=n(354),a=n.n(r),o=n(314),l=n.n(o)()(a());l.push([e.id,".footer {\n  width: 100%;\n  background-color: #2c3e50;\n  color: #fff;\n  padding: 15px 20px;\n  text-align: center;\n  box-shadow: 0 -2px 6px rgba(0,0,0,0.3);\n  position: fixed;      /* sticks at bottom */\n  bottom: 0;\n  left: 0;\n  z-index: 1000;\n  font-size: 0.9rem;\n}\n\n.footer a {\n  color: #5dade2;\n  text-decoration: none;\n  margin: 0 5px;\n}\n\n.footer a:hover {\n  text-decoration: underline;\n}\n\n/* Responsive adjustments for mobile */\n@media screen and (max-width: 600px) {\n  .footer p {\n    font-size: 0.8rem;\n    margin: 4px 0;\n  }\n}\n","",{version:3,sources:["webpack://./src/styles/Footer.css"],names:[],mappings:"AAAA;EACE,WAAW;EACX,yBAAyB;EACzB,WAAW;EACX,kBAAkB;EAClB,kBAAkB;EAClB,sCAAsC;EACtC,eAAe,OAAO,qBAAqB;EAC3C,SAAS;EACT,OAAO;EACP,aAAa;EACb,iBAAiB;AACnB;;AAEA;EACE,cAAc;EACd,qBAAqB;EACrB,aAAa;AACf;;AAEA;EACE,0BAA0B;AAC5B;;AAEA,sCAAsC;AACtC;EACE;IACE,iBAAiB;IACjB,aAAa;EACf;AACF",sourcesContent:[".footer {\r\n  width: 100%;\r\n  background-color: #2c3e50;\r\n  color: #fff;\r\n  padding: 15px 20px;\r\n  text-align: center;\r\n  box-shadow: 0 -2px 6px rgba(0,0,0,0.3);\r\n  position: fixed;      /* sticks at bottom */\r\n  bottom: 0;\r\n  left: 0;\r\n  z-index: 1000;\r\n  font-size: 0.9rem;\r\n}\r\n\r\n.footer a {\r\n  color: #5dade2;\r\n  text-decoration: none;\r\n  margin: 0 5px;\r\n}\r\n\r\n.footer a:hover {\r\n  text-decoration: underline;\r\n}\r\n\r\n/* Responsive adjustments for mobile */\r\n@media screen and (max-width: 600px) {\r\n  .footer p {\r\n    font-size: 0.8rem;\r\n    margin: 4px 0;\r\n  }\r\n}\r\n"],sourceRoot:""}]);const i=l},624:(e,t,n)=>{n.d(t,{A:()=>i});var r=n(354),a=n.n(r),o=n(314),l=n.n(o)()(a());l.push([e.id,".navbar {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n  position: fixed;\n  top: 0;\n  left: 0;\n  padding: 12px 20px;\n  background-color: #2c3e50;\n  color: #fff;\n  box-shadow: 0 2px 6px rgba(0,0,0,0.3);\n  z-index: 1000;\n}\n\n.navbar-logo {\n  font-size: 1.4rem;\n  font-weight: bold;\n  cursor: pointer;\n}\n\n.navbar-links button {\n  background-color: #5dade2;\n  border: none;\n  color: #fff;\n  padding: 6px 12px;\n  margin-left: 10px;\n  border-radius: 6px;\n  cursor: pointer;\n}\n\n.navbar-links button:hover {\n  background-color: #4682c0;\n}\n\n/* Mobile menu */\n.mobile-menu-icon {\n  display: none;\n  font-size: 1.8rem;\n  cursor: pointer;\n}\n\n@media screen and (max-width: 768px) {\n  .navbar-links {\n    display: none;\n    flex-direction: column;\n    width: 100%;\n    background-color: #2c3e50;\n    position: absolute;\n    top: 60px;\n    left: 0;\n  }\n\n  .navbar-links.open {\n    display: flex;\n  }\n\n  .navbar-links button {\n    margin: 10px 0;\n  }\n\n  .mobile-menu-icon {\n    display: block;\n  }\n}\n","",{version:3,sources:["webpack://./src/styles/Navbar.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,8BAA8B;EAC9B,mBAAmB;EACnB,WAAW;EACX,eAAe;EACf,MAAM;EACN,OAAO;EACP,kBAAkB;EAClB,yBAAyB;EACzB,WAAW;EACX,qCAAqC;EACrC,aAAa;AACf;;AAEA;EACE,iBAAiB;EACjB,iBAAiB;EACjB,eAAe;AACjB;;AAEA;EACE,yBAAyB;EACzB,YAAY;EACZ,WAAW;EACX,iBAAiB;EACjB,iBAAiB;EACjB,kBAAkB;EAClB,eAAe;AACjB;;AAEA;EACE,yBAAyB;AAC3B;;AAEA,gBAAgB;AAChB;EACE,aAAa;EACb,iBAAiB;EACjB,eAAe;AACjB;;AAEA;EACE;IACE,aAAa;IACb,sBAAsB;IACtB,WAAW;IACX,yBAAyB;IACzB,kBAAkB;IAClB,SAAS;IACT,OAAO;EACT;;EAEA;IACE,aAAa;EACf;;EAEA;IACE,cAAc;EAChB;;EAEA;IACE,cAAc;EAChB;AACF",sourcesContent:[".navbar {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  width: 100%;\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  padding: 12px 20px;\r\n  background-color: #2c3e50;\r\n  color: #fff;\r\n  box-shadow: 0 2px 6px rgba(0,0,0,0.3);\r\n  z-index: 1000;\r\n}\r\n\r\n.navbar-logo {\r\n  font-size: 1.4rem;\r\n  font-weight: bold;\r\n  cursor: pointer;\r\n}\r\n\r\n.navbar-links button {\r\n  background-color: #5dade2;\r\n  border: none;\r\n  color: #fff;\r\n  padding: 6px 12px;\r\n  margin-left: 10px;\r\n  border-radius: 6px;\r\n  cursor: pointer;\r\n}\r\n\r\n.navbar-links button:hover {\r\n  background-color: #4682c0;\r\n}\r\n\r\n/* Mobile menu */\r\n.mobile-menu-icon {\r\n  display: none;\r\n  font-size: 1.8rem;\r\n  cursor: pointer;\r\n}\r\n\r\n@media screen and (max-width: 768px) {\r\n  .navbar-links {\r\n    display: none;\r\n    flex-direction: column;\r\n    width: 100%;\r\n    background-color: #2c3e50;\r\n    position: absolute;\r\n    top: 60px;\r\n    left: 0;\r\n  }\r\n\r\n  .navbar-links.open {\r\n    display: flex;\r\n  }\r\n\r\n  .navbar-links button {\r\n    margin: 10px 0;\r\n  }\r\n\r\n  .mobile-menu-icon {\r\n    display: block;\r\n  }\r\n}\r\n"],sourceRoot:""}]);const i=l},659:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},749:(e,t,n)=>{n.d(t,{A:()=>i});var r=n(354),a=n.n(r),o=n(314),l=n.n(o)()(a());l.push([e.id,".register-container {\n  max-width: 400px;\n  margin: 50px auto;\n  padding: 30px;\n  background-color: #d6d6e7;\n  border-radius: 10px;\n  box-shadow: 0 4px 10px rgba(0,0,0,0.3);\n  color: #23531f;\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n}\n\n.register-container h2 {\n  text-align: center;\n  margin-bottom: 20px;\n  color: #151a19;\n}\n\n.register-container form {\n  display: flex;\n  flex-direction: column;\n}\n\n.register-container input {\n  padding: 12px 15px;\n  margin: 10px 0;\n  border: none;\n  border-radius: 6px;\n  font-size: 16px;\n\n}\n\n.register-container input:focus {\n  outline: none;\n  box-shadow: 0 0 5px #00ffd5;\n}\n\n.register-container button {\n  padding: 12px;\n  margin-top: 15px;\n  background-color: #00ffd5;\n  color: #1e1e2f;\n  border: none;\n  border-radius: 6px;\n  cursor: pointer;\n  font-weight: bold;\n  transition: 0.3s;\n}\n\n.register-container button:hover {\n  background-color: #00e0c0;\n}\n\n.message {\n  margin-top: 15px;\n  text-align: center;\n  color: #ff6b6b;\n  font-weight: bold;\n}\n\n/* Full page dark background */\n.register-page {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  height: 100vh;\n  background: linear-gradient(to right, #667eea, #764ba2);\n  font-family: Arial, sans-serif;\n}\n","",{version:3,sources:["webpack://./src/styles/Register.css"],names:[],mappings:"AAAA;EACE,gBAAgB;EAChB,iBAAiB;EACjB,aAAa;EACb,yBAAyB;EACzB,mBAAmB;EACnB,sCAAsC;EACtC,cAAc;EACd,4DAA4D;AAC9D;;AAEA;EACE,kBAAkB;EAClB,mBAAmB;EACnB,cAAc;AAChB;;AAEA;EACE,aAAa;EACb,sBAAsB;AACxB;;AAEA;EACE,kBAAkB;EAClB,cAAc;EACd,YAAY;EACZ,kBAAkB;EAClB,eAAe;;AAEjB;;AAEA;EACE,aAAa;EACb,2BAA2B;AAC7B;;AAEA;EACE,aAAa;EACb,gBAAgB;EAChB,yBAAyB;EACzB,cAAc;EACd,YAAY;EACZ,kBAAkB;EAClB,eAAe;EACf,iBAAiB;EACjB,gBAAgB;AAClB;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,gBAAgB;EAChB,kBAAkB;EAClB,cAAc;EACd,iBAAiB;AACnB;;AAEA,8BAA8B;AAC9B;EACE,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,uBAAuB;EACvB,aAAa;EACb,uDAAuD;EACvD,8BAA8B;AAChC",sourcesContent:[".register-container {\r\n  max-width: 400px;\r\n  margin: 50px auto;\r\n  padding: 30px;\r\n  background-color: #d6d6e7;\r\n  border-radius: 10px;\r\n  box-shadow: 0 4px 10px rgba(0,0,0,0.3);\r\n  color: #23531f;\r\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n}\r\n\r\n.register-container h2 {\r\n  text-align: center;\r\n  margin-bottom: 20px;\r\n  color: #151a19;\r\n}\r\n\r\n.register-container form {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.register-container input {\r\n  padding: 12px 15px;\r\n  margin: 10px 0;\r\n  border: none;\r\n  border-radius: 6px;\r\n  font-size: 16px;\r\n\r\n}\r\n\r\n.register-container input:focus {\r\n  outline: none;\r\n  box-shadow: 0 0 5px #00ffd5;\r\n}\r\n\r\n.register-container button {\r\n  padding: 12px;\r\n  margin-top: 15px;\r\n  background-color: #00ffd5;\r\n  color: #1e1e2f;\r\n  border: none;\r\n  border-radius: 6px;\r\n  cursor: pointer;\r\n  font-weight: bold;\r\n  transition: 0.3s;\r\n}\r\n\r\n.register-container button:hover {\r\n  background-color: #00e0c0;\r\n}\r\n\r\n.message {\r\n  margin-top: 15px;\r\n  text-align: center;\r\n  color: #ff6b6b;\r\n  font-weight: bold;\r\n}\r\n\r\n/* Full page dark background */\r\n.register-page {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  height: 100vh;\r\n  background: linear-gradient(to right, #667eea, #764ba2);\r\n  font-family: Arial, sans-serif;\r\n}\r\n"],sourceRoot:""}]);const i=l},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,a&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},869:(e,t)=>{var n=Symbol.for("react.transitional.element"),r=Symbol.for("react.portal"),a=Symbol.for("react.fragment"),o=Symbol.for("react.strict_mode"),l=Symbol.for("react.profiler"),i=Symbol.for("react.consumer"),u=Symbol.for("react.context"),s=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),f=Symbol.for("react.memo"),d=Symbol.for("react.lazy"),p=Symbol.iterator,m={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},h=Object.assign,g={};function y(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||m}function b(){}function v(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||m}y.prototype.isReactComponent={},y.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},y.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},b.prototype=y.prototype;var A=v.prototype=new b;A.constructor=v,h(A,y.prototype),A.isPureReactComponent=!0;var E=Array.isArray,w={H:null,A:null,T:null,S:null,V:null},k=Object.prototype.hasOwnProperty;function C(e,t,r,a,o,l){return r=l.ref,{$$typeof:n,type:e,key:t,ref:void 0!==r?r:null,props:l}}function S(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var x=/\/+/g;function B(e,t){return"object"==typeof e&&null!==e&&null!=e.key?(n=""+e.key,r={"=":"=0",":":"=2"},"$"+n.replace(/[=:]/g,function(e){return r[e]})):t.toString(36);var n,r}function T(){}function P(e,t,a,o,l){var i=typeof e;"undefined"!==i&&"boolean"!==i||(e=null);var u,s,c=!1;if(null===e)c=!0;else switch(i){case"bigint":case"string":case"number":c=!0;break;case"object":switch(e.$$typeof){case n:case r:c=!0;break;case d:return P((c=e._init)(e._payload),t,a,o,l)}}if(c)return l=l(e),c=""===o?"."+B(e,0):o,E(l)?(a="",null!=c&&(a=c.replace(x,"$&/")+"/"),P(l,t,a,"",function(e){return e})):null!=l&&(S(l)&&(u=l,s=a+(null==l.key||e&&e.key===l.key?"":(""+l.key).replace(x,"$&/")+"/")+c,l=C(u.type,s,void 0,0,0,u.props)),t.push(l)),1;c=0;var f,m=""===o?".":o+":";if(E(e))for(var h=0;h<e.length;h++)c+=P(o=e[h],t,a,i=m+B(o,h),l);else if("function"==typeof(h=null===(f=e)||"object"!=typeof f?null:"function"==typeof(f=p&&f[p]||f["@@iterator"])?f:null))for(e=h.call(e),h=0;!(o=e.next()).done;)c+=P(o=o.value,t,a,i=m+B(o,h++),l);else if("object"===i){if("function"==typeof e.then)return P(function(e){switch(e.status){case"fulfilled":return e.value;case"rejected":throw e.reason;default:switch("string"==typeof e.status?e.then(T,T):(e.status="pending",e.then(function(t){"pending"===e.status&&(e.status="fulfilled",e.value=t)},function(t){"pending"===e.status&&(e.status="rejected",e.reason=t)})),e.status){case"fulfilled":return e.value;case"rejected":throw e.reason}}throw e}(e),t,a,o,l);throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.")}return c}function O(e,t,n){if(null==e)return e;var r=[],a=0;return P(e,r,"","",function(e){return t.call(n,e,a++)}),r}function R(e){if(-1===e._status){var t=e._result;(t=t()).then(function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)},function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)}),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var N="function"==typeof reportError?reportError:function(e){if("object"==typeof window&&"function"==typeof window.ErrorEvent){var t=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:"object"==typeof e&&null!==e&&"string"==typeof e.message?String(e.message):String(e),error:e});if(!window.dispatchEvent(t))return}else if("object"==typeof process&&"function"==typeof process.emit)return void process.emit("uncaughtException",e);console.error(e)};function _(){}t.Children={map:O,forEach:function(e,t,n){O(e,function(){t.apply(this,arguments)},n)},count:function(e){var t=0;return O(e,function(){t++}),t},toArray:function(e){return O(e,function(e){return e})||[]},only:function(e){if(!S(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=y,t.Fragment=a,t.Profiler=l,t.PureComponent=v,t.StrictMode=o,t.Suspense=c,t.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=w,t.__COMPILER_RUNTIME={__proto__:null,c:function(e){return w.H.useMemoCache(e)}},t.cache=function(e){return function(){return e.apply(null,arguments)}},t.cloneElement=function(e,t,n){if(null==e)throw Error("The argument must be a React element, but you passed "+e+".");var r=h({},e.props),a=e.key;if(null!=t)for(o in t.ref,void 0!==t.key&&(a=""+t.key),t)!k.call(t,o)||"key"===o||"__self"===o||"__source"===o||"ref"===o&&void 0===t.ref||(r[o]=t[o]);var o=arguments.length-2;if(1===o)r.children=n;else if(1<o){for(var l=Array(o),i=0;i<o;i++)l[i]=arguments[i+2];r.children=l}return C(e.type,a,void 0,0,0,r)},t.createContext=function(e){return(e={$$typeof:u,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider=e,e.Consumer={$$typeof:i,_context:e},e},t.createElement=function(e,t,n){var r,a={},o=null;if(null!=t)for(r in void 0!==t.key&&(o=""+t.key),t)k.call(t,r)&&"key"!==r&&"__self"!==r&&"__source"!==r&&(a[r]=t[r]);var l=arguments.length-2;if(1===l)a.children=n;else if(1<l){for(var i=Array(l),u=0;u<l;u++)i[u]=arguments[u+2];a.children=i}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===a[r]&&(a[r]=l[r]);return C(e,o,void 0,0,0,a)},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:s,render:e}},t.isValidElement=S,t.lazy=function(e){return{$$typeof:d,_payload:{_status:-1,_result:e},_init:R}},t.memo=function(e,t){return{$$typeof:f,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=w.T,n={};w.T=n;try{var r=e(),a=w.S;null!==a&&a(n,r),"object"==typeof r&&null!==r&&"function"==typeof r.then&&r.then(_,N)}catch(e){N(e)}finally{w.T=t}},t.unstable_useCacheRefresh=function(){return w.H.useCacheRefresh()},t.use=function(e){return w.H.use(e)},t.useActionState=function(e,t,n){return w.H.useActionState(e,t,n)},t.useCallback=function(e,t){return w.H.useCallback(e,t)},t.useContext=function(e){return w.H.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e,t){return w.H.useDeferredValue(e,t)},t.useEffect=function(e,t,n){var r=w.H;if("function"==typeof n)throw Error("useEffect CRUD overload is not enabled in this build of React.");return r.useEffect(e,t)},t.useId=function(){return w.H.useId()},t.useImperativeHandle=function(e,t,n){return w.H.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return w.H.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return w.H.useLayoutEffect(e,t)},t.useMemo=function(e,t){return w.H.useMemo(e,t)},t.useOptimistic=function(e,t){return w.H.useOptimistic(e,t)},t.useReducer=function(e,t,n){return w.H.useReducer(e,t,n)},t.useRef=function(e){return w.H.useRef(e)},t.useState=function(e){return w.H.useState(e)},t.useSyncExternalStore=function(e,t,n){return w.H.useSyncExternalStore(e,t,n)},t.useTransition=function(){return w.H.useTransition()},t.version="19.1.1"},957:(e,t,n)=>{n.d(t,{A:()=>i});var r=n(354),a=n.n(r),o=n(314),l=n.n(o)()(a());l.push([e.id,"/* ------------------ Page Layout ------------------ */\n.settings-page {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: flex-start;\n  min-height: 100vh;\n  background: linear-gradient(to right, #1f2c34, #3a4750);\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n  color: #fff;\n  padding: 40px 20px;\n}\n\n.settings-page h1 {\n  font-size: 2.5rem;\n  margin-bottom: 30px;\n  text-align: center;\n  color: #f5f6fa;\n}\n\n/* ------------------ Container ------------------ */\n.settings-container {\n  display: flex;\n  flex-direction: column;\n  gap: 25px;\n  width: 100%;\n  max-width: 750px;\n}\n\n/* ------------------ Card ------------------ */\n.card {\n  background-color: #2c3e50;\n  padding: 25px;\n  border-radius: 12px;\n  box-shadow: 0 4px 14px rgba(0, 0, 0, 0.35);\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n  transition: transform 0.2s ease;\n}\n\n.card:hover {\n  transform: translateY(-2px);\n}\n\n.card h2 {\n  font-size: 1.5rem;\n  margin-bottom: 10px;\n  color: #f5f6fa;\n}\n\n/* ------------------ Inputs ------------------ */\n.card input,\n.card select {\n  padding: 10px 12px;\n  border-radius: 8px;\n  border: none;\n  background-color: #3a4750;\n  color: #fff;\n  font-size: 1rem;\n  width: 100%;\n  margin-bottom: 10px;\n  transition: background 0.2s ease, border 0.2s ease;\n}\n\n.card input::placeholder {\n  color: #b0b8c1;\n}\n\n.card input:focus,\n.card select:focus {\n  outline: 2px solid #5dade2;\n  background-color: #3f5564;\n}\n\n/* ------------------ Buttons ------------------ */\n.card button {\n  padding: 10px 16px;\n  border-radius: 8px;\n  border: none;\n  background-color: #5dade2;\n  color: #fff;\n  cursor: pointer;\n  font-size: 1rem;\n  transition: background 0.2s ease, transform 0.1s ease;\n}\n\n.card button:hover {\n  background-color: #4682c0;\n  transform: translateY(-1px);\n}\n\n.delete-btn {\n  background-color: #e74c3c;\n}\n\n.delete-btn:hover {\n  background-color: #c0392b;\n}\n\n.remove-btn {\n  background-color: #f39c12;\n  margin-top: 10px;\n  align-self: flex-start;\n}\n\n.remove-btn:hover {\n  background-color: #d68910;\n}\n\n/* ------------------ Service Input ------------------ */\n.service-input {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n/* ------------------ API Keys List ------------------ */\n.api-list-card ul.api-list {\n  list-style-type: none;\n  padding-left: 0;\n  margin-top: 10px;\n}\n\n.api-list-card ul.api-list li {\n  padding: 10px 14px;\n  border-radius: 6px;\n  background-color: #3f5564;\n  margin-bottom: 8px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  font-size: 1rem;\n  cursor: pointer;\n  transition: background 0.2s ease, color 0.2s ease, transform 0.1s ease;\n}\n\n.api-list-card ul.api-list li:hover {\n  transform: translateY(-1px);\n}\n\n.api-list-card ul.api-list li.selected {\n  background-color: #5dade2;\n  color: #1f2c34;\n}\n\n/* ------------------ Two-Factor Auth ------------------ */\n.card p {\n  margin-top: 10px;\n  font-size: 1rem;\n  color: #b0b8c1;\n}\n\n/* ------------------ Responsive ------------------ */\n@media (max-width: 768px) {\n  .settings-container {\n    width: 90%;\n  }\n\n  .card {\n    padding: 20px;\n  }\n}\n","",{version:3,sources:["webpack://./src/styles/Settings.css"],names:[],mappings:"AAAA,sDAAsD;AACtD;EACE,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,2BAA2B;EAC3B,iBAAiB;EACjB,uDAAuD;EACvD,4DAA4D;EAC5D,WAAW;EACX,kBAAkB;AACpB;;AAEA;EACE,iBAAiB;EACjB,mBAAmB;EACnB,kBAAkB;EAClB,cAAc;AAChB;;AAEA,oDAAoD;AACpD;EACE,aAAa;EACb,sBAAsB;EACtB,SAAS;EACT,WAAW;EACX,gBAAgB;AAClB;;AAEA,+CAA+C;AAC/C;EACE,yBAAyB;EACzB,aAAa;EACb,mBAAmB;EACnB,0CAA0C;EAC1C,aAAa;EACb,sBAAsB;EACtB,SAAS;EACT,+BAA+B;AACjC;;AAEA;EACE,2BAA2B;AAC7B;;AAEA;EACE,iBAAiB;EACjB,mBAAmB;EACnB,cAAc;AAChB;;AAEA,iDAAiD;AACjD;;EAEE,kBAAkB;EAClB,kBAAkB;EAClB,YAAY;EACZ,yBAAyB;EACzB,WAAW;EACX,eAAe;EACf,WAAW;EACX,mBAAmB;EACnB,kDAAkD;AACpD;;AAEA;EACE,cAAc;AAChB;;AAEA;;EAEE,0BAA0B;EAC1B,yBAAyB;AAC3B;;AAEA,kDAAkD;AAClD;EACE,kBAAkB;EAClB,kBAAkB;EAClB,YAAY;EACZ,yBAAyB;EACzB,WAAW;EACX,eAAe;EACf,eAAe;EACf,qDAAqD;AACvD;;AAEA;EACE,yBAAyB;EACzB,2BAA2B;AAC7B;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,yBAAyB;EACzB,gBAAgB;EAChB,sBAAsB;AACxB;;AAEA;EACE,yBAAyB;AAC3B;;AAEA,wDAAwD;AACxD;EACE,aAAa;EACb,sBAAsB;EACtB,SAAS;AACX;;AAEA,wDAAwD;AACxD;EACE,qBAAqB;EACrB,eAAe;EACf,gBAAgB;AAClB;;AAEA;EACE,kBAAkB;EAClB,kBAAkB;EAClB,yBAAyB;EACzB,kBAAkB;EAClB,aAAa;EACb,8BAA8B;EAC9B,mBAAmB;EACnB,eAAe;EACf,eAAe;EACf,sEAAsE;AACxE;;AAEA;EACE,2BAA2B;AAC7B;;AAEA;EACE,yBAAyB;EACzB,cAAc;AAChB;;AAEA,0DAA0D;AAC1D;EACE,gBAAgB;EAChB,eAAe;EACf,cAAc;AAChB;;AAEA,qDAAqD;AACrD;EACE;IACE,UAAU;EACZ;;EAEA;IACE,aAAa;EACf;AACF",sourcesContent:["/* ------------------ Page Layout ------------------ */\r\n.settings-page {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: flex-start;\r\n  min-height: 100vh;\r\n  background: linear-gradient(to right, #1f2c34, #3a4750);\r\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n  color: #fff;\r\n  padding: 40px 20px;\r\n}\r\n\r\n.settings-page h1 {\r\n  font-size: 2.5rem;\r\n  margin-bottom: 30px;\r\n  text-align: center;\r\n  color: #f5f6fa;\r\n}\r\n\r\n/* ------------------ Container ------------------ */\r\n.settings-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 25px;\r\n  width: 100%;\r\n  max-width: 750px;\r\n}\r\n\r\n/* ------------------ Card ------------------ */\r\n.card {\r\n  background-color: #2c3e50;\r\n  padding: 25px;\r\n  border-radius: 12px;\r\n  box-shadow: 0 4px 14px rgba(0, 0, 0, 0.35);\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 15px;\r\n  transition: transform 0.2s ease;\r\n}\r\n\r\n.card:hover {\r\n  transform: translateY(-2px);\r\n}\r\n\r\n.card h2 {\r\n  font-size: 1.5rem;\r\n  margin-bottom: 10px;\r\n  color: #f5f6fa;\r\n}\r\n\r\n/* ------------------ Inputs ------------------ */\r\n.card input,\r\n.card select {\r\n  padding: 10px 12px;\r\n  border-radius: 8px;\r\n  border: none;\r\n  background-color: #3a4750;\r\n  color: #fff;\r\n  font-size: 1rem;\r\n  width: 100%;\r\n  margin-bottom: 10px;\r\n  transition: background 0.2s ease, border 0.2s ease;\r\n}\r\n\r\n.card input::placeholder {\r\n  color: #b0b8c1;\r\n}\r\n\r\n.card input:focus,\r\n.card select:focus {\r\n  outline: 2px solid #5dade2;\r\n  background-color: #3f5564;\r\n}\r\n\r\n/* ------------------ Buttons ------------------ */\r\n.card button {\r\n  padding: 10px 16px;\r\n  border-radius: 8px;\r\n  border: none;\r\n  background-color: #5dade2;\r\n  color: #fff;\r\n  cursor: pointer;\r\n  font-size: 1rem;\r\n  transition: background 0.2s ease, transform 0.1s ease;\r\n}\r\n\r\n.card button:hover {\r\n  background-color: #4682c0;\r\n  transform: translateY(-1px);\r\n}\r\n\r\n.delete-btn {\r\n  background-color: #e74c3c;\r\n}\r\n\r\n.delete-btn:hover {\r\n  background-color: #c0392b;\r\n}\r\n\r\n.remove-btn {\r\n  background-color: #f39c12;\r\n  margin-top: 10px;\r\n  align-self: flex-start;\r\n}\r\n\r\n.remove-btn:hover {\r\n  background-color: #d68910;\r\n}\r\n\r\n/* ------------------ Service Input ------------------ */\r\n.service-input {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 10px;\r\n}\r\n\r\n/* ------------------ API Keys List ------------------ */\r\n.api-list-card ul.api-list {\r\n  list-style-type: none;\r\n  padding-left: 0;\r\n  margin-top: 10px;\r\n}\r\n\r\n.api-list-card ul.api-list li {\r\n  padding: 10px 14px;\r\n  border-radius: 6px;\r\n  background-color: #3f5564;\r\n  margin-bottom: 8px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  font-size: 1rem;\r\n  cursor: pointer;\r\n  transition: background 0.2s ease, color 0.2s ease, transform 0.1s ease;\r\n}\r\n\r\n.api-list-card ul.api-list li:hover {\r\n  transform: translateY(-1px);\r\n}\r\n\r\n.api-list-card ul.api-list li.selected {\r\n  background-color: #5dade2;\r\n  color: #1f2c34;\r\n}\r\n\r\n/* ------------------ Two-Factor Auth ------------------ */\r\n.card p {\r\n  margin-top: 10px;\r\n  font-size: 1rem;\r\n  color: #b0b8c1;\r\n}\r\n\r\n/* ------------------ Responsive ------------------ */\r\n@media (max-width: 768px) {\r\n  .settings-container {\r\n    width: 90%;\r\n  }\r\n\r\n  .card {\r\n    padding: 20px;\r\n  }\r\n}\r\n"],sourceRoot:""}]);const i=l},961:(e,t,n)=>{!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(221)},982:(e,t,n)=>{e.exports=n(477)},999:(e,t,n)=>{n.d(t,{A:()=>i});var r=n(354),a=n.n(r),o=n(314),l=n.n(o)()(a());l.push([e.id,"/* Full page background */\n.profile-page {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  min-height: 100vh;\n  background: linear-gradient(135deg, #1f2a38, #3a4a6b);\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n  color: #fff;\n  padding: 20px;\n}\n\n/* Page title */\n.profile-page h1 {\n  margin-bottom: 40px;\n  font-size: 2.8rem;\n  font-weight: 700;\n  text-shadow: 1px 1px 3px rgba(0,0,0,0.5);\n}\n\n/* Profile card container */\n.profile-container {\n  background-color: #242f3d;\n  padding: 40px 30px;\n  border-radius: 16px;\n  box-shadow: 0 12px 30px rgba(0, 0, 0, 0.4);\n  width: 400px;\n  max-width: 90%;\n  text-align: center;\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\n}\n\n.profile-container:hover {\n  transform: translateY(-5px);\n  box-shadow: 0 18px 40px rgba(0, 0, 0, 0.5);\n}\n\n/* Paragraphs */\n.profile-container p {\n  margin: 18px 0;\n  font-size: 1.2rem;\n  color: #e0e6f1;\n}\n\n/* Labels for input fields */\n.profile-container label {\n  display: block;\n  text-align: left;\n  margin: 12px 0 6px;\n  font-weight: 600;\n  font-size: 1rem;\n  color: #a0b0c0;\n}\n\n/* Input fields */\n.profile-container input {\n  width: 100%;\n  padding: 12px 14px;\n  margin-bottom: 15px;\n  border-radius: 8px;\n  border: 1px solid #5a6b7a;\n  background-color: #2c3a4a;\n  color: #fff;\n  font-size: 1rem;\n  box-sizing: border-box;\n  transition: border 0.3s ease, background 0.3s ease;\n}\n\n.profile-container input:focus {\n  outline: none;\n  border: 1px solid #00b894;\n  background-color: #34495e;\n}\n\n/* Buttons */\n.profile-container button {\n  padding: 12px 25px;\n  margin: 10px 5px 0px 5px;\n  background-color: #00b894;\n  color: #fff;\n  border: none;\n  border-radius: 8px;\n  cursor: pointer;\n  font-weight: 600;\n  font-size: 1rem;\n  transition: background 0.3s ease, transform 0.2s ease;\n}\n\n.profile-container button:hover {\n  background-color: #00a07f;\n  transform: translateY(-2px);\n}\n\n/* Logout button distinct style */\n.profile-container button:last-child {\n  background-color: #d63031;\n}\n\n.profile-container button:last-child:hover {\n  background-color: #c0392b;\n}\n\n/* Responsive design for smaller screens */\n@media (max-width: 500px) {\n  .profile-container {\n    width: 90%;\n    padding: 30px 20px;\n  }\n\n  .profile-page h1 {\n    font-size: 2rem;\n  }\n\n  .profile-container p,\n  .profile-container label {\n    font-size: 1rem;\n  }\n}\n","",{version:3,sources:["webpack://./src/styles/Profile.css"],names:[],mappings:"AAAA,yBAAyB;AACzB;EACE,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,uBAAuB;EACvB,iBAAiB;EACjB,qDAAqD;EACrD,4DAA4D;EAC5D,WAAW;EACX,aAAa;AACf;;AAEA,eAAe;AACf;EACE,mBAAmB;EACnB,iBAAiB;EACjB,gBAAgB;EAChB,wCAAwC;AAC1C;;AAEA,2BAA2B;AAC3B;EACE,yBAAyB;EACzB,kBAAkB;EAClB,mBAAmB;EACnB,0CAA0C;EAC1C,YAAY;EACZ,cAAc;EACd,kBAAkB;EAClB,qDAAqD;AACvD;;AAEA;EACE,2BAA2B;EAC3B,0CAA0C;AAC5C;;AAEA,eAAe;AACf;EACE,cAAc;EACd,iBAAiB;EACjB,cAAc;AAChB;;AAEA,4BAA4B;AAC5B;EACE,cAAc;EACd,gBAAgB;EAChB,kBAAkB;EAClB,gBAAgB;EAChB,eAAe;EACf,cAAc;AAChB;;AAEA,iBAAiB;AACjB;EACE,WAAW;EACX,kBAAkB;EAClB,mBAAmB;EACnB,kBAAkB;EAClB,yBAAyB;EACzB,yBAAyB;EACzB,WAAW;EACX,eAAe;EACf,sBAAsB;EACtB,kDAAkD;AACpD;;AAEA;EACE,aAAa;EACb,yBAAyB;EACzB,yBAAyB;AAC3B;;AAEA,YAAY;AACZ;EACE,kBAAkB;EAClB,wBAAwB;EACxB,yBAAyB;EACzB,WAAW;EACX,YAAY;EACZ,kBAAkB;EAClB,eAAe;EACf,gBAAgB;EAChB,eAAe;EACf,qDAAqD;AACvD;;AAEA;EACE,yBAAyB;EACzB,2BAA2B;AAC7B;;AAEA,iCAAiC;AACjC;EACE,yBAAyB;AAC3B;;AAEA;EACE,yBAAyB;AAC3B;;AAEA,0CAA0C;AAC1C;EACE;IACE,UAAU;IACV,kBAAkB;EACpB;;EAEA;IACE,eAAe;EACjB;;EAEA;;IAEE,eAAe;EACjB;AACF",sourcesContent:["/* Full page background */\r\n.profile-page {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  min-height: 100vh;\r\n  background: linear-gradient(135deg, #1f2a38, #3a4a6b);\r\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n  color: #fff;\r\n  padding: 20px;\r\n}\r\n\r\n/* Page title */\r\n.profile-page h1 {\r\n  margin-bottom: 40px;\r\n  font-size: 2.8rem;\r\n  font-weight: 700;\r\n  text-shadow: 1px 1px 3px rgba(0,0,0,0.5);\r\n}\r\n\r\n/* Profile card container */\r\n.profile-container {\r\n  background-color: #242f3d;\r\n  padding: 40px 30px;\r\n  border-radius: 16px;\r\n  box-shadow: 0 12px 30px rgba(0, 0, 0, 0.4);\r\n  width: 400px;\r\n  max-width: 90%;\r\n  text-align: center;\r\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\r\n}\r\n\r\n.profile-container:hover {\r\n  transform: translateY(-5px);\r\n  box-shadow: 0 18px 40px rgba(0, 0, 0, 0.5);\r\n}\r\n\r\n/* Paragraphs */\r\n.profile-container p {\r\n  margin: 18px 0;\r\n  font-size: 1.2rem;\r\n  color: #e0e6f1;\r\n}\r\n\r\n/* Labels for input fields */\r\n.profile-container label {\r\n  display: block;\r\n  text-align: left;\r\n  margin: 12px 0 6px;\r\n  font-weight: 600;\r\n  font-size: 1rem;\r\n  color: #a0b0c0;\r\n}\r\n\r\n/* Input fields */\r\n.profile-container input {\r\n  width: 100%;\r\n  padding: 12px 14px;\r\n  margin-bottom: 15px;\r\n  border-radius: 8px;\r\n  border: 1px solid #5a6b7a;\r\n  background-color: #2c3a4a;\r\n  color: #fff;\r\n  font-size: 1rem;\r\n  box-sizing: border-box;\r\n  transition: border 0.3s ease, background 0.3s ease;\r\n}\r\n\r\n.profile-container input:focus {\r\n  outline: none;\r\n  border: 1px solid #00b894;\r\n  background-color: #34495e;\r\n}\r\n\r\n/* Buttons */\r\n.profile-container button {\r\n  padding: 12px 25px;\r\n  margin: 10px 5px 0px 5px;\r\n  background-color: #00b894;\r\n  color: #fff;\r\n  border: none;\r\n  border-radius: 8px;\r\n  cursor: pointer;\r\n  font-weight: 600;\r\n  font-size: 1rem;\r\n  transition: background 0.3s ease, transform 0.2s ease;\r\n}\r\n\r\n.profile-container button:hover {\r\n  background-color: #00a07f;\r\n  transform: translateY(-2px);\r\n}\r\n\r\n/* Logout button distinct style */\r\n.profile-container button:last-child {\r\n  background-color: #d63031;\r\n}\r\n\r\n.profile-container button:last-child:hover {\r\n  background-color: #c0392b;\r\n}\r\n\r\n/* Responsive design for smaller screens */\r\n@media (max-width: 500px) {\r\n  .profile-container {\r\n    width: 90%;\r\n    padding: 30px 20px;\r\n  }\r\n\r\n  .profile-page h1 {\r\n    font-size: 2rem;\r\n  }\r\n\r\n  .profile-container p,\r\n  .profile-container label {\r\n    font-size: 1rem;\r\n  }\r\n}\r\n"],sourceRoot:""}]);const i=l}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var o=t[r]={id:r,exports:{}};return e[r](o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.nc=void 0;var r={};n.r(r),n.d(r,{hasBrowserEnv:()=>sn,hasStandardBrowserEnv:()=>fn,hasStandardBrowserWebWorkerEnv:()=>dn,navigator:()=>cn,origin:()=>pn});var a=n(540),o=n(338),l="popstate";function i(e={}){return function(e,t,n,r={}){let{window:a=document.defaultView,v5Compat:o=!1}=r,i=a.history,s="POP",p=null,m=h();function h(){return(i.state||{idx:null}).idx}function g(){s="POP";let e=h(),t=null==e?null:e-m;m=e,p&&p({action:s,location:b.location,delta:t})}function y(e){return function(e,t=!1){let n="http://localhost";"undefined"!=typeof window&&(n="null"!==window.location.origin?window.location.origin:window.location.href),u(n,"No window.location.(origin|href) available to create URL");let r="string"==typeof e?e:d(e);return r=r.replace(/ $/,"%20"),!t&&r.startsWith("//")&&(r=n+r),new URL(r,n)}(e)}null==m&&(m=0,i.replaceState({...i.state,idx:m},""));let b={get action(){return s},get location(){return e(a,i)},listen(e){if(p)throw new Error("A history only accepts one active listener");return a.addEventListener(l,g),p=e,()=>{a.removeEventListener(l,g),p=null}},createHref:e=>t(a,e),createURL:y,encodeLocation(e){let t=y(e);return{pathname:t.pathname,search:t.search,hash:t.hash}},push:function(e,t){s="PUSH";let r=f(b.location,e,t);n&&n(r,e),m=h()+1;let l=c(r,m),u=b.createHref(r);try{i.pushState(l,"",u)}catch(e){if(e instanceof DOMException&&"DataCloneError"===e.name)throw e;a.location.assign(u)}o&&p&&p({action:s,location:b.location,delta:1})},replace:function(e,t){s="REPLACE";let r=f(b.location,e,t);n&&n(r,e),m=h();let a=c(r,m),l=b.createHref(r);i.replaceState(a,"",l),o&&p&&p({action:s,location:b.location,delta:0})},go:e=>i.go(e)};return b}(function(e,t){let{pathname:n,search:r,hash:a}=e.location;return f("",{pathname:n,search:r,hash:a},t.state&&t.state.usr||null,t.state&&t.state.key||"default")},function(e,t){return"string"==typeof t?t:d(t)},null,e)}function u(e,t){if(!1===e||null==e)throw new Error(t)}function s(e,t){if(!e){"undefined"!=typeof console&&console.warn(t);try{throw new Error(t)}catch(e){}}}function c(e,t){return{usr:e.state,key:e.key,idx:t}}function f(e,t,n=null,r){return{pathname:"string"==typeof e?e:e.pathname,search:"",hash:"",..."string"==typeof t?p(t):t,state:n,key:t&&t.key||r||Math.random().toString(36).substring(2,10)}}function d({pathname:e="/",search:t="",hash:n=""}){return t&&"?"!==t&&(e+="?"===t.charAt(0)?t:"?"+t),n&&"#"!==n&&(e+="#"===n.charAt(0)?n:"#"+n),e}function p(e){let t={};if(e){let n=e.indexOf("#");n>=0&&(t.hash=e.substring(n),e=e.substring(0,n));let r=e.indexOf("?");r>=0&&(t.search=e.substring(r),e=e.substring(0,r)),e&&(t.pathname=e)}return t}function m(e,t,n="/"){return function(e,t,n,r){let a=T(("string"==typeof t?p(t):t).pathname||"/",n);if(null==a)return null;let o=h(e);!function(e){e.sort((e,t)=>e.score!==t.score?t.score-e.score:function(e,t){return e.length===t.length&&e.slice(0,-1).every((e,n)=>e===t[n])?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map(e=>e.childrenIndex),t.routesMeta.map(e=>e.childrenIndex)))}(o);let l=null;for(let e=0;null==l&&e<o.length;++e){let t=B(a);l=S(o[e],t,r)}return l}(e,t,n,!1)}function h(e,t=[],n=[],r="",a=!1){let o=(e,o,l=a,i)=>{let s={relativePath:void 0===i?e.path||"":i,caseSensitive:!0===e.caseSensitive,childrenIndex:o,route:e};if(s.relativePath.startsWith("/")){if(!s.relativePath.startsWith(r)&&l)return;u(s.relativePath.startsWith(r),`Absolute route path "${s.relativePath}" nested under path "${r}" is not valid. An absolute child route path must start with the combined path of all its parent routes.`),s.relativePath=s.relativePath.slice(r.length)}let c=N([r,s.relativePath]),f=n.concat(s);e.children&&e.children.length>0&&(u(!0!==e.index,`Index routes must not have child routes. Please remove all child routes from route path "${c}".`),h(e.children,t,f,c,l)),(null!=e.path||e.index)&&t.push({path:c,score:C(c,e.index),routesMeta:f})};return e.forEach((e,t)=>{if(""!==e.path&&e.path?.includes("?"))for(let n of g(e.path))o(e,t,!0,n);else o(e,t)}),t}function g(e){let t=e.split("/");if(0===t.length)return[];let[n,...r]=t,a=n.endsWith("?"),o=n.replace(/\?$/,"");if(0===r.length)return a?[o,""]:[o];let l=g(r.join("/")),i=[];return i.push(...l.map(e=>""===e?o:[o,e].join("/"))),a&&i.push(...l),i.map(t=>e.startsWith("/")&&""===t?"/":t)}new WeakMap;var y=/^:[\w-]+$/,b=3,v=2,A=1,E=10,w=-2,k=e=>"*"===e;function C(e,t){let n=e.split("/"),r=n.length;return n.some(k)&&(r+=w),t&&(r+=v),n.filter(e=>!k(e)).reduce((e,t)=>e+(y.test(t)?b:""===t?A:E),r)}function S(e,t,n=!1){let{routesMeta:r}=e,a={},o="/",l=[];for(let e=0;e<r.length;++e){let i=r[e],u=e===r.length-1,s="/"===o?t:t.slice(o.length)||"/",c=x({path:i.relativePath,caseSensitive:i.caseSensitive,end:u},s),f=i.route;if(!c&&u&&n&&!r[r.length-1].route.index&&(c=x({path:i.relativePath,caseSensitive:i.caseSensitive,end:!1},s)),!c)return null;Object.assign(a,c.params),l.push({params:a,pathname:N([o,c.pathname]),pathnameBase:_(N([o,c.pathnameBase])),route:f}),"/"!==c.pathnameBase&&(o=N([o,c.pathnameBase]))}return l}function x(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[n,r]=function(e,t=!1,n=!0){s("*"===e||!e.endsWith("*")||e.endsWith("/*"),`Route path "${e}" will be treated as if it were "${e.replace(/\*$/,"/*")}" because the \`*\` character must always follow a \`/\` in the pattern. To get rid of this warning, please change the route path to "${e.replace(/\*$/,"/*")}".`);let r=[],a="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^${}|()[\]]/g,"\\$&").replace(/\/:([\w-]+)(\?)?/g,(e,t,n)=>(r.push({paramName:t,isOptional:null!=n}),n?"/?([^\\/]+)?":"/([^\\/]+)")).replace(/\/([\w-]+)\?(\/|$)/g,"(/$1)?$2");return e.endsWith("*")?(r.push({paramName:"*"}),a+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):n?a+="\\/*$":""!==e&&"/"!==e&&(a+="(?:(?=\\/|$))"),[new RegExp(a,t?void 0:"i"),r]}(e.path,e.caseSensitive,e.end),a=t.match(n);if(!a)return null;let o=a[0],l=o.replace(/(.)\/+$/,"$1"),i=a.slice(1);return{params:r.reduce((e,{paramName:t,isOptional:n},r)=>{if("*"===t){let e=i[r]||"";l=o.slice(0,o.length-e.length).replace(/(.)\/+$/,"$1")}const a=i[r];return e[t]=n&&!a?void 0:(a||"").replace(/%2F/g,"/"),e},{}),pathname:o,pathnameBase:l,pattern:e}}function B(e){try{return e.split("/").map(e=>decodeURIComponent(e).replace(/\//g,"%2F")).join("/")}catch(t){return s(!1,`The URL path "${e}" could not be decoded because it is a malformed URL segment. This is probably due to a bad percent encoding (${t}).`),e}}function T(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let n=t.endsWith("/")?t.length-1:t.length,r=e.charAt(n);return r&&"/"!==r?null:e.slice(n)||"/"}function P(e,t,n,r){return`Cannot include a '${e}' character in a manually specified \`to.${t}\` field [${JSON.stringify(r)}].  Please separate it out to the \`to.${n}\` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.`}function O(e){let t=function(e){return e.filter((e,t)=>0===t||e.route.path&&e.route.path.length>0)}(e);return t.map((e,n)=>n===t.length-1?e.pathname:e.pathnameBase)}function R(e,t,n,r=!1){let a;"string"==typeof e?a=p(e):(a={...e},u(!a.pathname||!a.pathname.includes("?"),P("?","pathname","search",a)),u(!a.pathname||!a.pathname.includes("#"),P("#","pathname","hash",a)),u(!a.search||!a.search.includes("#"),P("#","search","hash",a)));let o,l=""===e||""===a.pathname,i=l?"/":a.pathname;if(null==i)o=n;else{let e=t.length-1;if(!r&&i.startsWith("..")){let t=i.split("/");for(;".."===t[0];)t.shift(),e-=1;a.pathname=t.join("/")}o=e>=0?t[e]:"/"}let s=function(e,t="/"){let{pathname:n,search:r="",hash:a=""}="string"==typeof e?p(e):e,o=n?n.startsWith("/")?n:function(e,t){let n=t.replace(/\/+$/,"").split("/");return e.split("/").forEach(e=>{".."===e?n.length>1&&n.pop():"."!==e&&n.push(e)}),n.length>1?n.join("/"):"/"}(n,t):t;return{pathname:o,search:z(r),hash:L(a)}}(a,o),c=i&&"/"!==i&&i.endsWith("/"),f=(l||"."===i)&&n.endsWith("/");return s.pathname.endsWith("/")||!c&&!f||(s.pathname+="/"),s}var N=e=>e.join("/").replace(/\/\/+/g,"/"),_=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),z=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",L=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"";function D(e){return null!=e&&"number"==typeof e.status&&"string"==typeof e.statusText&&"boolean"==typeof e.internal&&"data"in e}var j=["POST","PUT","PATCH","DELETE"],F=(new Set(j),["GET",...j]);new Set(F),Symbol("ResetLoaderData");var I=a.createContext(null);I.displayName="DataRouter";var M=a.createContext(null);M.displayName="DataRouterState";a.createContext(!1);var U=a.createContext({isTransitioning:!1});U.displayName="ViewTransition",a.createContext(new Map).displayName="Fetchers",a.createContext(null).displayName="Await";var $=a.createContext(null);$.displayName="Navigation";var W=a.createContext(null);W.displayName="Location";var H=a.createContext({outlet:null,matches:[],isDataRoute:!1});H.displayName="Route";var q=a.createContext(null);function V(){return null!=a.useContext(W)}function Y(){return u(V(),"useLocation() may be used only in the context of a <Router> component."),a.useContext(W).location}q.displayName="RouteError";var G="You should call navigate() in a React.useEffect(), not when your component is first rendered.";function K(e){a.useContext($).static||a.useLayoutEffect(e)}function Q(){let{isDataRoute:e}=a.useContext(H);return e?function(){let{router:e}=function(e){let t=a.useContext(I);return u(t,re(e)),t}("useNavigate"),t=ae("useNavigate"),n=a.useRef(!1);K(()=>{n.current=!0});let r=a.useCallback(async(r,a={})=>{s(n.current,G),n.current&&("number"==typeof r?e.navigate(r):await e.navigate(r,{fromRouteId:t,...a}))},[e,t]);return r}():function(){u(V(),"useNavigate() may be used only in the context of a <Router> component.");let e=a.useContext(I),{basename:t,navigator:n}=a.useContext($),{matches:r}=a.useContext(H),{pathname:o}=Y(),l=JSON.stringify(O(r)),i=a.useRef(!1);K(()=>{i.current=!0});let c=a.useCallback((r,a={})=>{if(s(i.current,G),!i.current)return;if("number"==typeof r)return void n.go(r);let u=R(r,JSON.parse(l),o,"path"===a.relative);null==e&&"/"!==t&&(u.pathname="/"===u.pathname?t:N([t,u.pathname])),(a.replace?n.replace:n.push)(u,a.state,a)},[t,n,l,o,e]);return c}()}function X(e,{relative:t}={}){let{matches:n}=a.useContext(H),{pathname:r}=Y(),o=JSON.stringify(O(n));return a.useMemo(()=>R(e,JSON.parse(o),r,"path"===t),[e,o,r,t])}function J(e,t,n,r){u(V(),"useRoutes() may be used only in the context of a <Router> component.");let{navigator:o}=a.useContext($),{matches:l}=a.useContext(H),i=l[l.length-1],c=i?i.params:{},f=i?i.pathname:"/",d=i?i.pathnameBase:"/",h=i&&i.route;{let e=h&&h.path||"";le(f,!h||e.endsWith("*")||e.endsWith("*?"),`You rendered descendant <Routes> (or called \`useRoutes()\`) at "${f}" (under <Route path="${e}">) but the parent route path has no trailing "*". This means if you navigate deeper, the parent won't match anymore and therefore the child routes will never render.\n\nPlease change the parent <Route path="${e}"> to <Route path="${"/"===e?"*":`${e}/*`}">.`)}let g,y=Y();if(t){let e="string"==typeof t?p(t):t;u("/"===d||e.pathname?.startsWith(d),`When overriding the location using \`<Routes location>\` or \`useRoutes(routes, location)\`, the location pathname must begin with the portion of the URL pathname that was matched by all parent routes. The current pathname base is "${d}" but pathname "${e.pathname}" was given in the \`location\` prop.`),g=e}else g=y;let b=g.pathname||"/",v=b;if("/"!==d){let e=d.replace(/^\//,"").split("/");v="/"+b.replace(/^\//,"").split("/").slice(e.length).join("/")}let A=m(e,{pathname:v});s(h||null!=A,`No routes matched location "${g.pathname}${g.search}${g.hash}" `),s(null==A||void 0!==A[A.length-1].route.element||void 0!==A[A.length-1].route.Component||void 0!==A[A.length-1].route.lazy,`Matched leaf route at location "${g.pathname}${g.search}${g.hash}" does not have an element or Component. This means it will render an <Outlet /> with a null value by default resulting in an "empty" page.`);let E=function(e,t=[],n=null){if(null==e){if(!n)return null;if(n.errors)e=n.matches;else{if(0!==t.length||n.initialized||!(n.matches.length>0))return null;e=n.matches}}let r=e,o=n?.errors;if(null!=o){let e=r.findIndex(e=>e.route.id&&void 0!==o?.[e.route.id]);u(e>=0,`Could not find a matching route for errors on route IDs: ${Object.keys(o).join(",")}`),r=r.slice(0,Math.min(r.length,e+1))}let l=!1,i=-1;if(n)for(let e=0;e<r.length;e++){let t=r[e];if((t.route.HydrateFallback||t.route.hydrateFallbackElement)&&(i=e),t.route.id){let{loaderData:e,errors:a}=n,o=t.route.loader&&!e.hasOwnProperty(t.route.id)&&(!a||void 0===a[t.route.id]);if(t.route.lazy||o){l=!0,r=i>=0?r.slice(0,i+1):[r[0]];break}}}return r.reduceRight((e,u,s)=>{let c,f=!1,d=null,p=null;n&&(c=o&&u.route.id?o[u.route.id]:void 0,d=u.route.errorElement||ee,l&&(i<0&&0===s?(le("route-fallback",!1,"No `HydrateFallback` element provided to render during initial hydration"),f=!0,p=null):i===s&&(f=!0,p=u.route.hydrateFallbackElement||null)));let m=t.concat(r.slice(0,s+1)),h=()=>{let t;return t=c?d:f?p:u.route.Component?a.createElement(u.route.Component,null):u.route.element?u.route.element:e,a.createElement(ne,{match:u,routeContext:{outlet:e,matches:m,isDataRoute:null!=n},children:t})};return n&&(u.route.ErrorBoundary||u.route.errorElement||0===s)?a.createElement(te,{location:n.location,revalidation:n.revalidation,component:d,error:c,children:h(),routeContext:{outlet:null,matches:m,isDataRoute:!0}}):h()},null)}(A&&A.map(e=>Object.assign({},e,{params:Object.assign({},c,e.params),pathname:N([d,o.encodeLocation?o.encodeLocation(e.pathname).pathname:e.pathname]),pathnameBase:"/"===e.pathnameBase?d:N([d,o.encodeLocation?o.encodeLocation(e.pathnameBase).pathname:e.pathnameBase])})),l,n,r);return t&&E?a.createElement(W.Provider,{value:{location:{pathname:"/",search:"",hash:"",state:null,key:"default",...g},navigationType:"POP"}},E):E}function Z(){let e=function(){let e=a.useContext(q),t=function(e){let t=a.useContext(M);return u(t,re(e)),t}("useRouteError"),n=ae("useRouteError");return void 0!==e?e:t.errors?.[n]}(),t=D(e)?`${e.status} ${e.statusText}`:e instanceof Error?e.message:JSON.stringify(e),n=e instanceof Error?e.stack:null,r="rgba(200,200,200, 0.5)",o={padding:"0.5rem",backgroundColor:r},l={padding:"2px 4px",backgroundColor:r},i=null;return console.error("Error handled by React Router default ErrorBoundary:",e),i=a.createElement(a.Fragment,null,a.createElement("p",null,"💿 Hey developer 👋"),a.createElement("p",null,"You can provide a way better UX than this when your app throws errors by providing your own ",a.createElement("code",{style:l},"ErrorBoundary")," or"," ",a.createElement("code",{style:l},"errorElement")," prop on your route.")),a.createElement(a.Fragment,null,a.createElement("h2",null,"Unexpected Application Error!"),a.createElement("h3",{style:{fontStyle:"italic"}},t),n?a.createElement("pre",{style:o},n):null,i)}a.createContext(null);var ee=a.createElement(Z,null),te=class extends a.Component{constructor(e){super(e),this.state={location:e.location,revalidation:e.revalidation,error:e.error}}static getDerivedStateFromError(e){return{error:e}}static getDerivedStateFromProps(e,t){return t.location!==e.location||"idle"!==t.revalidation&&"idle"===e.revalidation?{error:e.error,location:e.location,revalidation:e.revalidation}:{error:void 0!==e.error?e.error:t.error,location:t.location,revalidation:e.revalidation||t.revalidation}}componentDidCatch(e,t){console.error("React Router caught the following error during render",e,t)}render(){return void 0!==this.state.error?a.createElement(H.Provider,{value:this.props.routeContext},a.createElement(q.Provider,{value:this.state.error,children:this.props.component})):this.props.children}};function ne({routeContext:e,match:t,children:n}){let r=a.useContext(I);return r&&r.static&&r.staticContext&&(t.route.errorElement||t.route.ErrorBoundary)&&(r.staticContext._deepestRenderedBoundaryId=t.route.id),a.createElement(H.Provider,{value:e},n)}function re(e){return`${e} must be used within a data router.  See https://reactrouter.com/en/main/routers/picking-a-router.`}function ae(e){let t=function(e){let t=a.useContext(H);return u(t,re(e)),t}(e),n=t.matches[t.matches.length-1];return u(n.route.id,`${e} can only be used on routes that contain a unique "id"`),n.route.id}var oe={};function le(e,t,n){t||oe[e]||(oe[e]=!0,s(!1,n))}function ie({to:e,replace:t,state:n,relative:r}){u(V(),"<Navigate> may be used only in the context of a <Router> component.");let{static:o}=a.useContext($);s(!o,"<Navigate> must not be used on the initial render in a <StaticRouter>. This is a no-op, but you should modify your code so the <Navigate> is only ever rendered in response to some user interaction or state change.");let{matches:l}=a.useContext(H),{pathname:i}=Y(),c=Q(),f=R(e,O(l),i,"path"===r),d=JSON.stringify(f);return a.useEffect(()=>{c(JSON.parse(d),{replace:t,state:n,relative:r})},[c,d,r,t,n]),null}function ue(e){u(!1,"A <Route> is only ever to be used as the child of <Routes> element, never rendered directly. Please wrap your <Route> in a <Routes>.")}function se({basename:e="/",children:t=null,location:n,navigationType:r="POP",navigator:o,static:l=!1}){u(!V(),"You cannot render a <Router> inside another <Router>. You should never have more than one in your app.");let i=e.replace(/^\/*/,"/"),c=a.useMemo(()=>({basename:i,navigator:o,static:l,future:{}}),[i,o,l]);"string"==typeof n&&(n=p(n));let{pathname:f="/",search:d="",hash:m="",state:h=null,key:g="default"}=n,y=a.useMemo(()=>{let e=T(f,i);return null==e?null:{location:{pathname:e,search:d,hash:m,state:h,key:g},navigationType:r}},[i,f,d,m,h,g,r]);return s(null!=y,`<Router basename="${i}"> is not able to match the URL "${f}${d}${m}" because it does not start with the basename, so the <Router> won't render anything.`),null==y?null:a.createElement($.Provider,{value:c},a.createElement(W.Provider,{children:t,value:y}))}function ce({children:e,location:t}){return J(fe(e),t)}function fe(e,t=[]){let n=[];return a.Children.forEach(e,(e,r)=>{if(!a.isValidElement(e))return;let o=[...t,r];if(e.type===a.Fragment)return void n.push.apply(n,fe(e.props.children,o));u(e.type===ue,`[${"string"==typeof e.type?e.type:e.type.name}] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>`),u(!e.props.index||!e.props.children,"An index route cannot have child routes.");let l={id:e.props.id||o.join("-"),caseSensitive:e.props.caseSensitive,element:e.props.element,Component:e.props.Component,index:e.props.index,path:e.props.path,loader:e.props.loader,action:e.props.action,hydrateFallbackElement:e.props.hydrateFallbackElement,HydrateFallback:e.props.HydrateFallback,errorElement:e.props.errorElement,ErrorBoundary:e.props.ErrorBoundary,hasErrorBoundary:!0===e.props.hasErrorBoundary||null!=e.props.ErrorBoundary||null!=e.props.errorElement,shouldRevalidate:e.props.shouldRevalidate,handle:e.props.handle,lazy:e.props.lazy};e.props.children&&(l.children=fe(e.props.children,o)),n.push(l)}),n}a.memo(function({routes:e,future:t,state:n}){return J(e,void 0,n,t)}),a.Component;var de="get",pe="application/x-www-form-urlencoded";function me(e){return null!=e&&"string"==typeof e.tagName}var he=null,ge=new Set(["application/x-www-form-urlencoded","multipart/form-data","text/plain"]);function ye(e){return null==e||ge.has(e)?e:(s(!1,`"${e}" is not a valid \`encType\` for \`<Form>\`/\`<fetcher.Form>\` and will default to "${pe}"`),null)}function be(e,t){if(!1===e||null==e)throw new Error(t)}function ve(e){return null!=e&&(null==e.href?"preload"===e.rel&&"string"==typeof e.imageSrcSet&&"string"==typeof e.imageSizes:"string"==typeof e.rel&&"string"==typeof e.href)}function Ae(e,t,n,r,a,o){let l=(e,t)=>!n[t]||e.route.id!==n[t].route.id,i=(e,t)=>n[t].pathname!==e.pathname||n[t].route.path?.endsWith("*")&&n[t].params["*"]!==e.params["*"];return"assets"===o?t.filter((e,t)=>l(e,t)||i(e,t)):"data"===o?t.filter((t,o)=>{let u=r.routes[t.route.id];if(!u||!u.hasLoader)return!1;if(l(t,o)||i(t,o))return!0;if(t.route.shouldRevalidate){let r=t.route.shouldRevalidate({currentUrl:new URL(a.pathname+a.search+a.hash,window.origin),currentParams:n[0]?.params||{},nextUrl:new URL(e,window.origin),nextParams:t.params,defaultShouldRevalidate:!0});if("boolean"==typeof r)return r}return!0}):[]}function Ee(e,t,{includeHydrateFallback:n}={}){return r=e.map(e=>{let r=t.routes[e.route.id];if(!r)return[];let a=[r.module];return r.clientActionModule&&(a=a.concat(r.clientActionModule)),r.clientLoaderModule&&(a=a.concat(r.clientLoaderModule)),n&&r.hydrateFallbackModule&&(a=a.concat(r.hydrateFallbackModule)),r.imports&&(a=a.concat(r.imports)),a}).flat(1),[...new Set(r)];var r}function we(){let e=a.useContext(I);return be(e,"You must render this element inside a <DataRouterContext.Provider> element"),e}function ke(){let e=a.useContext(M);return be(e,"You must render this element inside a <DataRouterStateContext.Provider> element"),e}Object.getOwnPropertyNames(Object.prototype).sort().join("\0"),"undefined"!=typeof window?window:"undefined"!=typeof globalThis&&globalThis,Symbol("SingleFetchRedirect");var Ce=a.createContext(void 0);function Se(){let e=a.useContext(Ce);return be(e,"You must render this element inside a <HydratedRouter> element"),e}function xe(e,t){return n=>{e&&e(n),n.defaultPrevented||t(n)}}function Be({page:e,...t}){let{router:n}=we(),r=a.useMemo(()=>m(n.routes,e,n.basename),[n.routes,e,n.basename]);return r?a.createElement(Pe,{page:e,matches:r,...t}):null}function Te(e){let{manifest:t,routeModules:n}=Se(),[r,o]=a.useState([]);return a.useEffect(()=>{let r=!1;return async function(e,t,n){return function(e,t){let n=new Set,r=new Set(t);return e.reduce((e,a)=>{if(t&&(null==(o=a)||"string"!=typeof o.page)&&"script"===a.as&&a.href&&r.has(a.href))return e;var o;let l=JSON.stringify(function(e){let t={},n=Object.keys(e).sort();for(let r of n)t[r]=e[r];return t}(a));return n.has(l)||(n.add(l),e.push({key:l,link:a})),e},[])}((await Promise.all(e.map(async e=>{let r=t.routes[e.route.id];if(r){let e=await async function(e,t){if(e.id in t)return t[e.id];try{let n=await import(e.module);return t[e.id]=n,n}catch(t){return console.error(`Error loading route module \`${e.module}\`, reloading page...`),console.error(t),window.__reactRouterContext&&window.__reactRouterContext.isSpaMode,window.location.reload(),new Promise(()=>{})}}(r,n);return e.links?e.links():[]}return[]}))).flat(1).filter(ve).filter(e=>"stylesheet"===e.rel||"preload"===e.rel).map(e=>"stylesheet"===e.rel?{...e,rel:"prefetch",as:"style"}:{...e,rel:"prefetch"}))}(e,t,n).then(e=>{r||o(e)}),()=>{r=!0}},[e,t,n]),r}function Pe({page:e,matches:t,...n}){let r=Y(),{manifest:o,routeModules:l}=Se(),{basename:i}=we(),{loaderData:u,matches:s}=ke(),c=a.useMemo(()=>Ae(e,t,s,o,r,"data"),[e,t,s,o,r]),f=a.useMemo(()=>Ae(e,t,s,o,r,"assets"),[e,t,s,o,r]),d=a.useMemo(()=>{if(e===r.pathname+r.search+r.hash)return[];let n=new Set,a=!1;if(t.forEach(e=>{let t=o.routes[e.route.id];t&&t.hasLoader&&(!c.some(t=>t.route.id===e.route.id)&&e.route.id in u&&l[e.route.id]?.shouldRevalidate||t.hasClientLoader?a=!0:n.add(e.route.id))}),0===n.size)return[];let s=function(e,t,n){let r="string"==typeof e?new URL(e,"undefined"==typeof window?"server://singlefetch/":window.location.origin):e;return"/"===r.pathname?r.pathname=`_root.${n}`:t&&"/"===T(r.pathname,t)?r.pathname=`${t.replace(/\/$/,"")}/_root.${n}`:r.pathname=`${r.pathname.replace(/\/$/,"")}.${n}`,r}(e,i,"data");return a&&n.size>0&&s.searchParams.set("_routes",t.filter(e=>n.has(e.route.id)).map(e=>e.route.id).join(",")),[s.pathname+s.search]},[i,u,r,o,c,t,e,l]),p=a.useMemo(()=>Ee(f,o),[f,o]),m=Te(f);return a.createElement(a.Fragment,null,d.map(e=>a.createElement("link",{key:e,rel:"prefetch",as:"fetch",href:e,...n})),p.map(e=>a.createElement("link",{key:e,rel:"modulepreload",href:e,...n})),m.map(({key:e,link:t})=>a.createElement("link",{key:e,nonce:n.nonce,...t})))}Ce.displayName="FrameworkContext";function Oe(...e){return t=>{e.forEach(e=>{"function"==typeof e?e(t):null!=e&&(e.current=t)})}}a.Component;var Re="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement;try{Re&&(window.__reactRouterVersion="7.8.1")}catch(e){}function Ne({basename:e,children:t,window:n}){let r=a.useRef();null==r.current&&(r.current=i({window:n,v5Compat:!0}));let o=r.current,[l,u]=a.useState({action:o.action,location:o.location}),s=a.useCallback(e=>{a.startTransition(()=>u(e))},[u]);return a.useLayoutEffect(()=>o.listen(s),[o,s]),a.createElement(se,{basename:e,children:t,location:l.location,navigationType:l.action,navigator:o})}var _e=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,ze=a.forwardRef(function({onClick:e,discover:t="render",prefetch:n="none",relative:r,reloadDocument:o,replace:l,state:i,target:c,to:f,preventScrollReset:p,viewTransition:m,...h},g){let y,{basename:b}=a.useContext($),v="string"==typeof f&&_e.test(f),A=!1;if("string"==typeof f&&v&&(y=f,Re))try{let e=new URL(window.location.href),t=f.startsWith("//")?new URL(e.protocol+f):new URL(f),n=T(t.pathname,b);t.origin===e.origin&&null!=n?f=n+t.search+t.hash:A=!0}catch(e){s(!1,`<Link to="${f}"> contains an invalid URL which will probably break when clicked - please update to a valid URL path.`)}let E=function(e,{relative:t}={}){u(V(),"useHref() may be used only in the context of a <Router> component.");let{basename:n,navigator:r}=a.useContext($),{hash:o,pathname:l,search:i}=X(e,{relative:t}),s=l;return"/"!==n&&(s="/"===l?n:N([n,l])),r.createHref({pathname:s,search:i,hash:o})}(f,{relative:r}),[w,k,C]=function(e,t){let n=a.useContext(Ce),[r,o]=a.useState(!1),[l,i]=a.useState(!1),{onFocus:u,onBlur:s,onMouseEnter:c,onMouseLeave:f,onTouchStart:d}=t,p=a.useRef(null);a.useEffect(()=>{if("render"===e&&i(!0),"viewport"===e){let e=new IntersectionObserver(e=>{e.forEach(e=>{i(e.isIntersecting)})},{threshold:.5});return p.current&&e.observe(p.current),()=>{e.disconnect()}}},[e]),a.useEffect(()=>{if(r){let e=setTimeout(()=>{i(!0)},100);return()=>{clearTimeout(e)}}},[r]);let m=()=>{o(!0)},h=()=>{o(!1),i(!1)};return n?"intent"!==e?[l,p,{}]:[l,p,{onFocus:xe(u,m),onBlur:xe(s,h),onMouseEnter:xe(c,m),onMouseLeave:xe(f,h),onTouchStart:xe(d,m)}]:[!1,p,{}]}(n,h),S=function(e,{target:t,replace:n,state:r,preventScrollReset:o,relative:l,viewTransition:i}={}){let u=Q(),s=Y(),c=X(e,{relative:l});return a.useCallback(a=>{if(function(e,t){return!(0!==e.button||t&&"_self"!==t||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e))}(a,t)){a.preventDefault();let t=void 0!==n?n:d(s)===d(c);u(e,{replace:t,state:r,preventScrollReset:o,relative:l,viewTransition:i})}},[s,u,c,n,r,t,e,o,l,i])}(f,{replace:l,state:i,target:c,preventScrollReset:p,relative:r,viewTransition:m}),x=a.createElement("a",{...h,...C,href:y||E,onClick:A||o?e:function(t){e&&e(t),t.defaultPrevented||S(t)},ref:Oe(g,k),target:c,"data-discover":v||"render"!==t?void 0:"true"});return w&&!v?a.createElement(a.Fragment,null,x,a.createElement(Be,{page:E})):x});ze.displayName="Link",a.forwardRef(function({"aria-current":e="page",caseSensitive:t=!1,className:n="",end:r=!1,style:o,to:l,viewTransition:i,children:s,...c},f){let d=X(l,{relative:c.relative}),p=Y(),m=a.useContext(M),{navigator:h,basename:g}=a.useContext($),y=null!=m&&function(e,{relative:t}={}){let n=a.useContext(U);u(null!=n,"`useViewTransitionState` must be used within `react-router-dom`'s `RouterProvider`.  Did you accidentally import `RouterProvider` from `react-router`?");let{basename:r}=De("useViewTransitionState"),o=X(e,{relative:t});if(!n.isTransitioning)return!1;let l=T(n.currentLocation.pathname,r)||n.currentLocation.pathname,i=T(n.nextLocation.pathname,r)||n.nextLocation.pathname;return null!=x(o.pathname,i)||null!=x(o.pathname,l)}(d)&&!0===i,b=h.encodeLocation?h.encodeLocation(d).pathname:d.pathname,v=p.pathname,A=m&&m.navigation&&m.navigation.location?m.navigation.location.pathname:null;t||(v=v.toLowerCase(),A=A?A.toLowerCase():null,b=b.toLowerCase()),A&&g&&(A=T(A,g)||A);const E="/"!==b&&b.endsWith("/")?b.length-1:b.length;let w,k=v===b||!r&&v.startsWith(b)&&"/"===v.charAt(E),C=null!=A&&(A===b||!r&&A.startsWith(b)&&"/"===A.charAt(b.length)),S={isActive:k,isPending:C,isTransitioning:y},B=k?e:void 0;w="function"==typeof n?n(S):[n,k?"active":null,C?"pending":null,y?"transitioning":null].filter(Boolean).join(" ");let P="function"==typeof o?o(S):o;return a.createElement(ze,{...c,"aria-current":B,className:w,ref:f,style:P,to:l,viewTransition:i},"function"==typeof s?s(S):s)}).displayName="NavLink";var Le=a.forwardRef(({discover:e="render",fetcherKey:t,navigate:n,reloadDocument:r,replace:o,state:l,method:i=de,action:s,onSubmit:c,relative:f,preventScrollReset:p,viewTransition:m,...h},g)=>{let y=function(){let{router:e}=De("useSubmit"),{basename:t}=a.useContext($),n=ae("useRouteId");return a.useCallback(async(r,a={})=>{let{action:o,method:l,encType:i,formData:u,body:s}=function(e,t){let n,r,a,o,l;if(me(i=e)&&"form"===i.tagName.toLowerCase()){let l=e.getAttribute("action");r=l?T(l,t):null,n=e.getAttribute("method")||de,a=ye(e.getAttribute("enctype"))||pe,o=new FormData(e)}else if(function(e){return me(e)&&"button"===e.tagName.toLowerCase()}(e)||function(e){return me(e)&&"input"===e.tagName.toLowerCase()}(e)&&("submit"===e.type||"image"===e.type)){let l=e.form;if(null==l)throw new Error('Cannot submit a <button> or <input type="submit"> without a <form>');let i=e.getAttribute("formaction")||l.getAttribute("action");if(r=i?T(i,t):null,n=e.getAttribute("formmethod")||l.getAttribute("method")||de,a=ye(e.getAttribute("formenctype"))||ye(l.getAttribute("enctype"))||pe,o=new FormData(l,e),!function(){if(null===he)try{new FormData(document.createElement("form"),0),he=!1}catch(e){he=!0}return he}()){let{name:t,type:n,value:r}=e;if("image"===n){let e=t?`${t}.`:"";o.append(`${e}x`,"0"),o.append(`${e}y`,"0")}else t&&o.append(t,r)}}else{if(me(e))throw new Error('Cannot submit element that is not <form>, <button>, or <input type="submit|image">');n=de,r=null,a=pe,l=e}var i;return o&&"text/plain"===a&&(l=o,o=void 0),{action:r,method:n.toLowerCase(),encType:a,formData:o,body:l}}(r,t);if(!1===a.navigate){let t=a.fetcherKey||Fe();await e.fetch(t,n,a.action||o,{preventScrollReset:a.preventScrollReset,formData:u,body:s,formMethod:a.method||l,formEncType:a.encType||i,flushSync:a.flushSync})}else await e.navigate(a.action||o,{preventScrollReset:a.preventScrollReset,formData:u,body:s,formMethod:a.method||l,formEncType:a.encType||i,replace:a.replace,state:a.state,fromRouteId:n,flushSync:a.flushSync,viewTransition:a.viewTransition})},[e,t,n])}(),b=function(e,{relative:t}={}){let{basename:n}=a.useContext($),r=a.useContext(H);u(r,"useFormAction must be used inside a RouteContext");let[o]=r.matches.slice(-1),l={...X(e||".",{relative:t})},i=Y();if(null==e){l.search=i.search;let e=new URLSearchParams(l.search),t=e.getAll("index");if(t.some(e=>""===e)){e.delete("index"),t.filter(e=>e).forEach(t=>e.append("index",t));let n=e.toString();l.search=n?`?${n}`:""}}return e&&"."!==e||!o.route.index||(l.search=l.search?l.search.replace(/^\?/,"?index&"):"?index"),"/"!==n&&(l.pathname="/"===l.pathname?n:N([n,l.pathname])),d(l)}(s,{relative:f}),v="get"===i.toLowerCase()?"get":"post",A="string"==typeof s&&_e.test(s);return a.createElement("form",{ref:g,method:v,action:b,onSubmit:r?c:e=>{if(c&&c(e),e.defaultPrevented)return;e.preventDefault();let r=e.nativeEvent.submitter,a=r?.getAttribute("formmethod")||i;y(r||e.currentTarget,{fetcherKey:t,method:a,navigate:n,replace:o,state:l,relative:f,preventScrollReset:p,viewTransition:m})},...h,"data-discover":A||"render"!==e?void 0:"true"})});function De(e){let t=a.useContext(I);return u(t,function(e){return`${e} must be used within a data router.  See https://reactrouter.com/en/main/routers/picking-a-router.`}(e)),t}Le.displayName="Form";var je=0,Fe=()=>`__${String(++je)}__`;var Ie=n(72),Me=n.n(Ie),Ue=n(825),$e=n.n(Ue),We=n(659),He=n.n(We),qe=n(56),Ve=n.n(qe),Ye=n(159),Ge=n.n(Ye),Ke=n(113),Qe=n.n(Ke),Xe=n(171),Je={};function Ze(e,t){return function(){return e.apply(t,arguments)}}Je.styleTagTransform=Qe(),Je.setAttributes=Ve(),Je.insert=He().bind(null,"head"),Je.domAPI=$e(),Je.insertStyleElement=Ge(),Me()(Xe.A,Je),Xe.A&&Xe.A.locals&&Xe.A.locals;const{toString:et}=Object.prototype,{getPrototypeOf:tt}=Object,{iterator:nt,toStringTag:rt}=Symbol,at=(ot=Object.create(null),e=>{const t=et.call(e);return ot[t]||(ot[t]=t.slice(8,-1).toLowerCase())});var ot;const lt=e=>(e=e.toLowerCase(),t=>at(t)===e),it=e=>t=>typeof t===e,{isArray:ut}=Array,st=it("undefined");function ct(e){return null!==e&&!st(e)&&null!==e.constructor&&!st(e.constructor)&&pt(e.constructor.isBuffer)&&e.constructor.isBuffer(e)}const ft=lt("ArrayBuffer"),dt=it("string"),pt=it("function"),mt=it("number"),ht=e=>null!==e&&"object"==typeof e,gt=e=>{if("object"!==at(e))return!1;const t=tt(e);return!(null!==t&&t!==Object.prototype&&null!==Object.getPrototypeOf(t)||rt in e||nt in e)},yt=lt("Date"),bt=lt("File"),vt=lt("Blob"),At=lt("FileList"),Et=lt("URLSearchParams"),[wt,kt,Ct,St]=["ReadableStream","Request","Response","Headers"].map(lt);function xt(e,t,{allOwnKeys:n=!1}={}){if(null==e)return;let r,a;if("object"!=typeof e&&(e=[e]),ut(e))for(r=0,a=e.length;r<a;r++)t.call(null,e[r],r,e);else{if(ct(e))return;const a=n?Object.getOwnPropertyNames(e):Object.keys(e),o=a.length;let l;for(r=0;r<o;r++)l=a[r],t.call(null,e[l],l,e)}}function Bt(e,t){if(ct(e))return null;t=t.toLowerCase();const n=Object.keys(e);let r,a=n.length;for(;a-- >0;)if(r=n[a],t===r.toLowerCase())return r;return null}const Tt="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:global,Pt=e=>!st(e)&&e!==Tt,Ot=(Rt="undefined"!=typeof Uint8Array&&tt(Uint8Array),e=>Rt&&e instanceof Rt);var Rt;const Nt=lt("HTMLFormElement"),_t=(({hasOwnProperty:e})=>(t,n)=>e.call(t,n))(Object.prototype),zt=lt("RegExp"),Lt=(e,t)=>{const n=Object.getOwnPropertyDescriptors(e),r={};xt(n,(n,a)=>{let o;!1!==(o=t(n,a,e))&&(r[a]=o||n)}),Object.defineProperties(e,r)},Dt=lt("AsyncFunction"),jt=(Ft="function"==typeof setImmediate,It=pt(Tt.postMessage),Ft?setImmediate:It?(Mt=`axios@${Math.random()}`,Ut=[],Tt.addEventListener("message",({source:e,data:t})=>{e===Tt&&t===Mt&&Ut.length&&Ut.shift()()},!1),e=>{Ut.push(e),Tt.postMessage(Mt,"*")}):e=>setTimeout(e));var Ft,It,Mt,Ut;const $t="undefined"!=typeof queueMicrotask?queueMicrotask.bind(Tt):"undefined"!=typeof process&&process.nextTick||jt,Wt={isArray:ut,isArrayBuffer:ft,isBuffer:ct,isFormData:e=>{let t;return e&&("function"==typeof FormData&&e instanceof FormData||pt(e.append)&&("formdata"===(t=at(e))||"object"===t&&pt(e.toString)&&"[object FormData]"===e.toString()))},isArrayBufferView:function(e){let t;return t="undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&ft(e.buffer),t},isString:dt,isNumber:mt,isBoolean:e=>!0===e||!1===e,isObject:ht,isPlainObject:gt,isEmptyObject:e=>{if(!ht(e)||ct(e))return!1;try{return 0===Object.keys(e).length&&Object.getPrototypeOf(e)===Object.prototype}catch(e){return!1}},isReadableStream:wt,isRequest:kt,isResponse:Ct,isHeaders:St,isUndefined:st,isDate:yt,isFile:bt,isBlob:vt,isRegExp:zt,isFunction:pt,isStream:e=>ht(e)&&pt(e.pipe),isURLSearchParams:Et,isTypedArray:Ot,isFileList:At,forEach:xt,merge:function e(){const{caseless:t}=Pt(this)&&this||{},n={},r=(r,a)=>{const o=t&&Bt(n,a)||a;gt(n[o])&&gt(r)?n[o]=e(n[o],r):gt(r)?n[o]=e({},r):ut(r)?n[o]=r.slice():n[o]=r};for(let e=0,t=arguments.length;e<t;e++)arguments[e]&&xt(arguments[e],r);return n},extend:(e,t,n,{allOwnKeys:r}={})=>(xt(t,(t,r)=>{n&&pt(t)?e[r]=Ze(t,n):e[r]=t},{allOwnKeys:r}),e),trim:e=>e.trim?e.trim():e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,""),stripBOM:e=>(65279===e.charCodeAt(0)&&(e=e.slice(1)),e),inherits:(e,t,n,r)=>{e.prototype=Object.create(t.prototype,r),e.prototype.constructor=e,Object.defineProperty(e,"super",{value:t.prototype}),n&&Object.assign(e.prototype,n)},toFlatObject:(e,t,n,r)=>{let a,o,l;const i={};if(t=t||{},null==e)return t;do{for(a=Object.getOwnPropertyNames(e),o=a.length;o-- >0;)l=a[o],r&&!r(l,e,t)||i[l]||(t[l]=e[l],i[l]=!0);e=!1!==n&&tt(e)}while(e&&(!n||n(e,t))&&e!==Object.prototype);return t},kindOf:at,kindOfTest:lt,endsWith:(e,t,n)=>{e=String(e),(void 0===n||n>e.length)&&(n=e.length),n-=t.length;const r=e.indexOf(t,n);return-1!==r&&r===n},toArray:e=>{if(!e)return null;if(ut(e))return e;let t=e.length;if(!mt(t))return null;const n=new Array(t);for(;t-- >0;)n[t]=e[t];return n},forEachEntry:(e,t)=>{const n=(e&&e[nt]).call(e);let r;for(;(r=n.next())&&!r.done;){const n=r.value;t.call(e,n[0],n[1])}},matchAll:(e,t)=>{let n;const r=[];for(;null!==(n=e.exec(t));)r.push(n);return r},isHTMLForm:Nt,hasOwnProperty:_t,hasOwnProp:_t,reduceDescriptors:Lt,freezeMethods:e=>{Lt(e,(t,n)=>{if(pt(e)&&-1!==["arguments","caller","callee"].indexOf(n))return!1;const r=e[n];pt(r)&&(t.enumerable=!1,"writable"in t?t.writable=!1:t.set||(t.set=()=>{throw Error("Can not rewrite read-only method '"+n+"'")}))})},toObjectSet:(e,t)=>{const n={},r=e=>{e.forEach(e=>{n[e]=!0})};return ut(e)?r(e):r(String(e).split(t)),n},toCamelCase:e=>e.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,function(e,t,n){return t.toUpperCase()+n}),noop:()=>{},toFiniteNumber:(e,t)=>null!=e&&Number.isFinite(e=+e)?e:t,findKey:Bt,global:Tt,isContextDefined:Pt,isSpecCompliantForm:function(e){return!!(e&&pt(e.append)&&"FormData"===e[rt]&&e[nt])},toJSONObject:e=>{const t=new Array(10),n=(e,r)=>{if(ht(e)){if(t.indexOf(e)>=0)return;if(ct(e))return e;if(!("toJSON"in e)){t[r]=e;const a=ut(e)?[]:{};return xt(e,(e,t)=>{const o=n(e,r+1);!st(o)&&(a[t]=o)}),t[r]=void 0,a}}return e};return n(e,0)},isAsyncFn:Dt,isThenable:e=>e&&(ht(e)||pt(e))&&pt(e.then)&&pt(e.catch),setImmediate:jt,asap:$t,isIterable:e=>null!=e&&pt(e[nt])};function Ht(e,t,n,r,a){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=(new Error).stack,this.message=e,this.name="AxiosError",t&&(this.code=t),n&&(this.config=n),r&&(this.request=r),a&&(this.response=a,this.status=a.status?a.status:null)}Wt.inherits(Ht,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:Wt.toJSONObject(this.config),code:this.code,status:this.status}}});const qt=Ht.prototype,Vt={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED","ERR_NOT_SUPPORT","ERR_INVALID_URL"].forEach(e=>{Vt[e]={value:e}}),Object.defineProperties(Ht,Vt),Object.defineProperty(qt,"isAxiosError",{value:!0}),Ht.from=(e,t,n,r,a,o)=>{const l=Object.create(qt);return Wt.toFlatObject(e,l,function(e){return e!==Error.prototype},e=>"isAxiosError"!==e),Ht.call(l,e.message,t,n,r,a),l.cause=e,l.name=e.name,o&&Object.assign(l,o),l};const Yt=Ht;function Gt(e){return Wt.isPlainObject(e)||Wt.isArray(e)}function Kt(e){return Wt.endsWith(e,"[]")?e.slice(0,-2):e}function Qt(e,t,n){return e?e.concat(t).map(function(e,t){return e=Kt(e),!n&&t?"["+e+"]":e}).join(n?".":""):t}const Xt=Wt.toFlatObject(Wt,{},null,function(e){return/^is[A-Z]/.test(e)}),Jt=function(e,t,n){if(!Wt.isObject(e))throw new TypeError("target must be an object");t=t||new FormData;const r=(n=Wt.toFlatObject(n,{metaTokens:!0,dots:!1,indexes:!1},!1,function(e,t){return!Wt.isUndefined(t[e])})).metaTokens,a=n.visitor||s,o=n.dots,l=n.indexes,i=(n.Blob||"undefined"!=typeof Blob&&Blob)&&Wt.isSpecCompliantForm(t);if(!Wt.isFunction(a))throw new TypeError("visitor must be a function");function u(e){if(null===e)return"";if(Wt.isDate(e))return e.toISOString();if(Wt.isBoolean(e))return e.toString();if(!i&&Wt.isBlob(e))throw new Yt("Blob is not supported. Use a Buffer instead.");return Wt.isArrayBuffer(e)||Wt.isTypedArray(e)?i&&"function"==typeof Blob?new Blob([e]):Buffer.from(e):e}function s(e,n,a){let i=e;if(e&&!a&&"object"==typeof e)if(Wt.endsWith(n,"{}"))n=r?n:n.slice(0,-2),e=JSON.stringify(e);else if(Wt.isArray(e)&&function(e){return Wt.isArray(e)&&!e.some(Gt)}(e)||(Wt.isFileList(e)||Wt.endsWith(n,"[]"))&&(i=Wt.toArray(e)))return n=Kt(n),i.forEach(function(e,r){!Wt.isUndefined(e)&&null!==e&&t.append(!0===l?Qt([n],r,o):null===l?n:n+"[]",u(e))}),!1;return!!Gt(e)||(t.append(Qt(a,n,o),u(e)),!1)}const c=[],f=Object.assign(Xt,{defaultVisitor:s,convertValue:u,isVisitable:Gt});if(!Wt.isObject(e))throw new TypeError("data must be an object");return function e(n,r){if(!Wt.isUndefined(n)){if(-1!==c.indexOf(n))throw Error("Circular reference detected in "+r.join("."));c.push(n),Wt.forEach(n,function(n,o){!0===(!(Wt.isUndefined(n)||null===n)&&a.call(t,n,Wt.isString(o)?o.trim():o,r,f))&&e(n,r?r.concat(o):[o])}),c.pop()}}(e),t};function Zt(e){const t={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"};return encodeURIComponent(e).replace(/[!'()~]|%20|%00/g,function(e){return t[e]})}function en(e,t){this._pairs=[],e&&Jt(e,this,t)}const tn=en.prototype;tn.append=function(e,t){this._pairs.push([e,t])},tn.toString=function(e){const t=e?function(t){return e.call(this,t,Zt)}:Zt;return this._pairs.map(function(e){return t(e[0])+"="+t(e[1])},"").join("&")};const nn=en;function rn(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}function an(e,t,n){if(!t)return e;const r=n&&n.encode||rn;Wt.isFunction(n)&&(n={serialize:n});const a=n&&n.serialize;let o;if(o=a?a(t,n):Wt.isURLSearchParams(t)?t.toString():new nn(t,n).toString(r),o){const t=e.indexOf("#");-1!==t&&(e=e.slice(0,t)),e+=(-1===e.indexOf("?")?"?":"&")+o}return e}const on=class{constructor(){this.handlers=[]}use(e,t,n){return this.handlers.push({fulfilled:e,rejected:t,synchronous:!!n&&n.synchronous,runWhen:n?n.runWhen:null}),this.handlers.length-1}eject(e){this.handlers[e]&&(this.handlers[e]=null)}clear(){this.handlers&&(this.handlers=[])}forEach(e){Wt.forEach(this.handlers,function(t){null!==t&&e(t)})}},ln={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},un={isBrowser:!0,classes:{URLSearchParams:"undefined"!=typeof URLSearchParams?URLSearchParams:nn,FormData:"undefined"!=typeof FormData?FormData:null,Blob:"undefined"!=typeof Blob?Blob:null},protocols:["http","https","file","blob","url","data"]},sn="undefined"!=typeof window&&"undefined"!=typeof document,cn="object"==typeof navigator&&navigator||void 0,fn=sn&&(!cn||["ReactNative","NativeScript","NS"].indexOf(cn.product)<0),dn="undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope&&"function"==typeof self.importScripts,pn=sn&&window.location.href||"http://localhost",mn={...r,...un},hn=function(e){function t(e,n,r,a){let o=e[a++];if("__proto__"===o)return!0;const l=Number.isFinite(+o),i=a>=e.length;return o=!o&&Wt.isArray(r)?r.length:o,i?(Wt.hasOwnProp(r,o)?r[o]=[r[o],n]:r[o]=n,!l):(r[o]&&Wt.isObject(r[o])||(r[o]=[]),t(e,n,r[o],a)&&Wt.isArray(r[o])&&(r[o]=function(e){const t={},n=Object.keys(e);let r;const a=n.length;let o;for(r=0;r<a;r++)o=n[r],t[o]=e[o];return t}(r[o])),!l)}if(Wt.isFormData(e)&&Wt.isFunction(e.entries)){const n={};return Wt.forEachEntry(e,(e,r)=>{t(function(e){return Wt.matchAll(/\w+|\[(\w*)]/g,e).map(e=>"[]"===e[0]?"":e[1]||e[0])}(e),r,n,0)}),n}return null},gn={transitional:ln,adapter:["xhr","http","fetch"],transformRequest:[function(e,t){const n=t.getContentType()||"",r=n.indexOf("application/json")>-1,a=Wt.isObject(e);if(a&&Wt.isHTMLForm(e)&&(e=new FormData(e)),Wt.isFormData(e))return r?JSON.stringify(hn(e)):e;if(Wt.isArrayBuffer(e)||Wt.isBuffer(e)||Wt.isStream(e)||Wt.isFile(e)||Wt.isBlob(e)||Wt.isReadableStream(e))return e;if(Wt.isArrayBufferView(e))return e.buffer;if(Wt.isURLSearchParams(e))return t.setContentType("application/x-www-form-urlencoded;charset=utf-8",!1),e.toString();let o;if(a){if(n.indexOf("application/x-www-form-urlencoded")>-1)return function(e,t){return Jt(e,new mn.classes.URLSearchParams,{visitor:function(e,t,n,r){return mn.isNode&&Wt.isBuffer(e)?(this.append(t,e.toString("base64")),!1):r.defaultVisitor.apply(this,arguments)},...t})}(e,this.formSerializer).toString();if((o=Wt.isFileList(e))||n.indexOf("multipart/form-data")>-1){const t=this.env&&this.env.FormData;return Jt(o?{"files[]":e}:e,t&&new t,this.formSerializer)}}return a||r?(t.setContentType("application/json",!1),function(e){if(Wt.isString(e))try{return(0,JSON.parse)(e),Wt.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(0,JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){const t=this.transitional||gn.transitional,n=t&&t.forcedJSONParsing,r="json"===this.responseType;if(Wt.isResponse(e)||Wt.isReadableStream(e))return e;if(e&&Wt.isString(e)&&(n&&!this.responseType||r)){const n=!(t&&t.silentJSONParsing)&&r;try{return JSON.parse(e)}catch(e){if(n){if("SyntaxError"===e.name)throw Yt.from(e,Yt.ERR_BAD_RESPONSE,this,null,this.response);throw e}}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:mn.classes.FormData,Blob:mn.classes.Blob},validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*","Content-Type":void 0}}};Wt.forEach(["delete","get","head","post","put","patch"],e=>{gn.headers[e]={}});const yn=gn,bn=Wt.toObjectSet(["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"]),vn=Symbol("internals");function An(e){return e&&String(e).trim().toLowerCase()}function En(e){return!1===e||null==e?e:Wt.isArray(e)?e.map(En):String(e)}function wn(e,t,n,r,a){return Wt.isFunction(r)?r.call(this,t,n):(a&&(t=n),Wt.isString(t)?Wt.isString(r)?-1!==t.indexOf(r):Wt.isRegExp(r)?r.test(t):void 0:void 0)}class kn{constructor(e){e&&this.set(e)}set(e,t,n){const r=this;function a(e,t,n){const a=An(t);if(!a)throw new Error("header name must be a non-empty string");const o=Wt.findKey(r,a);(!o||void 0===r[o]||!0===n||void 0===n&&!1!==r[o])&&(r[o||t]=En(e))}const o=(e,t)=>Wt.forEach(e,(e,n)=>a(e,n,t));if(Wt.isPlainObject(e)||e instanceof this.constructor)o(e,t);else if(Wt.isString(e)&&(e=e.trim())&&!/^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(e.trim()))o((e=>{const t={};let n,r,a;return e&&e.split("\n").forEach(function(e){a=e.indexOf(":"),n=e.substring(0,a).trim().toLowerCase(),r=e.substring(a+1).trim(),!n||t[n]&&bn[n]||("set-cookie"===n?t[n]?t[n].push(r):t[n]=[r]:t[n]=t[n]?t[n]+", "+r:r)}),t})(e),t);else if(Wt.isObject(e)&&Wt.isIterable(e)){let n,r,a={};for(const t of e){if(!Wt.isArray(t))throw TypeError("Object iterator must return a key-value pair");a[r=t[0]]=(n=a[r])?Wt.isArray(n)?[...n,t[1]]:[n,t[1]]:t[1]}o(a,t)}else null!=e&&a(t,e,n);return this}get(e,t){if(e=An(e)){const n=Wt.findKey(this,e);if(n){const e=this[n];if(!t)return e;if(!0===t)return function(e){const t=Object.create(null),n=/([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;let r;for(;r=n.exec(e);)t[r[1]]=r[2];return t}(e);if(Wt.isFunction(t))return t.call(this,e,n);if(Wt.isRegExp(t))return t.exec(e);throw new TypeError("parser must be boolean|regexp|function")}}}has(e,t){if(e=An(e)){const n=Wt.findKey(this,e);return!(!n||void 0===this[n]||t&&!wn(0,this[n],n,t))}return!1}delete(e,t){const n=this;let r=!1;function a(e){if(e=An(e)){const a=Wt.findKey(n,e);!a||t&&!wn(0,n[a],a,t)||(delete n[a],r=!0)}}return Wt.isArray(e)?e.forEach(a):a(e),r}clear(e){const t=Object.keys(this);let n=t.length,r=!1;for(;n--;){const a=t[n];e&&!wn(0,this[a],a,e,!0)||(delete this[a],r=!0)}return r}normalize(e){const t=this,n={};return Wt.forEach(this,(r,a)=>{const o=Wt.findKey(n,a);if(o)return t[o]=En(r),void delete t[a];const l=e?function(e){return e.trim().toLowerCase().replace(/([a-z\d])(\w*)/g,(e,t,n)=>t.toUpperCase()+n)}(a):String(a).trim();l!==a&&delete t[a],t[l]=En(r),n[l]=!0}),this}concat(...e){return this.constructor.concat(this,...e)}toJSON(e){const t=Object.create(null);return Wt.forEach(this,(n,r)=>{null!=n&&!1!==n&&(t[r]=e&&Wt.isArray(n)?n.join(", "):n)}),t}[Symbol.iterator](){return Object.entries(this.toJSON())[Symbol.iterator]()}toString(){return Object.entries(this.toJSON()).map(([e,t])=>e+": "+t).join("\n")}getSetCookie(){return this.get("set-cookie")||[]}get[Symbol.toStringTag](){return"AxiosHeaders"}static from(e){return e instanceof this?e:new this(e)}static concat(e,...t){const n=new this(e);return t.forEach(e=>n.set(e)),n}static accessor(e){const t=(this[vn]=this[vn]={accessors:{}}).accessors,n=this.prototype;function r(e){const r=An(e);t[r]||(function(e,t){const n=Wt.toCamelCase(" "+t);["get","set","has"].forEach(r=>{Object.defineProperty(e,r+n,{value:function(e,n,a){return this[r].call(this,t,e,n,a)},configurable:!0})})}(n,e),t[r]=!0)}return Wt.isArray(e)?e.forEach(r):r(e),this}}kn.accessor(["Content-Type","Content-Length","Accept","Accept-Encoding","User-Agent","Authorization"]),Wt.reduceDescriptors(kn.prototype,({value:e},t)=>{let n=t[0].toUpperCase()+t.slice(1);return{get:()=>e,set(e){this[n]=e}}}),Wt.freezeMethods(kn);const Cn=kn;function Sn(e,t){const n=this||yn,r=t||n,a=Cn.from(r.headers);let o=r.data;return Wt.forEach(e,function(e){o=e.call(n,o,a.normalize(),t?t.status:void 0)}),a.normalize(),o}function xn(e){return!(!e||!e.__CANCEL__)}function Bn(e,t,n){Yt.call(this,null==e?"canceled":e,Yt.ERR_CANCELED,t,n),this.name="CanceledError"}Wt.inherits(Bn,Yt,{__CANCEL__:!0});const Tn=Bn;function Pn(e,t,n){const r=n.config.validateStatus;n.status&&r&&!r(n.status)?t(new Yt("Request failed with status code "+n.status,[Yt.ERR_BAD_REQUEST,Yt.ERR_BAD_RESPONSE][Math.floor(n.status/100)-4],n.config,n.request,n)):e(n)}const On=(e,t,n=3)=>{let r=0;const a=function(e,t){e=e||10;const n=new Array(e),r=new Array(e);let a,o=0,l=0;return t=void 0!==t?t:1e3,function(i){const u=Date.now(),s=r[l];a||(a=u),n[o]=i,r[o]=u;let c=l,f=0;for(;c!==o;)f+=n[c++],c%=e;if(o=(o+1)%e,o===l&&(l=(l+1)%e),u-a<t)return;const d=s&&u-s;return d?Math.round(1e3*f/d):void 0}}(50,250);return function(e,t){let n,r,a=0,o=1e3/t;const l=(t,o=Date.now())=>{a=o,n=null,r&&(clearTimeout(r),r=null),e(...t)};return[(...e)=>{const t=Date.now(),i=t-a;i>=o?l(e,t):(n=e,r||(r=setTimeout(()=>{r=null,l(n)},o-i)))},()=>n&&l(n)]}(n=>{const o=n.loaded,l=n.lengthComputable?n.total:void 0,i=o-r,u=a(i);r=o,e({loaded:o,total:l,progress:l?o/l:void 0,bytes:i,rate:u||void 0,estimated:u&&l&&o<=l?(l-o)/u:void 0,event:n,lengthComputable:null!=l,[t?"download":"upload"]:!0})},n)},Rn=(e,t)=>{const n=null!=e;return[r=>t[0]({lengthComputable:n,total:e,loaded:r}),t[1]]},Nn=e=>(...t)=>Wt.asap(()=>e(...t)),_n=mn.hasStandardBrowserEnv?((e,t)=>n=>(n=new URL(n,mn.origin),e.protocol===n.protocol&&e.host===n.host&&(t||e.port===n.port)))(new URL(mn.origin),mn.navigator&&/(msie|trident)/i.test(mn.navigator.userAgent)):()=>!0,zn=mn.hasStandardBrowserEnv?{write(e,t,n,r,a,o){const l=[e+"="+encodeURIComponent(t)];Wt.isNumber(n)&&l.push("expires="+new Date(n).toGMTString()),Wt.isString(r)&&l.push("path="+r),Wt.isString(a)&&l.push("domain="+a),!0===o&&l.push("secure"),document.cookie=l.join("; ")},read(e){const t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove(e){this.write(e,"",Date.now()-864e5)}}:{write(){},read:()=>null,remove(){}};function Ln(e,t,n){let r=!/^([a-z][a-z\d+\-.]*:)?\/\//i.test(t);return e&&(r||0==n)?function(e,t){return t?e.replace(/\/?\/$/,"")+"/"+t.replace(/^\/+/,""):e}(e,t):t}const Dn=e=>e instanceof Cn?{...e}:e;function jn(e,t){t=t||{};const n={};function r(e,t,n,r){return Wt.isPlainObject(e)&&Wt.isPlainObject(t)?Wt.merge.call({caseless:r},e,t):Wt.isPlainObject(t)?Wt.merge({},t):Wt.isArray(t)?t.slice():t}function a(e,t,n,a){return Wt.isUndefined(t)?Wt.isUndefined(e)?void 0:r(void 0,e,0,a):r(e,t,0,a)}function o(e,t){if(!Wt.isUndefined(t))return r(void 0,t)}function l(e,t){return Wt.isUndefined(t)?Wt.isUndefined(e)?void 0:r(void 0,e):r(void 0,t)}function i(n,a,o){return o in t?r(n,a):o in e?r(void 0,n):void 0}const u={url:o,method:o,data:o,baseURL:l,transformRequest:l,transformResponse:l,paramsSerializer:l,timeout:l,timeoutMessage:l,withCredentials:l,withXSRFToken:l,adapter:l,responseType:l,xsrfCookieName:l,xsrfHeaderName:l,onUploadProgress:l,onDownloadProgress:l,decompress:l,maxContentLength:l,maxBodyLength:l,beforeRedirect:l,transport:l,httpAgent:l,httpsAgent:l,cancelToken:l,socketPath:l,responseEncoding:l,validateStatus:i,headers:(e,t,n)=>a(Dn(e),Dn(t),0,!0)};return Wt.forEach(Object.keys({...e,...t}),function(r){const o=u[r]||a,l=o(e[r],t[r],r);Wt.isUndefined(l)&&o!==i||(n[r]=l)}),n}const Fn=e=>{const t=jn({},e);let n,{data:r,withXSRFToken:a,xsrfHeaderName:o,xsrfCookieName:l,headers:i,auth:u}=t;if(t.headers=i=Cn.from(i),t.url=an(Ln(t.baseURL,t.url,t.allowAbsoluteUrls),e.params,e.paramsSerializer),u&&i.set("Authorization","Basic "+btoa((u.username||"")+":"+(u.password?unescape(encodeURIComponent(u.password)):""))),Wt.isFormData(r))if(mn.hasStandardBrowserEnv||mn.hasStandardBrowserWebWorkerEnv)i.setContentType(void 0);else if(!1!==(n=i.getContentType())){const[e,...t]=n?n.split(";").map(e=>e.trim()).filter(Boolean):[];i.setContentType([e||"multipart/form-data",...t].join("; "))}if(mn.hasStandardBrowserEnv&&(a&&Wt.isFunction(a)&&(a=a(t)),a||!1!==a&&_n(t.url))){const e=o&&l&&zn.read(l);e&&i.set(o,e)}return t},In="undefined"!=typeof XMLHttpRequest&&function(e){return new Promise(function(t,n){const r=Fn(e);let a=r.data;const o=Cn.from(r.headers).normalize();let l,i,u,s,c,{responseType:f,onUploadProgress:d,onDownloadProgress:p}=r;function m(){s&&s(),c&&c(),r.cancelToken&&r.cancelToken.unsubscribe(l),r.signal&&r.signal.removeEventListener("abort",l)}let h=new XMLHttpRequest;function g(){if(!h)return;const r=Cn.from("getAllResponseHeaders"in h&&h.getAllResponseHeaders());Pn(function(e){t(e),m()},function(e){n(e),m()},{data:f&&"text"!==f&&"json"!==f?h.response:h.responseText,status:h.status,statusText:h.statusText,headers:r,config:e,request:h}),h=null}h.open(r.method.toUpperCase(),r.url,!0),h.timeout=r.timeout,"onloadend"in h?h.onloadend=g:h.onreadystatechange=function(){h&&4===h.readyState&&(0!==h.status||h.responseURL&&0===h.responseURL.indexOf("file:"))&&setTimeout(g)},h.onabort=function(){h&&(n(new Yt("Request aborted",Yt.ECONNABORTED,e,h)),h=null)},h.onerror=function(){n(new Yt("Network Error",Yt.ERR_NETWORK,e,h)),h=null},h.ontimeout=function(){let t=r.timeout?"timeout of "+r.timeout+"ms exceeded":"timeout exceeded";const a=r.transitional||ln;r.timeoutErrorMessage&&(t=r.timeoutErrorMessage),n(new Yt(t,a.clarifyTimeoutError?Yt.ETIMEDOUT:Yt.ECONNABORTED,e,h)),h=null},void 0===a&&o.setContentType(null),"setRequestHeader"in h&&Wt.forEach(o.toJSON(),function(e,t){h.setRequestHeader(t,e)}),Wt.isUndefined(r.withCredentials)||(h.withCredentials=!!r.withCredentials),f&&"json"!==f&&(h.responseType=r.responseType),p&&([u,c]=On(p,!0),h.addEventListener("progress",u)),d&&h.upload&&([i,s]=On(d),h.upload.addEventListener("progress",i),h.upload.addEventListener("loadend",s)),(r.cancelToken||r.signal)&&(l=t=>{h&&(n(!t||t.type?new Tn(null,e,h):t),h.abort(),h=null)},r.cancelToken&&r.cancelToken.subscribe(l),r.signal&&(r.signal.aborted?l():r.signal.addEventListener("abort",l)));const y=function(e){const t=/^([-+\w]{1,25})(:?\/\/|:)/.exec(e);return t&&t[1]||""}(r.url);y&&-1===mn.protocols.indexOf(y)?n(new Yt("Unsupported protocol "+y+":",Yt.ERR_BAD_REQUEST,e)):h.send(a||null)})},Mn=(e,t)=>{const{length:n}=e=e?e.filter(Boolean):[];if(t||n){let n,r=new AbortController;const a=function(e){if(!n){n=!0,l();const t=e instanceof Error?e:this.reason;r.abort(t instanceof Yt?t:new Tn(t instanceof Error?t.message:t))}};let o=t&&setTimeout(()=>{o=null,a(new Yt(`timeout ${t} of ms exceeded`,Yt.ETIMEDOUT))},t);const l=()=>{e&&(o&&clearTimeout(o),o=null,e.forEach(e=>{e.unsubscribe?e.unsubscribe(a):e.removeEventListener("abort",a)}),e=null)};e.forEach(e=>e.addEventListener("abort",a));const{signal:i}=r;return i.unsubscribe=()=>Wt.asap(l),i}},Un=function*(e,t){let n=e.byteLength;if(!t||n<t)return void(yield e);let r,a=0;for(;a<n;)r=a+t,yield e.slice(a,r),a=r},$n=(e,t,n,r)=>{const a=async function*(e,t){for await(const n of async function*(e){if(e[Symbol.asyncIterator])return void(yield*e);const t=e.getReader();try{for(;;){const{done:e,value:n}=await t.read();if(e)break;yield n}}finally{await t.cancel()}}(e))yield*Un(n,t)}(e,t);let o,l=0,i=e=>{o||(o=!0,r&&r(e))};return new ReadableStream({async pull(e){try{const{done:t,value:r}=await a.next();if(t)return i(),void e.close();let o=r.byteLength;if(n){let e=l+=o;n(e)}e.enqueue(new Uint8Array(r))}catch(e){throw i(e),e}},cancel:e=>(i(e),a.return())},{highWaterMark:2})},Wn="function"==typeof fetch&&"function"==typeof Request&&"function"==typeof Response,Hn=Wn&&"function"==typeof ReadableStream,qn=Wn&&("function"==typeof TextEncoder?(Vn=new TextEncoder,e=>Vn.encode(e)):async e=>new Uint8Array(await new Response(e).arrayBuffer()));var Vn;const Yn=(e,...t)=>{try{return!!e(...t)}catch(e){return!1}},Gn=Hn&&Yn(()=>{let e=!1;const t=new Request(mn.origin,{body:new ReadableStream,method:"POST",get duplex(){return e=!0,"half"}}).headers.has("Content-Type");return e&&!t}),Kn=Hn&&Yn(()=>Wt.isReadableStream(new Response("").body)),Qn={stream:Kn&&(e=>e.body)};var Xn;Wn&&(Xn=new Response,["text","arrayBuffer","blob","formData","stream"].forEach(e=>{!Qn[e]&&(Qn[e]=Wt.isFunction(Xn[e])?t=>t[e]():(t,n)=>{throw new Yt(`Response type '${e}' is not supported`,Yt.ERR_NOT_SUPPORT,n)})}));const Jn=Wn&&(async e=>{let{url:t,method:n,data:r,signal:a,cancelToken:o,timeout:l,onDownloadProgress:i,onUploadProgress:u,responseType:s,headers:c,withCredentials:f="same-origin",fetchOptions:d}=Fn(e);s=s?(s+"").toLowerCase():"text";let p,m=Mn([a,o&&o.toAbortSignal()],l);const h=m&&m.unsubscribe&&(()=>{m.unsubscribe()});let g;try{if(u&&Gn&&"get"!==n&&"head"!==n&&0!==(g=await(async(e,t)=>{const n=Wt.toFiniteNumber(e.getContentLength());return null==n?(async e=>{if(null==e)return 0;if(Wt.isBlob(e))return e.size;if(Wt.isSpecCompliantForm(e)){const t=new Request(mn.origin,{method:"POST",body:e});return(await t.arrayBuffer()).byteLength}return Wt.isArrayBufferView(e)||Wt.isArrayBuffer(e)?e.byteLength:(Wt.isURLSearchParams(e)&&(e+=""),Wt.isString(e)?(await qn(e)).byteLength:void 0)})(t):n})(c,r))){let e,n=new Request(t,{method:"POST",body:r,duplex:"half"});if(Wt.isFormData(r)&&(e=n.headers.get("content-type"))&&c.setContentType(e),n.body){const[e,t]=Rn(g,On(Nn(u)));r=$n(n.body,65536,e,t)}}Wt.isString(f)||(f=f?"include":"omit");const a="credentials"in Request.prototype;p=new Request(t,{...d,signal:m,method:n.toUpperCase(),headers:c.normalize().toJSON(),body:r,duplex:"half",credentials:a?f:void 0});let o=await fetch(p,d);const l=Kn&&("stream"===s||"response"===s);if(Kn&&(i||l&&h)){const e={};["status","statusText","headers"].forEach(t=>{e[t]=o[t]});const t=Wt.toFiniteNumber(o.headers.get("content-length")),[n,r]=i&&Rn(t,On(Nn(i),!0))||[];o=new Response($n(o.body,65536,n,()=>{r&&r(),h&&h()}),e)}s=s||"text";let y=await Qn[Wt.findKey(Qn,s)||"text"](o,e);return!l&&h&&h(),await new Promise((t,n)=>{Pn(t,n,{data:y,headers:Cn.from(o.headers),status:o.status,statusText:o.statusText,config:e,request:p})})}catch(t){if(h&&h(),t&&"TypeError"===t.name&&/Load failed|fetch/i.test(t.message))throw Object.assign(new Yt("Network Error",Yt.ERR_NETWORK,e,p),{cause:t.cause||t});throw Yt.from(t,t&&t.code,e,p)}}),Zn={http:null,xhr:In,fetch:Jn};Wt.forEach(Zn,(e,t)=>{if(e){try{Object.defineProperty(e,"name",{value:t})}catch(e){}Object.defineProperty(e,"adapterName",{value:t})}});const er=e=>`- ${e}`,tr=e=>Wt.isFunction(e)||null===e||!1===e,nr=e=>{e=Wt.isArray(e)?e:[e];const{length:t}=e;let n,r;const a={};for(let o=0;o<t;o++){let t;if(n=e[o],r=n,!tr(n)&&(r=Zn[(t=String(n)).toLowerCase()],void 0===r))throw new Yt(`Unknown adapter '${t}'`);if(r)break;a[t||"#"+o]=r}if(!r){const e=Object.entries(a).map(([e,t])=>`adapter ${e} `+(!1===t?"is not supported by the environment":"is not available in the build"));let n=t?e.length>1?"since :\n"+e.map(er).join("\n"):" "+er(e[0]):"as no adapter specified";throw new Yt("There is no suitable adapter to dispatch the request "+n,"ERR_NOT_SUPPORT")}return r};function rr(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new Tn(null,e)}function ar(e){return rr(e),e.headers=Cn.from(e.headers),e.data=Sn.call(e,e.transformRequest),-1!==["post","put","patch"].indexOf(e.method)&&e.headers.setContentType("application/x-www-form-urlencoded",!1),nr(e.adapter||yn.adapter)(e).then(function(t){return rr(e),t.data=Sn.call(e,e.transformResponse,t),t.headers=Cn.from(t.headers),t},function(t){return xn(t)||(rr(e),t&&t.response&&(t.response.data=Sn.call(e,e.transformResponse,t.response),t.response.headers=Cn.from(t.response.headers))),Promise.reject(t)})}const or="1.11.0",lr={};["object","boolean","number","function","string","symbol"].forEach((e,t)=>{lr[e]=function(n){return typeof n===e||"a"+(t<1?"n ":" ")+e}});const ir={};lr.transitional=function(e,t,n){function r(e,t){return"[Axios v"+or+"] Transitional option '"+e+"'"+t+(n?". "+n:"")}return(n,a,o)=>{if(!1===e)throw new Yt(r(a," has been removed"+(t?" in "+t:"")),Yt.ERR_DEPRECATED);return t&&!ir[a]&&(ir[a]=!0,console.warn(r(a," has been deprecated since v"+t+" and will be removed in the near future"))),!e||e(n,a,o)}},lr.spelling=function(e){return(t,n)=>(console.warn(`${n} is likely a misspelling of ${e}`),!0)};const ur={assertOptions:function(e,t,n){if("object"!=typeof e)throw new Yt("options must be an object",Yt.ERR_BAD_OPTION_VALUE);const r=Object.keys(e);let a=r.length;for(;a-- >0;){const o=r[a],l=t[o];if(l){const t=e[o],n=void 0===t||l(t,o,e);if(!0!==n)throw new Yt("option "+o+" must be "+n,Yt.ERR_BAD_OPTION_VALUE);continue}if(!0!==n)throw new Yt("Unknown option "+o,Yt.ERR_BAD_OPTION)}},validators:lr},sr=ur.validators;class cr{constructor(e){this.defaults=e||{},this.interceptors={request:new on,response:new on}}async request(e,t){try{return await this._request(e,t)}catch(e){if(e instanceof Error){let t={};Error.captureStackTrace?Error.captureStackTrace(t):t=new Error;const n=t.stack?t.stack.replace(/^.+\n/,""):"";try{e.stack?n&&!String(e.stack).endsWith(n.replace(/^.+\n.+\n/,""))&&(e.stack+="\n"+n):e.stack=n}catch(e){}}throw e}}_request(e,t){"string"==typeof e?(t=t||{}).url=e:t=e||{},t=jn(this.defaults,t);const{transitional:n,paramsSerializer:r,headers:a}=t;void 0!==n&&ur.assertOptions(n,{silentJSONParsing:sr.transitional(sr.boolean),forcedJSONParsing:sr.transitional(sr.boolean),clarifyTimeoutError:sr.transitional(sr.boolean)},!1),null!=r&&(Wt.isFunction(r)?t.paramsSerializer={serialize:r}:ur.assertOptions(r,{encode:sr.function,serialize:sr.function},!0)),void 0!==t.allowAbsoluteUrls||(void 0!==this.defaults.allowAbsoluteUrls?t.allowAbsoluteUrls=this.defaults.allowAbsoluteUrls:t.allowAbsoluteUrls=!0),ur.assertOptions(t,{baseUrl:sr.spelling("baseURL"),withXsrfToken:sr.spelling("withXSRFToken")},!0),t.method=(t.method||this.defaults.method||"get").toLowerCase();let o=a&&Wt.merge(a.common,a[t.method]);a&&Wt.forEach(["delete","get","head","post","put","patch","common"],e=>{delete a[e]}),t.headers=Cn.concat(o,a);const l=[];let i=!0;this.interceptors.request.forEach(function(e){"function"==typeof e.runWhen&&!1===e.runWhen(t)||(i=i&&e.synchronous,l.unshift(e.fulfilled,e.rejected))});const u=[];let s;this.interceptors.response.forEach(function(e){u.push(e.fulfilled,e.rejected)});let c,f=0;if(!i){const e=[ar.bind(this),void 0];for(e.unshift(...l),e.push(...u),c=e.length,s=Promise.resolve(t);f<c;)s=s.then(e[f++],e[f++]);return s}c=l.length;let d=t;for(f=0;f<c;){const e=l[f++],t=l[f++];try{d=e(d)}catch(e){t.call(this,e);break}}try{s=ar.call(this,d)}catch(e){return Promise.reject(e)}for(f=0,c=u.length;f<c;)s=s.then(u[f++],u[f++]);return s}getUri(e){return an(Ln((e=jn(this.defaults,e)).baseURL,e.url,e.allowAbsoluteUrls),e.params,e.paramsSerializer)}}Wt.forEach(["delete","get","head","options"],function(e){cr.prototype[e]=function(t,n){return this.request(jn(n||{},{method:e,url:t,data:(n||{}).data}))}}),Wt.forEach(["post","put","patch"],function(e){function t(t){return function(n,r,a){return this.request(jn(a||{},{method:e,headers:t?{"Content-Type":"multipart/form-data"}:{},url:n,data:r}))}}cr.prototype[e]=t(),cr.prototype[e+"Form"]=t(!0)});const fr=cr;class dr{constructor(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");let t;this.promise=new Promise(function(e){t=e});const n=this;this.promise.then(e=>{if(!n._listeners)return;let t=n._listeners.length;for(;t-- >0;)n._listeners[t](e);n._listeners=null}),this.promise.then=e=>{let t;const r=new Promise(e=>{n.subscribe(e),t=e}).then(e);return r.cancel=function(){n.unsubscribe(t)},r},e(function(e,r,a){n.reason||(n.reason=new Tn(e,r,a),t(n.reason))})}throwIfRequested(){if(this.reason)throw this.reason}subscribe(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]}unsubscribe(e){if(!this._listeners)return;const t=this._listeners.indexOf(e);-1!==t&&this._listeners.splice(t,1)}toAbortSignal(){const e=new AbortController,t=t=>{e.abort(t)};return this.subscribe(t),e.signal.unsubscribe=()=>this.unsubscribe(t),e.signal}static source(){let e;return{token:new dr(function(t){e=t}),cancel:e}}}const pr=dr,mr={Continue:100,SwitchingProtocols:101,Processing:102,EarlyHints:103,Ok:200,Created:201,Accepted:202,NonAuthoritativeInformation:203,NoContent:204,ResetContent:205,PartialContent:206,MultiStatus:207,AlreadyReported:208,ImUsed:226,MultipleChoices:300,MovedPermanently:301,Found:302,SeeOther:303,NotModified:304,UseProxy:305,Unused:306,TemporaryRedirect:307,PermanentRedirect:308,BadRequest:400,Unauthorized:401,PaymentRequired:402,Forbidden:403,NotFound:404,MethodNotAllowed:405,NotAcceptable:406,ProxyAuthenticationRequired:407,RequestTimeout:408,Conflict:409,Gone:410,LengthRequired:411,PreconditionFailed:412,PayloadTooLarge:413,UriTooLong:414,UnsupportedMediaType:415,RangeNotSatisfiable:416,ExpectationFailed:417,ImATeapot:418,MisdirectedRequest:421,UnprocessableEntity:422,Locked:423,FailedDependency:424,TooEarly:425,UpgradeRequired:426,PreconditionRequired:428,TooManyRequests:429,RequestHeaderFieldsTooLarge:431,UnavailableForLegalReasons:451,InternalServerError:500,NotImplemented:501,BadGateway:502,ServiceUnavailable:503,GatewayTimeout:504,HttpVersionNotSupported:505,VariantAlsoNegotiates:506,InsufficientStorage:507,LoopDetected:508,NotExtended:510,NetworkAuthenticationRequired:511};Object.entries(mr).forEach(([e,t])=>{mr[t]=e});const hr=mr,gr=function e(t){const n=new fr(t),r=Ze(fr.prototype.request,n);return Wt.extend(r,fr.prototype,n,{allOwnKeys:!0}),Wt.extend(r,n,null,{allOwnKeys:!0}),r.create=function(n){return e(jn(t,n))},r}(yn);gr.Axios=fr,gr.CanceledError=Tn,gr.CancelToken=pr,gr.isCancel=xn,gr.VERSION=or,gr.toFormData=Jt,gr.AxiosError=Yt,gr.Cancel=gr.CanceledError,gr.all=function(e){return Promise.all(e)},gr.spread=function(e){return function(t){return e.apply(null,t)}},gr.isAxiosError=function(e){return Wt.isObject(e)&&!0===e.isAxiosError},gr.mergeConfig=jn,gr.AxiosHeaders=Cn,gr.formToJSON=e=>hn(Wt.isHTMLForm(e)?new FormData(e):e),gr.getAdapter=nr,gr.HttpStatusCode=hr,gr.default=gr;const yr=gr;var br=n(243),vr={};function Ar(){var e,t,n="function"==typeof Symbol?Symbol:{},r=n.iterator||"@@iterator",a=n.toStringTag||"@@toStringTag";function o(n,r,a,o){var u=r&&r.prototype instanceof i?r:i,s=Object.create(u.prototype);return Er(s,"_invoke",function(n,r,a){var o,i,u,s=0,c=a||[],f=!1,d={p:0,n:0,v:e,a:p,f:p.bind(e,4),d:function(t,n){return o=t,i=0,u=e,d.n=n,l}};function p(n,r){for(i=n,u=r,t=0;!f&&s&&!a&&t<c.length;t++){var a,o=c[t],p=d.p,m=o[2];n>3?(a=m===r)&&(u=o[(i=o[4])?5:(i=3,3)],o[4]=o[5]=e):o[0]<=p&&((a=n<2&&p<o[1])?(i=0,d.v=r,d.n=o[1]):p<m&&(a=n<3||o[0]>r||r>m)&&(o[4]=n,o[5]=r,d.n=m,i=0))}if(a||n>1)return l;throw f=!0,r}return function(a,c,m){if(s>1)throw TypeError("Generator is already running");for(f&&1===c&&p(c,m),i=c,u=m;(t=i<2?e:u)||!f;){o||(i?i<3?(i>1&&(d.n=-1),p(i,u)):d.n=u:d.v=u);try{if(s=2,o){if(i||(a="next"),t=o[a]){if(!(t=t.call(o,u)))throw TypeError("iterator result is not an object");if(!t.done)return t;u=t.value,i<2&&(i=0)}else 1===i&&(t=o.return)&&t.call(o),i<2&&(u=TypeError("The iterator does not provide a '"+a+"' method"),i=1);o=e}else if((t=(f=d.n<0)?u:n.call(r,d))!==l)break}catch(t){o=e,i=1,u=t}finally{s=1}}return{value:t,done:f}}}(n,a,o),!0),s}var l={};function i(){}function u(){}function s(){}t=Object.getPrototypeOf;var c=[][r]?t(t([][r]())):(Er(t={},r,function(){return this}),t),f=s.prototype=i.prototype=Object.create(c);function d(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,s):(e.__proto__=s,Er(e,a,"GeneratorFunction")),e.prototype=Object.create(f),e}return u.prototype=s,Er(f,"constructor",s),Er(s,"constructor",u),u.displayName="GeneratorFunction",Er(s,a,"GeneratorFunction"),Er(f),Er(f,a,"Generator"),Er(f,r,function(){return this}),Er(f,"toString",function(){return"[object Generator]"}),(Ar=function(){return{w:o,m:d}})()}function Er(e,t,n,r){var a=Object.defineProperty;try{a({},"",{})}catch(e){a=0}Er=function(e,t,n,r){function o(t,n){Er(e,t,function(e){return this._invoke(t,n,e)})}t?a?a(e,t,{value:n,enumerable:!r,configurable:!r,writable:!r}):e[t]=n:(o("next",0),o("throw",1),o("return",2))},Er(e,t,n,r)}function wr(e,t,n,r,a,o,l){try{var i=e[o](l),u=i.value}catch(e){return void n(e)}i.done?t(u):Promise.resolve(u).then(r,a)}function kr(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o,l,i=[],u=!0,s=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=o.call(n)).done)&&(i.push(r.value),i.length!==t);u=!0);}catch(e){s=!0,a=e}finally{try{if(!u&&null!=n.return&&(l=n.return(),Object(l)!==l))return}finally{if(s)throw a}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Cr(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Cr(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Cr(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}vr.styleTagTransform=Qe(),vr.setAttributes=Ve(),vr.insert=He().bind(null,"head"),vr.domAPI=$e(),vr.insertStyleElement=Ge(),Me()(br.A,vr),br.A&&br.A.locals&&br.A.locals,yr.defaults.withCredentials=!0;const Sr=function(){var e=kr((0,a.useState)(""),2),t=e[0],n=e[1],r=kr((0,a.useState)(""),2),o=r[0],l=r[1],i=kr((0,a.useState)(""),2),u=i[0],s=i[1],c=Q(),f=function(){var e,n=(e=Ar().m(function e(n){var r,a;return Ar().w(function(e){for(;;)switch(e.p=e.n){case 0:if(n.preventDefault(),s(""),t&&o){e.n=1;break}return s("Username and password are required"),e.a(2);case 1:return e.p=1,e.n=2,yr.post("".concat("https://tihub.onrender.com","/api/login"),{username:t,password:o},{withCredentials:!0});case 2:200===(r=e.v).status&&r.data.success?(localStorage.setItem("loggedIn","true"),localStorage.setItem("user",JSON.stringify(r.data.user)),c("/dashboard")):s(r.data.error||"Login failed"),e.n=4;break;case 3:e.p=3,(a=e.v).response?s(a.response.data.error||"Login failed"):s("Server error. Try again later.");case 4:return e.a(2)}},e,null,[[1,3]])}),function(){var t=this,n=arguments;return new Promise(function(r,a){var o=e.apply(t,n);function l(e){wr(o,r,a,l,i,"next",e)}function i(e){wr(o,r,a,l,i,"throw",e)}l(void 0)})});return function(e){return n.apply(this,arguments)}}();return a.createElement("div",{className:"login-page"},a.createElement("h1",{className:"app-title"},"Threat Intelligence Hub"),a.createElement("div",{className:"login-wrapper"},a.createElement("div",{className:"login-container"},a.createElement("h2",null,"Welcome"),a.createElement("form",{onSubmit:f},a.createElement("input",{type:"text",placeholder:"Username",value:t,onChange:function(e){return n(e.target.value)}}),a.createElement("input",{type:"password",placeholder:"Password",value:o,onChange:function(e){return l(e.target.value)}}),a.createElement("button",{type:"submit"},"Login"),u&&a.createElement("p",{className:"error"},u)),a.createElement("button",{className:"register-btn",onClick:function(){return c("/register")}},"Create Account"))))};var xr=n(749),Br={};function Tr(){var e,t,n="function"==typeof Symbol?Symbol:{},r=n.iterator||"@@iterator",a=n.toStringTag||"@@toStringTag";function o(n,r,a,o){var u=r&&r.prototype instanceof i?r:i,s=Object.create(u.prototype);return Pr(s,"_invoke",function(n,r,a){var o,i,u,s=0,c=a||[],f=!1,d={p:0,n:0,v:e,a:p,f:p.bind(e,4),d:function(t,n){return o=t,i=0,u=e,d.n=n,l}};function p(n,r){for(i=n,u=r,t=0;!f&&s&&!a&&t<c.length;t++){var a,o=c[t],p=d.p,m=o[2];n>3?(a=m===r)&&(u=o[(i=o[4])?5:(i=3,3)],o[4]=o[5]=e):o[0]<=p&&((a=n<2&&p<o[1])?(i=0,d.v=r,d.n=o[1]):p<m&&(a=n<3||o[0]>r||r>m)&&(o[4]=n,o[5]=r,d.n=m,i=0))}if(a||n>1)return l;throw f=!0,r}return function(a,c,m){if(s>1)throw TypeError("Generator is already running");for(f&&1===c&&p(c,m),i=c,u=m;(t=i<2?e:u)||!f;){o||(i?i<3?(i>1&&(d.n=-1),p(i,u)):d.n=u:d.v=u);try{if(s=2,o){if(i||(a="next"),t=o[a]){if(!(t=t.call(o,u)))throw TypeError("iterator result is not an object");if(!t.done)return t;u=t.value,i<2&&(i=0)}else 1===i&&(t=o.return)&&t.call(o),i<2&&(u=TypeError("The iterator does not provide a '"+a+"' method"),i=1);o=e}else if((t=(f=d.n<0)?u:n.call(r,d))!==l)break}catch(t){o=e,i=1,u=t}finally{s=1}}return{value:t,done:f}}}(n,a,o),!0),s}var l={};function i(){}function u(){}function s(){}t=Object.getPrototypeOf;var c=[][r]?t(t([][r]())):(Pr(t={},r,function(){return this}),t),f=s.prototype=i.prototype=Object.create(c);function d(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,s):(e.__proto__=s,Pr(e,a,"GeneratorFunction")),e.prototype=Object.create(f),e}return u.prototype=s,Pr(f,"constructor",s),Pr(s,"constructor",u),u.displayName="GeneratorFunction",Pr(s,a,"GeneratorFunction"),Pr(f),Pr(f,a,"Generator"),Pr(f,r,function(){return this}),Pr(f,"toString",function(){return"[object Generator]"}),(Tr=function(){return{w:o,m:d}})()}function Pr(e,t,n,r){var a=Object.defineProperty;try{a({},"",{})}catch(e){a=0}Pr=function(e,t,n,r){function o(t,n){Pr(e,t,function(e){return this._invoke(t,n,e)})}t?a?a(e,t,{value:n,enumerable:!r,configurable:!r,writable:!r}):e[t]=n:(o("next",0),o("throw",1),o("return",2))},Pr(e,t,n,r)}function Or(e,t,n,r,a,o,l){try{var i=e[o](l),u=i.value}catch(e){return void n(e)}i.done?t(u):Promise.resolve(u).then(r,a)}function Rr(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o,l,i=[],u=!0,s=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=o.call(n)).done)&&(i.push(r.value),i.length!==t);u=!0);}catch(e){s=!0,a=e}finally{try{if(!u&&null!=n.return&&(l=n.return(),Object(l)!==l))return}finally{if(s)throw a}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Nr(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Nr(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Nr(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}Br.styleTagTransform=Qe(),Br.setAttributes=Ve(),Br.insert=He().bind(null,"head"),Br.domAPI=$e(),Br.insertStyleElement=Ge(),Me()(xr.A,Br),xr.A&&xr.A.locals&&xr.A.locals;const _r=function(){var e=Rr((0,a.useState)(""),2),t=e[0],n=e[1],r=Rr((0,a.useState)(""),2),o=r[0],l=r[1],i=Rr((0,a.useState)(""),2),u=i[0],s=i[1],c=Rr((0,a.useState)(""),2),f=c[0],d=c[1],p=function(){var e,r=(e=Tr().m(function e(r){var a,i;return Tr().w(function(e){for(;;)switch(e.p=e.n){case 0:return r.preventDefault(),e.p=1,e.n=2,yr.post("http://127.0.0.1:5000/api/register",{username:t,email:o,password:u});case 2:a=e.v,d(a.data.message),n(""),l(""),s(""),e.n=4;break;case 3:e.p=3,(i=e.v).response&&i.response.data&&i.response.data.error?d(i.response.data.error):d("Registration failed.");case 4:return e.a(2)}},e,null,[[1,3]])}),function(){var t=this,n=arguments;return new Promise(function(r,a){var o=e.apply(t,n);function l(e){Or(o,r,a,l,i,"next",e)}function i(e){Or(o,r,a,l,i,"throw",e)}l(void 0)})});return function(e){return r.apply(this,arguments)}}();return a.createElement("div",{className:"register-page"},a.createElement("h1",null,"Threat Intelligence Hub"),a.createElement("div",{className:"register-container"},a.createElement("h2",null,"Create Account"),a.createElement("form",{onSubmit:p},a.createElement("input",{type:"text",placeholder:"Username",value:t,onChange:function(e){return n(e.target.value)},required:!0}),a.createElement("input",{type:"email",placeholder:"Email",value:o,onChange:function(e){return l(e.target.value)},required:!0}),a.createElement("input",{type:"password",placeholder:"Password",value:u,onChange:function(e){return s(e.target.value)},required:!0}),a.createElement("button",{type:"submit"},"Register")),f&&a.createElement("p",{className:"message"},f)))};var zr=n(12),Lr={};Lr.styleTagTransform=Qe(),Lr.setAttributes=Ve(),Lr.insert=He().bind(null,"head"),Lr.domAPI=$e(),Lr.insertStyleElement=Ge(),Me()(zr.A,Lr),zr.A&&zr.A.locals&&zr.A.locals;const Dr=JSON.parse('[{"type":"IP","indicator":"192.168.1.101","severity":"High","mitre":"T1071.001"},{"type":"IP","indicator":"10.0.0.55","severity":"Medium","mitre":"T1071.002"},{"type":"URL","indicator":"http://malicious1.example.com","severity":"High","mitre":"T1566.002"},{"type":"URL","indicator":"http://malicious2.example.com","severity":"Medium","mitre":"T1566.003"},{"type":"File Hash","indicator":"abcd1234efgh5678","severity":"Critical","mitre":"T1059"},{"type":"File Hash","indicator":"ijkl9012mnop3456","severity":"High","mitre":"T1059.001"},{"type":"IP","indicator":"172.16.0.12","severity":"Medium","mitre":"T1071.003"},{"type":"IP","indicator":"192.168.1.202","severity":"High","mitre":"T1071.004"},{"type":"URL","indicator":"http://phishing1.example.com","severity":"Critical","mitre":"T1566.001"},{"type":"URL","indicator":"http://phishing2.example.com","severity":"High","mitre":"T1566.002"},{"type":"File Hash","indicator":"qrst5678uvwx9012","severity":"Medium","mitre":"T1059.002"},{"type":"File Hash","indicator":"yzab3456cdef7890","severity":"High","mitre":"T1059.003"},{"type":"IP","indicator":"10.10.10.10","severity":"Critical","mitre":"T1071.005"},{"type":"IP","indicator":"172.16.1.25","severity":"Medium","mitre":"T1071.006"},{"type":"URL","indicator":"http://badsite1.example.com","severity":"High","mitre":"T1566.004"},{"type":"URL","indicator":"http://badsite2.example.com","severity":"Medium","mitre":"T1566.005"},{"type":"File Hash","indicator":"ghij7890klmn1234","severity":"Critical","mitre":"T1059.004"},{"type":"File Hash","indicator":"opqr5678stuv9012","severity":"High","mitre":"T1059.005"},{"type":"IP","indicator":"192.168.100.50","severity":"Medium","mitre":"T1071.007"},{"type":"IP","indicator":"10.0.0.200","severity":"High","mitre":"T1071.008"}]');var jr=n(624),Fr={};function Ir(){var e,t,n="function"==typeof Symbol?Symbol:{},r=n.iterator||"@@iterator",a=n.toStringTag||"@@toStringTag";function o(n,r,a,o){var u=r&&r.prototype instanceof i?r:i,s=Object.create(u.prototype);return Mr(s,"_invoke",function(n,r,a){var o,i,u,s=0,c=a||[],f=!1,d={p:0,n:0,v:e,a:p,f:p.bind(e,4),d:function(t,n){return o=t,i=0,u=e,d.n=n,l}};function p(n,r){for(i=n,u=r,t=0;!f&&s&&!a&&t<c.length;t++){var a,o=c[t],p=d.p,m=o[2];n>3?(a=m===r)&&(u=o[(i=o[4])?5:(i=3,3)],o[4]=o[5]=e):o[0]<=p&&((a=n<2&&p<o[1])?(i=0,d.v=r,d.n=o[1]):p<m&&(a=n<3||o[0]>r||r>m)&&(o[4]=n,o[5]=r,d.n=m,i=0))}if(a||n>1)return l;throw f=!0,r}return function(a,c,m){if(s>1)throw TypeError("Generator is already running");for(f&&1===c&&p(c,m),i=c,u=m;(t=i<2?e:u)||!f;){o||(i?i<3?(i>1&&(d.n=-1),p(i,u)):d.n=u:d.v=u);try{if(s=2,o){if(i||(a="next"),t=o[a]){if(!(t=t.call(o,u)))throw TypeError("iterator result is not an object");if(!t.done)return t;u=t.value,i<2&&(i=0)}else 1===i&&(t=o.return)&&t.call(o),i<2&&(u=TypeError("The iterator does not provide a '"+a+"' method"),i=1);o=e}else if((t=(f=d.n<0)?u:n.call(r,d))!==l)break}catch(t){o=e,i=1,u=t}finally{s=1}}return{value:t,done:f}}}(n,a,o),!0),s}var l={};function i(){}function u(){}function s(){}t=Object.getPrototypeOf;var c=[][r]?t(t([][r]())):(Mr(t={},r,function(){return this}),t),f=s.prototype=i.prototype=Object.create(c);function d(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,s):(e.__proto__=s,Mr(e,a,"GeneratorFunction")),e.prototype=Object.create(f),e}return u.prototype=s,Mr(f,"constructor",s),Mr(s,"constructor",u),u.displayName="GeneratorFunction",Mr(s,a,"GeneratorFunction"),Mr(f),Mr(f,a,"Generator"),Mr(f,r,function(){return this}),Mr(f,"toString",function(){return"[object Generator]"}),(Ir=function(){return{w:o,m:d}})()}function Mr(e,t,n,r){var a=Object.defineProperty;try{a({},"",{})}catch(e){a=0}Mr=function(e,t,n,r){function o(t,n){Mr(e,t,function(e){return this._invoke(t,n,e)})}t?a?a(e,t,{value:n,enumerable:!r,configurable:!r,writable:!r}):e[t]=n:(o("next",0),o("throw",1),o("return",2))},Mr(e,t,n,r)}function Ur(e,t,n,r,a,o,l){try{var i=e[o](l),u=i.value}catch(e){return void n(e)}i.done?t(u):Promise.resolve(u).then(r,a)}function $r(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}Fr.styleTagTransform=Qe(),Fr.setAttributes=Ve(),Fr.insert=He().bind(null,"head"),Fr.domAPI=$e(),Fr.insertStyleElement=Ge(),Me()(jr.A,Fr),jr.A&&jr.A.locals&&jr.A.locals;const Wr=function(){var e,t,n=Q(),r=(e=(0,a.useState)(!1),t=2,function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o,l,i=[],u=!0,s=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=o.call(n)).done)&&(i.push(r.value),i.length!==t);u=!0);}catch(e){s=!0,a=e}finally{try{if(!u&&null!=n.return&&(l=n.return(),Object(l)!==l))return}finally{if(s)throw a}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return $r(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?$r(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=r[0],l=r[1],i=function(){var e,t=(e=Ir().m(function e(){var t,r,a;return Ir().w(function(e){for(;;)switch(e.p=e.n){case 0:return e.p=0,e.n=1,fetch("http://localhost:5000/api/logout",{method:"POST",credentials:"include"});case 1:if(!(t=e.v).ok){e.n=2;break}localStorage.removeItem("loggedIn"),localStorage.removeItem("user"),n("/login"),e.n=4;break;case 2:return e.n=3,t.json();case 3:r=e.v,alert(r.message||"Error logging out");case 4:e.n=6;break;case 5:e.p=5,a=e.v,console.error("Logout failed:",a),alert("Server error while logging out");case 6:return e.a(2)}},e,null,[[0,5]])}),function(){var t=this,n=arguments;return new Promise(function(r,a){var o=e.apply(t,n);function l(e){Ur(o,r,a,l,i,"next",e)}function i(e){Ur(o,r,a,l,i,"throw",e)}l(void 0)})});return function(){return t.apply(this,arguments)}}();return a.createElement("nav",{className:"navbar"},a.createElement("div",{className:"navbar-logo",onClick:function(){return n("/dashboard")}},"Threat Intel Hub"),a.createElement("div",{className:"navbar-links ".concat(o?"open":"")},a.createElement("button",{onClick:function(){return n("/dashboard")}},"Dashboard"),a.createElement("button",{onClick:function(){return n("/profile")}},"Profile"),a.createElement("button",{onClick:function(){return n("/settings")}},"Settings"),a.createElement("button",{onClick:i},"Logout")),a.createElement("div",{className:"mobile-menu-icon",onClick:function(){return l(!o)}},"☰ "))};var Hr=n(595),qr={};qr.styleTagTransform=Qe(),qr.setAttributes=Ve(),qr.insert=He().bind(null,"head"),qr.domAPI=$e(),qr.insertStyleElement=Ge(),Me()(Hr.A,qr),Hr.A&&Hr.A.locals&&Hr.A.locals;const Vr=function(){var e=(new Date).getFullYear();return a.createElement("footer",{className:"footer"},a.createElement("p",null,"© ",e," Threat Intelligence Hub. All rights reserved."),a.createElement("p",null,"Developed by Loksharan |",a.createElement("a",{href:"https://github.com/loksharan-soc",target:"_blank",rel:"noreferrer"}," GitHub")," |",a.createElement("a",{href:"https://linkedin.com/in/loksharan",target:"_blank",rel:"noreferrer"}," LinkedIn")))};function Yr(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o,l,i=[],u=!0,s=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=o.call(n)).done)&&(i.push(r.value),i.length!==t);u=!0);}catch(e){s=!0,a=e}finally{try{if(!u&&null!=n.return&&(l=n.return(),Object(l)!==l))return}finally{if(s)throw a}}return i}}(e,t)||Gr(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Gr(e,t){if(e){if("string"==typeof e)return Kr(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Kr(e,t):void 0}}function Kr(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}const Qr=function(){var e=Yr((0,a.useState)([]),2),t=e[0],n=e[1],r=Yr((0,a.useState)(!0),2),o=r[0],l=r[1],i=Yr((0,a.useState)(!1),2),u=i[0],s=i[1],c=Yr((0,a.useState)(""),2),f=c[0],d=c[1],p=Yr((0,a.useState)(""),2),m=p[0],h=p[1];Q(),(0,a.useEffect)(function(){yr.get("http://127.0.0.1:5000/api/threats").then(function(e){n(e.data),l(!1)}).catch(function(e){console.error("Error fetching threats:",e),n(Dr),s(!0),l(!1)})},[]);var g=t.filter(function(e){var t=e.indicator.toLowerCase().includes(f.toLowerCase()),n=!m||e.type.toLowerCase()===m.toLowerCase();return t&&n});return a.createElement("div",{className:"dashboard-container",style:{marginTop:"60px"}},a.createElement(Wr,null)," ",a.createElement("div",{className:"dashboard-main"},a.createElement("h1",null,"Dashboard"),a.createElement("p",null,"Welcome to your Threat Intelligence Hub!"),a.createElement("div",{className:"cards-container"},a.createElement("div",{className:"card"},a.createElement("input",{type:"text",placeholder:"Search by indicator...",value:f,onChange:function(e){return d(e.target.value)}})),a.createElement("div",{className:"card"},a.createElement("select",{value:m,onChange:function(e){return h(e.target.value)}},a.createElement("option",{value:""},"Filter by Type"),a.createElement("option",{value:"IP"},"IP"),a.createElement("option",{value:"URL"},"Domain"),a.createElement("option",{value:"File Hash"},"Hash"))),a.createElement("div",{className:"card"},a.createElement("button",{onClick:function(){var e,t=[["Type","Indicator","Severity","MITRE Mapping"]].concat((e=g.map(function(e){return[e.type,e.indicator,e.severity,e.mitre]}),function(e){if(Array.isArray(e))return Kr(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||Gr(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())).map(function(e){return e.join(",")}).join("\n"),n=new Blob([t],{type:"text/csv"}),r=URL.createObjectURL(n),a=document.createElement("a");a.href=r,a.download="threats_export.csv",a.click(),URL.revokeObjectURL(r)}},"Export CSV"))),o?a.createElement("p",null,"Loading threat data..."):a.createElement(a.Fragment,null,a.createElement("table",{className:"threat-table"},a.createElement("thead",null,a.createElement("tr",null,a.createElement("th",null,"Type"),a.createElement("th",null,"Indicator"),a.createElement("th",null,"Severity"),a.createElement("th",null,"MITRE Mapping"))),a.createElement("tbody",null,g.map(function(e,t){return a.createElement("tr",{key:t},a.createElement("td",null,e.type),a.createElement("td",null,e.indicator),a.createElement("td",null,e.severity),a.createElement("td",null,e.mitre))}))),u&&a.createElement("p",{style:{color:"red"}},"Failed to fetch live threat data. Showing sample data."))),a.createElement(Vr,null)," ")};var Xr=n(999),Jr={};function Zr(e){return Zr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Zr(e)}function ea(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)}return n}function ta(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ea(Object(n),!0).forEach(function(t){na(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ea(Object(n)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}function na(e,t,n){return(t=function(e){var t=function(e){if("object"!=Zr(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var n=t.call(e,"string");if("object"!=Zr(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==Zr(t)?t:t+""}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function ra(){var e,t,n="function"==typeof Symbol?Symbol:{},r=n.iterator||"@@iterator",a=n.toStringTag||"@@toStringTag";function o(n,r,a,o){var u=r&&r.prototype instanceof i?r:i,s=Object.create(u.prototype);return aa(s,"_invoke",function(n,r,a){var o,i,u,s=0,c=a||[],f=!1,d={p:0,n:0,v:e,a:p,f:p.bind(e,4),d:function(t,n){return o=t,i=0,u=e,d.n=n,l}};function p(n,r){for(i=n,u=r,t=0;!f&&s&&!a&&t<c.length;t++){var a,o=c[t],p=d.p,m=o[2];n>3?(a=m===r)&&(u=o[(i=o[4])?5:(i=3,3)],o[4]=o[5]=e):o[0]<=p&&((a=n<2&&p<o[1])?(i=0,d.v=r,d.n=o[1]):p<m&&(a=n<3||o[0]>r||r>m)&&(o[4]=n,o[5]=r,d.n=m,i=0))}if(a||n>1)return l;throw f=!0,r}return function(a,c,m){if(s>1)throw TypeError("Generator is already running");for(f&&1===c&&p(c,m),i=c,u=m;(t=i<2?e:u)||!f;){o||(i?i<3?(i>1&&(d.n=-1),p(i,u)):d.n=u:d.v=u);try{if(s=2,o){if(i||(a="next"),t=o[a]){if(!(t=t.call(o,u)))throw TypeError("iterator result is not an object");if(!t.done)return t;u=t.value,i<2&&(i=0)}else 1===i&&(t=o.return)&&t.call(o),i<2&&(u=TypeError("The iterator does not provide a '"+a+"' method"),i=1);o=e}else if((t=(f=d.n<0)?u:n.call(r,d))!==l)break}catch(t){o=e,i=1,u=t}finally{s=1}}return{value:t,done:f}}}(n,a,o),!0),s}var l={};function i(){}function u(){}function s(){}t=Object.getPrototypeOf;var c=[][r]?t(t([][r]())):(aa(t={},r,function(){return this}),t),f=s.prototype=i.prototype=Object.create(c);function d(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,s):(e.__proto__=s,aa(e,a,"GeneratorFunction")),e.prototype=Object.create(f),e}return u.prototype=s,aa(f,"constructor",s),aa(s,"constructor",u),u.displayName="GeneratorFunction",aa(s,a,"GeneratorFunction"),aa(f),aa(f,a,"Generator"),aa(f,r,function(){return this}),aa(f,"toString",function(){return"[object Generator]"}),(ra=function(){return{w:o,m:d}})()}function aa(e,t,n,r){var a=Object.defineProperty;try{a({},"",{})}catch(e){a=0}aa=function(e,t,n,r){function o(t,n){aa(e,t,function(e){return this._invoke(t,n,e)})}t?a?a(e,t,{value:n,enumerable:!r,configurable:!r,writable:!r}):e[t]=n:(o("next",0),o("throw",1),o("return",2))},aa(e,t,n,r)}function oa(e,t,n,r,a,o,l){try{var i=e[o](l),u=i.value}catch(e){return void n(e)}i.done?t(u):Promise.resolve(u).then(r,a)}function la(e){return function(){var t=this,n=arguments;return new Promise(function(r,a){var o=e.apply(t,n);function l(e){oa(o,r,a,l,i,"next",e)}function i(e){oa(o,r,a,l,i,"throw",e)}l(void 0)})}}function ia(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o,l,i=[],u=!0,s=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=o.call(n)).done)&&(i.push(r.value),i.length!==t);u=!0);}catch(e){s=!0,a=e}finally{try{if(!u&&null!=n.return&&(l=n.return(),Object(l)!==l))return}finally{if(s)throw a}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return ua(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ua(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ua(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}Jr.styleTagTransform=Qe(),Jr.setAttributes=Ve(),Jr.insert=He().bind(null,"head"),Jr.domAPI=$e(),Jr.insertStyleElement=Ge(),Me()(Xr.A,Jr),Xr.A&&Xr.A.locals&&Xr.A.locals;const sa=function(){var e=Q(),t=ia((0,a.useState)(null),2),n=t[0],r=t[1],o=ia((0,a.useState)(!1),2),l=o[0],i=o[1],u=ia((0,a.useState)({username:"",email:""}),2),s=u[0],c=u[1];(0,a.useEffect)(function(){var t=localStorage.getItem("user");if(t){var n=JSON.parse(t);r(n),c({username:n.username,email:n.email})}else e("/login")},[e]);var f=function(){var t=la(ra().m(function t(){var n;return ra().w(function(t){for(;;)switch(t.p=t.n){case 0:return t.p=0,t.n=1,fetch("http://localhost:5000/api/logout",{method:"POST",credentials:"include"});case 1:t.v.ok&&(localStorage.removeItem("loggedIn"),localStorage.removeItem("user"),e("/login")),t.n=3;break;case 2:t.p=2,n=t.v,console.error("Logout failed:",n),alert("Server error while logging out");case 3:return t.a(2)}},t,null,[[0,2]])}));return function(){return t.apply(this,arguments)}}(),d=function(e){c(ta(ta({},s),{},na({},e.target.name,e.target.value)))},p=function(){var e=la(ra().m(function e(){var t,n,a;return ra().w(function(e){for(;;)switch(e.p=e.n){case 0:if(s.username.trim()&&s.email.trim()){e.n=1;break}return alert("Username and Email cannot be empty"),e.a(2);case 1:return e.p=1,e.n=2,fetch("http://localhost:5000/api/auth/update",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({username:s.username,email:s.email}),credentials:"include"});case 2:return t=e.v,e.n=3,t.json();case 3:n=e.v,t.ok?(r(n.user),localStorage.setItem("user",JSON.stringify(n.user)),i(!1),alert("Profile updated successfully!")):alert(n.message||"Error updating profile"),e.n=5;break;case 4:e.p=4,a=e.v,console.error("Update failed:",a),alert("Server error while updating profile");case 5:return e.a(2)}},e,null,[[1,4]])}));return function(){return e.apply(this,arguments)}}();return n?a.createElement("div",{className:"profile-page",style:{marginTop:"60px"}},a.createElement(Wr,null),a.createElement("h1",null,"Profile"),a.createElement("div",{className:"profile-container"},l?a.createElement(a.Fragment,null,a.createElement("label",null,"Username:",a.createElement("input",{type:"text",name:"username",value:s.username,onChange:d})),a.createElement("label",null,"Email:",a.createElement("input",{type:"email",name:"email",value:s.email,onChange:d})),a.createElement("button",{onClick:p},"Save"),a.createElement("button",{onClick:function(){return i(!1)}},"Cancel")):a.createElement(a.Fragment,null,a.createElement("p",null,a.createElement("strong",null,"Username:")," ",n.username),a.createElement("p",null,a.createElement("strong",null,"Email:")," ",n.email),a.createElement("button",{onClick:function(){return i(!0)}},"Edit Profile")),a.createElement("button",{onClick:f},"Logout")),a.createElement(Vr,null)):null};var ca=n(957),fa={};function da(e){return da="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},da(e)}function pa(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)}return n}function ma(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?pa(Object(n),!0).forEach(function(t){ha(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):pa(Object(n)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}function ha(e,t,n){return(t=function(e){var t=function(e){if("object"!=da(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var n=t.call(e,"string");if("object"!=da(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==da(t)?t:t+""}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function ga(e){return function(e){if(Array.isArray(e))return ka(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||wa(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ya(){var e,t,n="function"==typeof Symbol?Symbol:{},r=n.iterator||"@@iterator",a=n.toStringTag||"@@toStringTag";function o(n,r,a,o){var u=r&&r.prototype instanceof i?r:i,s=Object.create(u.prototype);return ba(s,"_invoke",function(n,r,a){var o,i,u,s=0,c=a||[],f=!1,d={p:0,n:0,v:e,a:p,f:p.bind(e,4),d:function(t,n){return o=t,i=0,u=e,d.n=n,l}};function p(n,r){for(i=n,u=r,t=0;!f&&s&&!a&&t<c.length;t++){var a,o=c[t],p=d.p,m=o[2];n>3?(a=m===r)&&(u=o[(i=o[4])?5:(i=3,3)],o[4]=o[5]=e):o[0]<=p&&((a=n<2&&p<o[1])?(i=0,d.v=r,d.n=o[1]):p<m&&(a=n<3||o[0]>r||r>m)&&(o[4]=n,o[5]=r,d.n=m,i=0))}if(a||n>1)return l;throw f=!0,r}return function(a,c,m){if(s>1)throw TypeError("Generator is already running");for(f&&1===c&&p(c,m),i=c,u=m;(t=i<2?e:u)||!f;){o||(i?i<3?(i>1&&(d.n=-1),p(i,u)):d.n=u:d.v=u);try{if(s=2,o){if(i||(a="next"),t=o[a]){if(!(t=t.call(o,u)))throw TypeError("iterator result is not an object");if(!t.done)return t;u=t.value,i<2&&(i=0)}else 1===i&&(t=o.return)&&t.call(o),i<2&&(u=TypeError("The iterator does not provide a '"+a+"' method"),i=1);o=e}else if((t=(f=d.n<0)?u:n.call(r,d))!==l)break}catch(t){o=e,i=1,u=t}finally{s=1}}return{value:t,done:f}}}(n,a,o),!0),s}var l={};function i(){}function u(){}function s(){}t=Object.getPrototypeOf;var c=[][r]?t(t([][r]())):(ba(t={},r,function(){return this}),t),f=s.prototype=i.prototype=Object.create(c);function d(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,s):(e.__proto__=s,ba(e,a,"GeneratorFunction")),e.prototype=Object.create(f),e}return u.prototype=s,ba(f,"constructor",s),ba(s,"constructor",u),u.displayName="GeneratorFunction",ba(s,a,"GeneratorFunction"),ba(f),ba(f,a,"Generator"),ba(f,r,function(){return this}),ba(f,"toString",function(){return"[object Generator]"}),(ya=function(){return{w:o,m:d}})()}function ba(e,t,n,r){var a=Object.defineProperty;try{a({},"",{})}catch(e){a=0}ba=function(e,t,n,r){function o(t,n){ba(e,t,function(e){return this._invoke(t,n,e)})}t?a?a(e,t,{value:n,enumerable:!r,configurable:!r,writable:!r}):e[t]=n:(o("next",0),o("throw",1),o("return",2))},ba(e,t,n,r)}function va(e,t,n,r,a,o,l){try{var i=e[o](l),u=i.value}catch(e){return void n(e)}i.done?t(u):Promise.resolve(u).then(r,a)}function Aa(e){return function(){var t=this,n=arguments;return new Promise(function(r,a){var o=e.apply(t,n);function l(e){va(o,r,a,l,i,"next",e)}function i(e){va(o,r,a,l,i,"throw",e)}l(void 0)})}}function Ea(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o,l,i=[],u=!0,s=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=o.call(n)).done)&&(i.push(r.value),i.length!==t);u=!0);}catch(e){s=!0,a=e}finally{try{if(!u&&null!=n.return&&(l=n.return(),Object(l)!==l))return}finally{if(s)throw a}}return i}}(e,t)||wa(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function wa(e,t){if(e){if("string"==typeof e)return ka(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ka(e,t):void 0}}function ka(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}fa.styleTagTransform=Qe(),fa.setAttributes=Ve(),fa.insert=He().bind(null,"head"),fa.domAPI=$e(),fa.insertStyleElement=Ge(),Me()(ca.A,fa),ca.A&&ca.A.locals&&ca.A.locals,yr.defaults.withCredentials=!0;const Ca=function(){var e=Q(),t=Ea((0,a.useState)(null),2),n=(t[0],t[1]),r=Ea((0,a.useState)(!1),2),o=r[0],l=r[1],i=Ea((0,a.useState)({currentPassword:"",newPassword:""}),2),u=i[0],s=i[1],c=Ea((0,a.useState)(""),2),f=c[0],d=c[1],p=Ea((0,a.useState)(!1),2),m=p[0],h=p[1],g=Ea((0,a.useState)(!1),2),y=g[0],b=g[1],v=Ea((0,a.useState)(""),2),A=v[0],E=v[1],w=Ea((0,a.useState)({name:"",apiKey:""}),2),k=w[0],C=w[1],S=Ea((0,a.useState)([]),2),x=S[0],B=S[1],T=Ea((0,a.useState)([]),2),P=T[0],O=T[1],R=Ea((0,a.useState)(!1),2),N=R[0],_=R[1],z=Ea((0,a.useState)(""),2),L=z[0],D=z[1],j=Ea((0,a.useState)(!1),2),F=j[0],I=j[1];(0,a.useEffect)(function(){var t=localStorage.getItem("user");t?n(JSON.parse(t)):e("/login");var r=localStorage.getItem("apiKeys");r&&B(JSON.parse(r))},[e]);var M=function(){var e=Aa(ya().m(function e(){var t,n,r,a;return ya().w(function(e){for(;;)switch(e.p=e.n){case 0:if(t=u.currentPassword.trim(),n=u.newPassword.trim(),t&&n){e.n=1;break}return d("Both fields are required."),h(!0),e.a(2);case 1:return b(!0),d(""),e.p=2,e.n=3,yr.post("http://localhost:5000/api/auth/change-password",{currentPassword:t,newPassword:n},{withCredentials:!0});case 3:200===(r=e.v).status&&r.data.success?(d("Password changed successfully!"),h(!1),s({currentPassword:"",newPassword:""}),l(!1)):(d(r.data.message||"Error changing password"),h(!0)),e.n=5;break;case 4:e.p=4,a=e.v,console.error(a),d("Server error while changing password"),h(!0);case 5:return e.p=5,b(!1),setTimeout(function(){return d("")},5e3),e.f(5);case 6:return e.a(2)}},e,null,[[2,4,5,6]])}));return function(){return e.apply(this,arguments)}}(),U=function(){var t=Aa(ya().m(function t(){var n,r,a;return ya().w(function(t){for(;;)switch(t.p=t.n){case 0:if(!F){t.n=1;break}return t.a(2);case 1:if(window.confirm("Are you sure you want to delete your account?")){t.n=2;break}return t.a(2);case 2:return I(!0),t.p=3,t.n=4,yr.post("http://localhost:5000/api/auth/delete",{},{withCredentials:!0});case 4:n=t.v,r=n.data,200===n.status?(alert(r.message),localStorage.removeItem("loggedIn"),localStorage.removeItem("user"),e("/login")):alert(r.message||"Error deleting account"),t.n=6;break;case 5:t.p=5,a=t.v,console.error("Delete account error:",a),alert("Could not connect to server. Try again later.");case 6:return t.p=6,I(!1),t.f(6);case 7:return t.a(2)}},t,null,[[3,5,6,7]])}));return function(){return t.apply(this,arguments)}}(),$=function(e){D(e),_(!0),alert("2FA enabled with ".concat(e))};return a.createElement("div",{className:"settings-page",style:{marginTop:"60px"}},a.createElement(Wr,null),a.createElement("h1",null,"Settings"),a.createElement("div",{className:"settings-container"},a.createElement("section",{className:"card"},a.createElement("h2",null,"Change Password"),o?a.createElement(a.Fragment,null,a.createElement("input",{type:"password",placeholder:"Current Password",value:u.currentPassword,onChange:function(e){return s(ma(ma({},u),{},{currentPassword:e.target.value}))}}),a.createElement("input",{type:"password",placeholder:"New Password",value:u.newPassword,onChange:function(e){return s(ma(ma({},u),{},{newPassword:e.target.value}))}}),a.createElement("button",{onClick:M,disabled:y},y?"Saving...":"Save Password"),a.createElement("button",{onClick:function(){l(!1),d("")}},"Cancel"),f&&a.createElement("p",{style:{color:m?"red":"green"}},f)):a.createElement("button",{onClick:function(){return l(!0)}},"Change Password")),a.createElement("section",{className:"card"},a.createElement("h2",null,"Add Threat Source / API Key"),a.createElement("div",{className:"service-input"},a.createElement("select",{value:A,onChange:function(e){return E(e.target.value)}},a.createElement("option",{value:""},"Select Service"),["VirusTotal","AbuseIPDB","HybridAnalysis","AlienVault","ThreatCrowd","MISP","OpenAI","OTX","Custom"].map(function(e){return a.createElement("option",{key:e,value:e},e)})),A&&"Custom"!==A&&a.createElement("input",{type:"text",placeholder:"Enter API Key",value:k.apiKey,onChange:function(e){return C(ma(ma({},k),{},{apiKey:e.target.value}))}}),"Custom"===A&&a.createElement(a.Fragment,null,a.createElement("input",{type:"text",placeholder:"Service Name",value:k.name,onChange:function(e){return C(ma(ma({},k),{},{name:e.target.value}))}}),a.createElement("input",{type:"text",placeholder:"API Key",value:k.apiKey,onChange:function(e){return C(ma(ma({},k),{},{apiKey:e.target.value}))}})),a.createElement("button",{onClick:function(){if(A){var e;if("Custom"===A){if(!k.name||!k.apiKey)return void alert("Enter both service name and API key");e=k}else{if(!k.apiKey)return void alert("Enter API key for the selected service");e={name:A,apiKey:k.apiKey}}var t=[].concat(ga(x),[e]);B(t),localStorage.setItem("apiKeys",JSON.stringify(t)),E(""),C({name:"",apiKey:""})}}},"Add Service"))),x.length>0&&a.createElement("section",{className:"card api-list-card"},a.createElement("h2",null,"Added Services / API Keys"),a.createElement("ul",{className:"api-list"},x.map(function(e,t){var n=P.includes(t);return a.createElement("li",{key:t,className:n?"selected":"",onClick:function(){O(n?P.filter(function(e){return e!==t}):[].concat(ga(P),[t]))}},e.name," - ",e.apiKey||a.createElement("em",null,"API key not set"))})),P.length>0&&a.createElement("button",{className:"remove-btn",onClick:function(){if(0!==P.length){var e=x.filter(function(e,t){return!P.includes(t)});B(e),localStorage.setItem("apiKeys",JSON.stringify(e)),O([])}}},"Remove Selected Service(s)")),a.createElement("section",{className:"card"},a.createElement("h2",null,"Two-Factor Authentication"),a.createElement("button",{onClick:function(){return $("Google Authenticator")}},"Enable Google Authenticator"),a.createElement("button",{onClick:function(){return $("Gmail OTP")}},"Enable Gmail OTP"),N&&a.createElement("p",null,"2FA Enabled via ",L)),a.createElement("section",{className:"card"},a.createElement("h2",null,"Danger Zone"),a.createElement("button",{onClick:U,className:"delete-btn",disabled:F},F?"Deleting...":"Delete Account"))),a.createElement(Vr,null))};var Sa=n(581),xa={};xa.styleTagTransform=Qe(),xa.setAttributes=Ve(),xa.insert=He().bind(null,"head"),xa.domAPI=$e(),xa.insertStyleElement=Ge(),Me()(Sa.A,xa),Sa.A&&Sa.A.locals&&Sa.A.locals;var Ba=function(){return"true"===localStorage.getItem("loggedIn")?a.createElement(Qr,null):a.createElement(ie,{to:"/"})};const Ta=function(){return a.createElement(ce,null,a.createElement(ue,{path:"/",element:a.createElement(Sr,null)}),"        ",a.createElement(ue,{path:"/login",element:a.createElement(Sr,null)}),a.createElement(ue,{path:"/register",element:a.createElement(_r,null)}),a.createElement(ue,{path:"/profile",element:a.createElement(sa,null)}),a.createElement(ue,{path:"/settings",element:a.createElement(Ca,null)}),a.createElement(ue,{path:"/dashboard",element:a.createElement(Ba,null)}),"  ")};var Pa=n(208),Oa={};Oa.styleTagTransform=Qe(),Oa.setAttributes=Ve(),Oa.insert=He().bind(null,"head"),Oa.domAPI=$e(),Oa.insertStyleElement=Ge(),Me()(Pa.A,Oa),Pa.A&&Pa.A.locals&&Pa.A.locals,o.createRoot(document.getElementById("root")).render(a.createElement(a.StrictMode,null,a.createElement(Ne,null,a.createElement(Ta,null))))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,